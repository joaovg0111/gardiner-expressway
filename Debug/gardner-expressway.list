
gardner-expressway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000900c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009120  08009120  00019120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d0  080095d0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080095d0  080095d0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095d0  080095d0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080095d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200000a0  08009678  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08009678  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001362f  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002708  00000000  00000000  000336f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00035e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b7e  00000000  00000000  00037d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124b8  00000000  00000000  000518ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2fd  00000000  00000000  00063da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f30a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  000f30f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009104 	.word	0x08009104

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08009104 	.word	0x08009104

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <setupBLE>:
void sendInstruction (AtInstruction_t instruction, char* parameter);
char** str_split (char* a_str, const char a_delim);
int getSubstring (char *source, char *target,int from, int to);
void sendToLogger (char *msg);

void setupBLE(UART_HandleTypeDef *huartInterface, UART_HandleTypeDef *loggingInterface) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	huart = huartInterface;
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <setupBLE+0x28>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]
	loggingHuart = loggingInterface;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <setupBLE+0x2c>)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6013      	str	r3, [r2, #0]
	sendInstruction(SET_PERMISSIONS, "11111");
 80011b2:	4906      	ldr	r1, [pc, #24]	; (80011cc <setupBLE+0x30>)
 80011b4:	2007      	movs	r0, #7
 80011b6:	f000 f80b 	bl	80011d0 <sendInstruction>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000134 	.word	0x20000134
 80011c8:	20000138 	.word	0x20000138
 80011cc:	08009164 	.word	0x08009164

080011d0 <sendInstruction>:

void sendInstruction (AtInstruction_t instruction, char* parameter) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
	char *instructionPrefix = atInstructions[instruction];
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <sendInstruction+0x5c>)
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	60fb      	str	r3, [r7, #12]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 80011e6:	201e      	movs	r0, #30
 80011e8:	f005 f8c2 	bl	8006370 <malloc>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60bb      	str	r3, [r7, #8]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	490e      	ldr	r1, [pc, #56]	; (8001230 <sendInstruction+0x60>)
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	f005 fcec 	bl	8006bd4 <siprintf>
	sendToLogger(completeInstruction);
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f000 f9f7 	bl	80015f0 <sendToLogger>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <sendInstruction+0x64>)
 8001204:	681c      	ldr	r4, [r3, #0]
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f7fe ffa2 	bl	8000150 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	4620      	mov	r0, r4
 8001218:	f004 fe3f 	bl	8005e9a <HAL_UART_Transmit>
	free(completeInstruction);
 800121c:	68b8      	ldr	r0, [r7, #8]
 800121e:	f005 f8af 	bl	8006380 <free>
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	0800916c 	.word	0x0800916c
 8001234:	20000134 	.word	0x20000134

08001238 <masterScanForSlaves>:
	char powerString[5];
	gcvt(power, 2, powerString);
	sendInstruction(SET_TRANSMITTING_POWER, powerString);
}

ListDevices_t masterScanForSlaves () {
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	char inputBuffer[1];
	char *allText = (char *) malloc(1000 * sizeof(char));
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f005 f894 	bl	8006370 <malloc>
 8001248:	4603      	mov	r3, r0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Send the scan request
	sendToLogger("About to inquire \r\n");
 800124c:	4871      	ldr	r0, [pc, #452]	; (8001414 <masterScanForSlaves+0x1dc>)
 800124e:	f000 f9cf 	bl	80015f0 <sendToLogger>
	sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
 8001252:	4971      	ldr	r1, [pc, #452]	; (8001418 <masterScanForSlaves+0x1e0>)
 8001254:	2005      	movs	r0, #5
 8001256:	f7ff ffbb 	bl	80011d0 <sendInstruction>
	sendToLogger("Inquired \r\n");
 800125a:	4870      	ldr	r0, [pc, #448]	; (800141c <masterScanForSlaves+0x1e4>)
 800125c:	f000 f9c8 	bl	80015f0 <sendToLogger>
	// Receive the scan answer
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 8001260:	e00e      	b.n	8001280 <masterScanForSlaves+0x48>
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, HAL_MAX_DELAY);
 8001262:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <masterScanForSlaves+0x1e8>)
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	f107 0110 	add.w	r1, r7, #16
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	2201      	movs	r2, #1
 8001270:	f004 fea5 	bl	8005fbe <HAL_UART_Receive>
		strcat(allText, inputBuffer);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800127c:	f005 fcca 	bl	8006c14 <strcat>
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 8001280:	4968      	ldr	r1, [pc, #416]	; (8001424 <masterScanForSlaves+0x1ec>)
 8001282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001284:	f005 fd05 	bl	8006c92 <strstr>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0e9      	beq.n	8001262 <masterScanForSlaves+0x2a>
	}
	sendToLogger("Received \r\n");
 800128e:	4866      	ldr	r0, [pc, #408]	; (8001428 <masterScanForSlaves+0x1f0>)
 8001290:	f000 f9ae 	bl	80015f0 <sendToLogger>
	sendToLogger(allText);
 8001294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001296:	f000 f9ab 	bl	80015f0 <sendToLogger>
	sendToLogger("\r\nRetransmitted \r\n");
 800129a:	4864      	ldr	r0, [pc, #400]	; (800142c <masterScanForSlaves+0x1f4>)
 800129c:	f000 f9a8 	bl	80015f0 <sendToLogger>
	// Break the scan into lines:
	char** lines = str_split(allText, '\n');
 80012a0:	210a      	movs	r1, #10
 80012a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012a4:	f000 f8c6 	bl	8001434 <str_split>
 80012a8:	62b8      	str	r0, [r7, #40]	; 0x28

	// Breaking the lines into tokens and creating the struct
	size_t nbOfEntries = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
	while (*(lines + nbOfEntries) != 0) nbOfEntries++;
 80012ae:	e002      	b.n	80012b6 <masterScanForSlaves+0x7e>
 80012b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b2:	3301      	adds	r3, #1
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <masterScanForSlaves+0x78>
	nbOfEntries--;
 80012c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c6:	3b01      	subs	r3, #1
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
	Device_t *entries = (Device_t *) malloc(nbOfEntries * sizeof(Device_t));
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 f84e 	bl	8006370 <malloc>
 80012d4:	4603      	mov	r3, r0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < nbOfEntries; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
 80012dc:	e081      	b.n	80013e2 <masterScanForSlaves+0x1aa>
		// Removing leading trash characters
		char *line = lines[i];
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	623b      	str	r3, [r7, #32]
		char *e = strrchr(line, '+');
 80012ea:	212b      	movs	r1, #43	; 0x2b
 80012ec:	6a38      	ldr	r0, [r7, #32]
 80012ee:	f005 fcbc 	bl	8006c6a <strrchr>
 80012f2:	61f8      	str	r0, [r7, #28]
		int lastPlusIndex =  (int)(e - line);
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	61bb      	str	r3, [r7, #24]
		getSubstring(line, line, lastPlusIndex, strlen(line));
 80012fc:	6a38      	ldr	r0, [r7, #32]
 80012fe:	f7fe ff27 	bl	8000150 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	6a39      	ldr	r1, [r7, #32]
 8001308:	6a38      	ldr	r0, [r7, #32]
 800130a:	f000 f91d 	bl	8001548 <getSubstring>
		char **tokens = str_split(line, ',');
 800130e:	212c      	movs	r1, #44	; 0x2c
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f000 f88f 	bl	8001434 <str_split>
 8001316:	6178      	str	r0, [r7, #20]
		// Checking if all the needed info is available.
		if (*(tokens + 2) != 0) {
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d043      	beq.n	80013aa <masterScanForSlaves+0x172>
			getSubstring(tokens[0], tokens[0], 7, strlen(tokens[0]));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	681d      	ldr	r5, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff0e 	bl	8000150 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	2207      	movs	r2, #7
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f000 f904 	bl	8001548 <getSubstring>
			getSubstring(tokens[2], tokens[2], 0, strlen(tokens[2])-2);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3308      	adds	r3, #8
 8001344:	681c      	ldr	r4, [r3, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3308      	adds	r3, #8
 800134a:	681d      	ldr	r5, [r3, #0]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3308      	adds	r3, #8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe fefc 	bl	8000150 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	3b02      	subs	r3, #2
 800135c:	2200      	movs	r2, #0
 800135e:	4629      	mov	r1, r5
 8001360:	4620      	mov	r0, r4
 8001362:	f000 f8f1 	bl	8001548 <getSubstring>

			entries[i].index = i+1;
 8001366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	4413      	add	r3, r2
 800136e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001370:	3201      	adds	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
			entries[i].mac = tokens[0];
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137a:	4413      	add	r3, r2
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = atoi(tokens[1]);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3304      	adds	r3, #4
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138e:	18d4      	adds	r4, r2, r3
 8001390:	4608      	mov	r0, r1
 8001392:	f004 ffad 	bl	80062f0 <atoi>
 8001396:	4603      	mov	r3, r0
 8001398:	60a3      	str	r3, [r4, #8]
			entries[i].name = tokens[2];
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	4413      	add	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	6892      	ldr	r2, [r2, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	e018      	b.n	80013dc <masterScanForSlaves+0x1a4>
		} else {
			entries[i].index = -1;
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	4413      	add	r3, r2
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	601a      	str	r2, [r3, #0]
			entries[i].mac = "INVALID";
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013be:	4413      	add	r3, r2
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <masterScanForSlaves+0x1f8>)
 80013c2:	605a      	str	r2, [r3, #4]
			entries[i].signalStrength = 1;
 80013c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	4413      	add	r3, r2
 80013cc:	2201      	movs	r2, #1
 80013ce:	609a      	str	r2, [r3, #8]
			entries[i].name = "INVALID";
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d6:	4413      	add	r3, r2
 80013d8:	4a15      	ldr	r2, [pc, #84]	; (8001430 <masterScanForSlaves+0x1f8>)
 80013da:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < nbOfEntries; i++) {
 80013dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013de:	3301      	adds	r3, #1
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
 80013e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e6:	429a      	cmp	r2, r3
 80013e8:	f63f af79 	bhi.w	80012de <masterScanForSlaves+0xa6>
		}
	}
	free(allText);
 80013ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013ee:	f004 ffc7 	bl	8006380 <free>
//	return entries;
	ListDevices_t answer = {nbOfEntries, entries};
 80013f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	60fb      	str	r3, [r7, #12]
	return answer;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001406:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bdb0      	pop	{r4, r5, r7, pc}
 8001412:	bf00      	nop
 8001414:	08009174 	.word	0x08009174
 8001418:	08009188 	.word	0x08009188
 800141c:	0800918c 	.word	0x0800918c
 8001420:	20000134 	.word	0x20000134
 8001424:	08009198 	.word	0x08009198
 8001428:	080091a4 	.word	0x080091a4
 800142c:	080091b0 	.word	0x080091b0
 8001430:	080091c4 	.word	0x080091c4

08001434 <str_split>:
void connectMasterToSlaveFromMACAddress (char *mac) {
	sendInstruction(MASTER_CONNECT_SLAVE, mac);
}

char** str_split(char* a_str, const char a_delim)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 8001458:	e00c      	b.n	8001474 <str_split+0x40>
    {
        if (a_delim == *tmp)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	429a      	cmp	r2, r3
 8001462:	d104      	bne.n	800146e <str_split+0x3a>
        {
            count++;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3301      	adds	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	3301      	adds	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7fe fe67 	bl	8000150 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	3b01      	subs	r3, #1
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	429a      	cmp	r2, r3
 800148e:	bf34      	ite	cc
 8001490:	2301      	movcc	r3, #1
 8001492:	2300      	movcs	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	4413      	add	r3, r2
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 ff61 	bl	8006370 <malloc>
 80014ae:	4603      	mov	r3, r0
 80014b0:	613b      	str	r3, [r7, #16]

    if (result)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d039      	beq.n	800152c <str_split+0xf8>
    {
        size_t idx  = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fbfc 	bl	8006cc0 <strtok>
 80014c8:	6178      	str	r0, [r7, #20]

        while (token)
 80014ca:	e01b      	b.n	8001504 <str_split+0xd0>
        {
            assert(idx < count);
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d305      	bcc.n	80014e0 <str_split+0xac>
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <str_split+0x104>)
 80014d6:	4a19      	ldr	r2, [pc, #100]	; (800153c <str_split+0x108>)
 80014d8:	21bf      	movs	r1, #191	; 0xbf
 80014da:	4819      	ldr	r0, [pc, #100]	; (8001540 <str_split+0x10c>)
 80014dc:	f004 feea 	bl	80062b4 <__assert_func>
            *(result + idx++) = strdup(token);
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	61ba      	str	r2, [r7, #24]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	18d4      	adds	r4, r2, r3
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f005 fba1 	bl	8006c34 <strdup>
 80014f2:	4603      	mov	r3, r0
 80014f4:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	2000      	movs	r0, #0
 80014fe:	f005 fbdf 	bl	8006cc0 <strtok>
 8001502:	6178      	str	r0, [r7, #20]
        while (token)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1e0      	bne.n	80014cc <str_split+0x98>
        }
        assert(idx == count - 1);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	3b01      	subs	r3, #1
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	429a      	cmp	r2, r3
 8001512:	d005      	beq.n	8001520 <str_split+0xec>
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <str_split+0x110>)
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <str_split+0x108>)
 8001518:	21c3      	movs	r1, #195	; 0xc3
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <str_split+0x10c>)
 800151c:	f004 feca 	bl	80062b4 <__assert_func>
        *(result + idx) = 0;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    }

    return result;
 800152c:	693b      	ldr	r3, [r7, #16]
}
 800152e:	4618      	mov	r0, r3
 8001530:	372c      	adds	r7, #44	; 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	080091cc 	.word	0x080091cc
 800153c:	0800925c 	.word	0x0800925c
 8001540:	080091d8 	.word	0x080091d8
 8001544:	08009200 	.word	0x08009200

08001548 <getSubstring>:

int  getSubstring(char *source, char *target,int from, int to)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
	int length=0;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
	int i=0,j=0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]

	//get length
	while(source[i++]!='\0')
 8001562:	e002      	b.n	800156a <getSubstring+0x22>
		length++;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
	while(source[i++]!='\0')
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	61ba      	str	r2, [r7, #24]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f3      	bne.n	8001564 <getSubstring+0x1c>

	if(from<0 || from>length){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db03      	blt.n	800158a <getSubstring+0x42>
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	dd04      	ble.n	8001594 <getSubstring+0x4c>
		printf("Invalid \'from\' index\n");
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <getSubstring+0xa0>)
 800158c:	f005 fb0a 	bl	8006ba4 <puts>
		return 1;
 8001590:	2301      	movs	r3, #1
 8001592:	e025      	b.n	80015e0 <getSubstring+0x98>
	}
	if(to>length){
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	dd04      	ble.n	80015a6 <getSubstring+0x5e>
		printf("Invalid \'to\' index\n");
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <getSubstring+0xa4>)
 800159e:	f005 fb01 	bl	8006ba4 <puts>
		return 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01c      	b.n	80015e0 <getSubstring+0x98>
	}

	for(i=from,j=0;i<=to;i++,j++){
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e00d      	b.n	80015cc <getSubstring+0x84>
		target[j]=source[i];
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	441a      	add	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	440b      	add	r3, r1
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	701a      	strb	r2, [r3, #0]
	for(i=from,j=0;i<=to;i++,j++){
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dded      	ble.n	80015b0 <getSubstring+0x68>
	}

	//assign NULL at the end of string
	target[j]='\0';
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]

	return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	08009214 	.word	0x08009214
 80015ec:	0800922c 	.word	0x0800922c

080015f0 <sendToLogger>:

void sendToLogger (char *msg) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(loggingHuart, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <sendToLogger+0x2c>)
 80015fa:	681c      	ldr	r4, [r3, #0]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7fe fda7 	bl	8000150 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4620      	mov	r0, r4
 800160e:	f004 fc44 	bl	8005e9a <HAL_UART_Transmit>
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	20000138 	.word	0x20000138

08001620 <writeGPIO>:
#include "main.h"
#include "DCMotor.h"


// Function to write a digital value to a GPIO pin
void writeGPIO(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState value){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(port, pin, value);
 8001630:	787a      	ldrb	r2, [r7, #1]
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f002 f94c 	bl	80038d4 <HAL_GPIO_WritePin>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <toggleGPIO>:

// Function to toggle a GPIO pin
void toggleGPIO(GPIO_TypeDef* port, uint16_t pin){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_TogglePin(port, pin);
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f002 f955 	bl	8003904 <HAL_GPIO_TogglePin>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <initDCMotor>:
// Structure to hold the configuration for the PWM signal of the motor
TIM_OC_InitTypeDef sConfigOC_DC_Motor = {0};


// Function to initialize the motor
void initDCMotor(TIM_HandleTypeDef *htimx, uint32_t channel, uint16_t period){
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	4613      	mov	r3, r2
 800166e:	80fb      	strh	r3, [r7, #6]
    // Start generating the PWM signal for the motor
    HAL_TIM_PWM_Start(htimx, channel);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f003 fe3a 	bl	80052ec <HAL_TIM_PWM_Start>

    // Set the initial direction of the motor to forward
    setDCMotorDirection(0x02);
 8001678:	2002      	movs	r0, #2
 800167a:	f000 f845 	bl	8001708 <setDCMotorDirection>

    // Set the initial speed of the motor to 100%
    setDCMotorSpeed(htimx,channel,period,100);
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f805 	bl	8001694 <setDCMotorSpeed>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <setDCMotorSpeed>:

// Function to set the speed of the motor
void setDCMotorSpeed(TIM_HandleTypeDef *htimx, uint32_t channel, uint16_t period, uint16_t speed){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80bb      	strh	r3, [r7, #4]
    // Calculate the pulse width of the PWM signal based on the specified speed and period
    sConfigOC_DC_Motor.Pulse = (speed*period)/100;
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	88fa      	ldrh	r2, [r7, #6]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <setDCMotorSpeed+0x6c>)
 80016b4:	fb82 1203 	smull	r1, r2, r2, r3
 80016b8:	1152      	asrs	r2, r2, #5
 80016ba:	17db      	asrs	r3, r3, #31
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <setDCMotorSpeed+0x70>)
 80016c2:	605a      	str	r2, [r3, #4]
    sConfigOC_DC_Motor.OCMode = TIM_OCMODE_PWM1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <setDCMotorSpeed+0x70>)
 80016c6:	2260      	movs	r2, #96	; 0x60
 80016c8:	601a      	str	r2, [r3, #0]
    sConfigOC_DC_Motor.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <setDCMotorSpeed+0x70>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    sConfigOC_DC_Motor.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <setDCMotorSpeed+0x70>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]

    // Stop the PWM signal and re-initialize it with the new configuration
    HAL_TIM_PWM_Stop(htimx, channel);
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f003 fea9 	bl	8005430 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Init(htimx);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f003 fdb5 	bl	800524e <HAL_TIM_PWM_Init>
    HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC_DC_Motor, channel);
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	4907      	ldr	r1, [pc, #28]	; (8001704 <setDCMotorSpeed+0x70>)
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f003 ff05 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(htimx, channel);
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f003 fdfb 	bl	80052ec <HAL_TIM_PWM_Start>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	51eb851f 	.word	0x51eb851f
 8001704:	200000bc 	.word	0x200000bc

08001708 <setDCMotorDirection>:

// Function to set the direction of the motor
void setDCMotorDirection(uint8_t dir_code){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    // Initialize the output bit to send to the direction control registers as low
    GPIO_PinState bit_to_send = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]

    // Reset the enable and latch pins for the direction control registers
    writeGPIO(GPIOA, DIR_EN_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	481f      	ldr	r0, [pc, #124]	; (800179c <setDCMotorDirection+0x94>)
 800171e:	f7ff ff7f 	bl	8001620 <writeGPIO>
    writeGPIO(GPIOA, DIR_LATCH_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	481d      	ldr	r0, [pc, #116]	; (800179c <setDCMotorDirection+0x94>)
 8001728:	f7ff ff7a 	bl	8001620 <writeGPIO>

    // Reset the clock pin for the direction control registers
    writeGPIO(GPIOB, DIR_CLK_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2120      	movs	r1, #32
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <setDCMotorDirection+0x98>)
 8001732:	f7ff ff75 	bl	8001620 <writeGPIO>

    // Initialize a comparator value to compare with the direction code
    unsigned char comparator = 0x80;
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	73bb      	strb	r3, [r7, #14]

    // Iterate through each bit of the direction code
    for (int i = 0; i < 8; i++){
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	e01b      	b.n	8001778 <setDCMotorDirection+0x70>
        // If the current bit of the direction code is set, set the output bit to send as high
        if (dir_code & comparator){
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	4013      	ands	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <setDCMotorDirection+0x4a>
            bit_to_send = GPIO_PIN_SET;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e001      	b.n	8001756 <setDCMotorDirection+0x4e>
        }
        // Otherwise, set the output bit to send as low
        else{
            bit_to_send = GPIO_PIN_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
        }

        // Set the data pin to the output bit to send
        writeGPIO(GPIOA, DIR_SER_Pin, bit_to_send);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	461a      	mov	r2, r3
 800175a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <setDCMotorDirection+0x94>)
 8001760:	f7ff ff5e 	bl	8001620 <writeGPIO>

        // Toggle the clock pin to send the output bit to the direction control registers
        toggleGPIO(GPIOB, DIR_CLK_Pin);
 8001764:	2120      	movs	r1, #32
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <setDCMotorDirection+0x98>)
 8001768:	f7ff ff6c 	bl	8001644 <toggleGPIO>

        // Shift the comparator value to compare the next bit of the direction code
        comparator = comparator >> 1;
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; i < 8; i++){
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b07      	cmp	r3, #7
 800177c:	dde0      	ble.n	8001740 <setDCMotorDirection+0x38>
    }

    // Set the latch pin to high to latch the output bits into the direction control registers
    writeGPIO(GPIOA, DIR_LATCH_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2140      	movs	r1, #64	; 0x40
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <setDCMotorDirection+0x94>)
 8001784:	f7ff ff4c 	bl	8001620 <writeGPIO>

    // Set the enable pin to high to enable the direction control registers
    writeGPIO(GPIOA, DIR_EN_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <setDCMotorDirection+0x94>)
 8001790:	f7ff ff46 	bl	8001620 <writeGPIO>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <QMC_init>:
#include"QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c, Compass_config *config)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	uint8_t array[3];
	qmc->i2c=i2c;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
	qmc->Control_RegisterA=0x00;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
	qmc->Control_RegisterB=0x00;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	725a      	strb	r2, [r3, #9]
	qmc->Mode_Register=0x00;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	729a      	strb	r2, [r3, #10]
	array[0]=qmc->Control_RegisterA;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7a1b      	ldrb	r3, [r3, #8]
 80017cc:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_RegisterB;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7a5b      	ldrb	r3, [r3, #9]
 80017d2:	757b      	strb	r3, [r7, #21]
	array[2]=qmc->Mode_Register;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	7a9b      	ldrb	r3, [r3, #10]
 80017d8:	75bb      	strb	r3, [r7, #22]

	if(config->output_rate ==0.75);
	else if(config->output_rate==1.5)qmc->Control_RegisterA 		|= 0b00000100;
	else if(config->output_rate==3)qmc->Control_RegisterA 			|= 0b00001000;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <QMC_init+0x4e>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	7a1b      	ldrb	r3, [r3, #8]
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	721a      	strb	r2, [r3, #8]
 80017f0:	e02a      	b.n	8001848 <QMC_init+0xa4>
	else if(config->output_rate==7.5)qmc->Control_RegisterA 		|= 0b00001100;
	else if(config->output_rate==15)qmc->Control_RegisterA 			|= 0b00010000;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d107      	bne.n	800180a <QMC_init+0x66>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	7a1b      	ldrb	r3, [r3, #8]
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	b2da      	uxtb	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	721a      	strb	r2, [r3, #8]
 8001808:	e01e      	b.n	8001848 <QMC_init+0xa4>
	else if(config->output_rate==30)qmc->Control_RegisterA 			|= 0b00010100;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	789b      	ldrb	r3, [r3, #2]
 800180e:	2b1e      	cmp	r3, #30
 8001810:	d107      	bne.n	8001822 <QMC_init+0x7e>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	f043 0314 	orr.w	r3, r3, #20
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	721a      	strb	r2, [r3, #8]
 8001820:	e012      	b.n	8001848 <QMC_init+0xa4>
	else if(config->output_rate==75)qmc->Control_RegisterA 			|= 0b00011000;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	2b4b      	cmp	r3, #75	; 0x4b
 8001828:	d107      	bne.n	800183a <QMC_init+0x96>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	7a1b      	ldrb	r3, [r3, #8]
 800182e:	f043 0318 	orr.w	r3, r3, #24
 8001832:	b2da      	uxtb	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	721a      	strb	r2, [r3, #8]
 8001838:	e006      	b.n	8001848 <QMC_init+0xa4>
	else qmc->Control_RegisterA |= 0b00010000;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	7a1b      	ldrb	r3, [r3, #8]
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	721a      	strb	r2, [r3, #8]

	if(config->meas_mode == Normal);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <QMC_init+0xda>
	else if (config->meas_mode == Positive) qmc->Control_RegisterA 	|= 0b00000001;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <QMC_init+0xc4>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	721a      	strb	r2, [r3, #8]
 8001866:	e00a      	b.n	800187e <QMC_init+0xda>
	else if (config->meas_mode == Negative) qmc->Control_RegisterA 	|= 0b00000010;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d106      	bne.n	800187e <QMC_init+0xda>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	7a1b      	ldrb	r3, [r3, #8]
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	721a      	strb	r2, [r3, #8]

	if(config->samples_num == one);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d022      	beq.n	80018cc <QMC_init+0x128>
	else if(config->samples_num == two) qmc->Control_RegisterA 		|= 0b00100000;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <QMC_init+0xfa>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	7a1b      	ldrb	r3, [r3, #8]
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	721a      	strb	r2, [r3, #8]
 800189c:	e016      	b.n	80018cc <QMC_init+0x128>
	else if(config->samples_num == four) qmc->Control_RegisterA 	|= 0b01000000;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <QMC_init+0x112>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	7a1b      	ldrb	r3, [r3, #8]
 80018aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	721a      	strb	r2, [r3, #8]
 80018b4:	e00a      	b.n	80018cc <QMC_init+0x128>
	else if(config->samples_num == eight) qmc->Control_RegisterA 	|= 0b01100000;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d106      	bne.n	80018cc <QMC_init+0x128>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	7a1b      	ldrb	r3, [r3, #8]
 80018c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	721a      	strb	r2, [r3, #8]

	if(config->gain == _0_88);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	78db      	ldrb	r3, [r3, #3]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d05a      	beq.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _1_3) 	qmc->Control_RegisterB 			|= 0b00100000;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <QMC_init+0x148>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	7a5b      	ldrb	r3, [r3, #9]
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	725a      	strb	r2, [r3, #9]
 80018ea:	e04e      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _1_9) 	qmc->Control_RegisterB 			|= 0b01000000;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d107      	bne.n	8001904 <QMC_init+0x160>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	7a5b      	ldrb	r3, [r3, #9]
 80018f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	725a      	strb	r2, [r3, #9]
 8001902:	e042      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _2_5) 	qmc->Control_RegisterB 			|= 0b01100000;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	78db      	ldrb	r3, [r3, #3]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d107      	bne.n	800191c <QMC_init+0x178>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	7a5b      	ldrb	r3, [r3, #9]
 8001910:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	725a      	strb	r2, [r3, #9]
 800191a:	e036      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _4_0) 	qmc->Control_RegisterB 			|= 0b10000000;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	78db      	ldrb	r3, [r3, #3]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d107      	bne.n	8001934 <QMC_init+0x190>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7a5b      	ldrb	r3, [r3, #9]
 8001928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800192c:	b2da      	uxtb	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	725a      	strb	r2, [r3, #9]
 8001932:	e02a      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _4_7) 	qmc->Control_RegisterB 			|= 0b10100000;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	78db      	ldrb	r3, [r3, #3]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d107      	bne.n	800194c <QMC_init+0x1a8>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	7a5b      	ldrb	r3, [r3, #9]
 8001940:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	725a      	strb	r2, [r3, #9]
 800194a:	e01e      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _5_6) 	qmc->Control_RegisterB 			|= 0b11000000;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	78db      	ldrb	r3, [r3, #3]
 8001950:	2b06      	cmp	r3, #6
 8001952:	d107      	bne.n	8001964 <QMC_init+0x1c0>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	7a5b      	ldrb	r3, [r3, #9]
 8001958:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	725a      	strb	r2, [r3, #9]
 8001962:	e012      	b.n	800198a <QMC_init+0x1e6>
	else if (config->gain == _8_1) 	qmc->Control_RegisterB 			|= 0b11100000;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	78db      	ldrb	r3, [r3, #3]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d107      	bne.n	800197c <QMC_init+0x1d8>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7a5b      	ldrb	r3, [r3, #9]
 8001970:	f063 031f 	orn	r3, r3, #31
 8001974:	b2da      	uxtb	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	725a      	strb	r2, [r3, #9]
 800197a:	e006      	b.n	800198a <QMC_init+0x1e6>
	else qmc->Control_RegisterB 									|= 0b00100000;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	7a5b      	ldrb	r3, [r3, #9]
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	725a      	strb	r2, [r3, #9]

	if(config->op_mode == Continuous_meas);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	791b      	ldrb	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01e      	beq.n	80019d0 <QMC_init+0x22c>
	else if(config->op_mode == Single_meas) qmc->Mode_Register 		|= 0b00000001;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	791b      	ldrb	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <QMC_init+0x206>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	7a9b      	ldrb	r3, [r3, #10]
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	729a      	strb	r2, [r3, #10]
 80019a8:	e012      	b.n	80019d0 <QMC_init+0x22c>
	else if(config->op_mode == Idle) qmc->Mode_Register 			|= 0b00000010;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <QMC_init+0x21e>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	7a9b      	ldrb	r3, [r3, #10]
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	729a      	strb	r2, [r3, #10]
 80019c0:	e006      	b.n	80019d0 <QMC_init+0x22c>
	else qmc->Mode_Register 										|= 0b00000001;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	7a9b      	ldrb	r3, [r3, #10]
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	729a      	strb	r2, [r3, #10]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x3D, qmc->ADDR_Control_RegisterA, 1, &array[0], 1, 100)!=HAL_OK) return 1;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	791b      	ldrb	r3, [r3, #4]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	2364      	movs	r3, #100	; 0x64
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	2301      	movs	r3, #1
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2301      	movs	r3, #1
 80019ea:	213d      	movs	r1, #61	; 0x3d
 80019ec:	f002 f90a 	bl	8003c04 <HAL_I2C_Mem_Write>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <QMC_init+0x256>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e02c      	b.n	8001a54 <QMC_init+0x2b0>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x3D, qmc->ADDR_Control_RegisterB, 1, &array[1], 1, 100)!=HAL_OK) return 1;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	795b      	ldrb	r3, [r3, #5]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	3301      	adds	r3, #1
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	213d      	movs	r1, #61	; 0x3d
 8001a18:	f002 f8f4 	bl	8003c04 <HAL_I2C_Mem_Write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <QMC_init+0x282>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e016      	b.n	8001a54 <QMC_init+0x2b0>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x3D, qmc->ADDR_Mode_Register, 1, &array[2], 1, 100)!=HAL_OK) return 1;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	799b      	ldrb	r3, [r3, #6]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2364      	movs	r3, #100	; 0x64
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	213d      	movs	r1, #61	; 0x3d
 8001a44:	f002 f8de 	bl	8003c04 <HAL_I2C_Mem_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <QMC_init+0x2ae>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <QMC_init+0x2b0>

	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	731a      	strb	r2, [r3, #12]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x3D, qmc->ADDR_Status_Register, 1, qmc->datas, 1, 100);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	79db      	ldrb	r3, [r3, #7]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	330c      	adds	r3, #12
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	9102      	str	r1, [sp, #8]
 8001a80:	2101      	movs	r1, #1
 8001a82:	9101      	str	r1, [sp, #4]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	213d      	movs	r1, #61	; 0x3d
 8001a8a:	f002 f9b5 	bl	8003df8 <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b1b      	ldrb	r3, [r3, #12]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <QMC_read+0x126>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x3D, 0x03, 1, qmc->datas, 6, 100);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	2264      	movs	r2, #100	; 0x64
 8001aa4:	9202      	str	r2, [sp, #8]
 8001aa6:	2206      	movs	r2, #6
 8001aa8:	9201      	str	r2, [sp, #4]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	213d      	movs	r1, #61	; 0x3d
 8001ab2:	f002 f9a1 	bl	8003df8 <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[0]<<8) | qmc->datas[1];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b1b      	ldrb	r3, [r3, #12]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7b5b      	ldrb	r3, [r3, #13]
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	825a      	strh	r2, [r3, #18]
		  qmc->Yaxis= (qmc->datas[2]<<8) | qmc->datas[3];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b9b      	ldrb	r3, [r3, #14]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7bdb      	ldrb	r3, [r3, #15]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	829a      	strh	r2, [r3, #20]
		  qmc->Zaxis= (qmc->datas[4]<<8) | qmc->datas[5];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7c1b      	ldrb	r3, [r3, #16]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7c5b      	ldrb	r3, [r3, #17]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	82da      	strh	r2, [r3, #22]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f8ec 	bl	8000cdc <__aeabi_i2f>
 8001b04:	4604      	mov	r4, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8e5 	bl	8000cdc <__aeabi_i2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	4620      	mov	r0, r4
 8001b18:	f006 f81a 	bl	8007b50 <atan2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <QMC_read+0x140>)
 8001b2a:	f7fe fcd5 	bl	80004d8 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	a318      	add	r3, pc, #96	; (adr r3, 8001b98 <QMC_read+0x138>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fdf6 	bl	800072c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ffbe 	bl	8000ac8 <__aeabi_d2f>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	61da      	str	r2, [r3, #28]

		  if(qmc->compas>0)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff face 	bl	80010fc <__aeabi_fcmpgt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <QMC_read+0x110>
		  {
			  qmc->heading= qmc->compas;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
 8001b6e:	e00c      	b.n	8001b8a <QMC_read+0x12a>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <QMC_read+0x144>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fffc 	bl	8000b74 <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	e001      	b.n	8001b8a <QMC_read+0x12a>
		  }
	  }
	  else
	  {
		  return 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <QMC_read+0x12c>
	  }
return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	f3af 8000 	nop.w
 8001b98:	54442d18 	.word	0x54442d18
 8001b9c:	400921fb 	.word	0x400921fb
 8001ba0:	40668000 	.word	0x40668000
 8001ba4:	43b40000 	.word	0x43b40000

08001ba8 <set_servo_angle>:
#include <Servo.h>

void set_servo_angle(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, int8_t angle) {
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	717b      	strb	r3, [r7, #5]
    uint16_t pulse = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82fb      	strh	r3, [r7, #22]

    if (angle < MIN_ANGLE) {
 8001bc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bc6:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8001bca:	da11      	bge.n	8001bf0 <set_servo_angle+0x48>
        pulse = NEG_ANGLE_PERCENTAGE * period;
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc18 	bl	8000404 <__aeabi_i2d>
 8001bd4:	a352      	add	r3, pc, #328	; (adr r3, 8001d20 <set_servo_angle+0x178>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fc7d 	bl	80004d8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ff4f 	bl	8000a88 <__aeabi_d2uiz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	82fb      	strh	r3, [r7, #22]
 8001bee:	e08b      	b.n	8001d08 <set_servo_angle+0x160>
    }
    else if (angle > MAX_ANGLE) {
 8001bf0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bf4:	2b5a      	cmp	r3, #90	; 0x5a
 8001bf6:	dd11      	ble.n	8001c1c <set_servo_angle+0x74>
        pulse = POS_ANGLE_PERCENTAGE * period;
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc02 	bl	8000404 <__aeabi_i2d>
 8001c00:	a349      	add	r3, pc, #292	; (adr r3, 8001d28 <set_servo_angle+0x180>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fc67 	bl	80004d8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ff39 	bl	8000a88 <__aeabi_d2uiz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	82fb      	strh	r3, [r7, #22]
 8001c1a:	e075      	b.n	8001d08 <set_servo_angle+0x160>
    }
    else if (angle < 0) {
 8001c1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da3b      	bge.n	8001c9c <set_servo_angle+0xf4>
        pulse = (((angle + 90.0) / 90) * (NEUTRAL_ANGLE_PERCENTAGE - NEG_ANGLE_PERCENTAGE) + NEG_ANGLE_PERCENTAGE) * period;
 8001c24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fbeb 	bl	8000404 <__aeabi_i2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <set_servo_angle+0x1a0>)
 8001c34:	f7fe fa9a 	bl	800016c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <set_servo_angle+0x1a0>)
 8001c46:	f7fe fd71 	bl	800072c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	a337      	add	r3, pc, #220	; (adr r3, 8001d30 <set_servo_angle+0x188>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fc3e 	bl	80004d8 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	a32e      	add	r3, pc, #184	; (adr r3, 8001d20 <set_servo_angle+0x178>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fa7f 	bl	800016c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4614      	mov	r4, r2
 8001c74:	461d      	mov	r5, r3
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fbc3 	bl	8000404 <__aeabi_i2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fc27 	bl	80004d8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe fef9 	bl	8000a88 <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	82fb      	strh	r3, [r7, #22]
 8001c9a:	e035      	b.n	8001d08 <set_servo_angle+0x160>
    }
    else if (angle >= 0) {
 8001c9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db31      	blt.n	8001d08 <set_servo_angle+0x160>
        pulse = (((angle) / 90.0) * (POS_ANGLE_PERCENTAGE - NEUTRAL_ANGLE_PERCENTAGE) + NEUTRAL_ANGLE_PERCENTAGE) * period;
 8001ca4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbab 	bl	8000404 <__aeabi_i2d>
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <set_servo_angle+0x1a0>)
 8001cb4:	f7fe fd3a 	bl	800072c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	a31d      	add	r3, pc, #116	; (adr r3, 8001d38 <set_servo_angle+0x190>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc07 	bl	80004d8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	a31b      	add	r3, pc, #108	; (adr r3, 8001d40 <set_servo_angle+0x198>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fa48 	bl	800016c <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4614      	mov	r4, r2
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fb8c 	bl	8000404 <__aeabi_i2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fbf0 	bl	80004d8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe fec2 	bl	8000a88 <__aeabi_d2uiz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	82fb      	strh	r3, [r7, #22]
    }

    set_servo_pwm(timer, channel, period, pulse);
 8001d08:	8afb      	ldrh	r3, [r7, #22]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f81c 	bl	8001d4c <set_servo_pwm>
}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	f3af 8000 	nop.w
 8001d20:	eb1c432d 	.word	0xeb1c432d
 8001d24:	3f9a36e2 	.word	0x3f9a36e2
 8001d28:	c8b43958 	.word	0xc8b43958
 8001d2c:	3fbfbe76 	.word	0x3fbfbe76
 8001d30:	4816f006 	.word	0x4816f006
 8001d34:	3fa8fc50 	.word	0x3fa8fc50
 8001d38:	d3c36114 	.word	0xd3c36114
 8001d3c:	3fa9652b 	.word	0x3fa9652b
 8001d40:	ded288ce 	.word	0xded288ce
 8001d44:	3fb30be0 	.word	0x3fb30be0
 8001d48:	40568000 	.word	0x40568000

08001d4c <set_servo_pwm>:

void set_servo_pwm(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, uint16_t pulse) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	80fb      	strh	r3, [r7, #6]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80bb      	strh	r3, [r7, #4]
    HAL_TIM_PWM_Start(timer, channel);
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f003 fac1 	bl	80052ec <HAL_TIM_PWM_Start>
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	; 0x60
 8001d6c:	617b      	str	r3, [r7, #20]
    sConfigOC.Pulse = pulse;
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4619      	mov	r1, r3
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f003 fbb8 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(timer, channel);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f003 faae 	bl	80052ec <HAL_TIM_PWM_Start>
}
 8001d90:	bf00      	nop
 8001d92:	3730      	adds	r7, #48	; 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
  // Initialize all peripherals
  HAL_Init();
 8001d9e:	f001 fa81 	bl	80032a4 <HAL_Init>
  SystemClock_Config();
 8001da2:	f000 f987 	bl	80020b4 <SystemClock_Config>
  MX_GPIO_Init();
 8001da6:	f000 fb1b 	bl	80023e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001daa:	f000 fa4d 	bl	8002248 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001dae:	f000 f9f1 	bl	8002194 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001db2:	f000 faeb 	bl	800238c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001db6:	f000 f9bf 	bl	8002138 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001dba:	f000 fabd 	bl	8002338 <MX_USART2_UART_Init>

  // Set up BLE communication and initialize motor and servo
  setupBLE(&huart3, &huart2);
 8001dbe:	49ae      	ldr	r1, [pc, #696]	; (8002078 <main+0x2e0>)
 8001dc0:	48ae      	ldr	r0, [pc, #696]	; (800207c <main+0x2e4>)
 8001dc2:	f7ff f9eb 	bl	800119c <setupBLE>
  setDCMotorDirection(0x02);
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f7ff fc9e 	bl	8001708 <setDCMotorDirection>
  initDCMotor(&htim2, TIM_CHANNEL_2, PERIOD);
 8001dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	48ab      	ldr	r0, [pc, #684]	; (8002080 <main+0x2e8>)
 8001dd4:	f7ff fc45 	bl	8001662 <initDCMotor>
  set_servo_angle(&htim3,TIM_CHANNEL_2,PERIOD, offset);
 8001dd8:	4baa      	ldr	r3, [pc, #680]	; (8002084 <main+0x2ec>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de2:	2104      	movs	r1, #4
 8001de4:	48a8      	ldr	r0, [pc, #672]	; (8002088 <main+0x2f0>)
 8001de6:	f7ff fedf 	bl	8001ba8 <set_servo_angle>

  // Initialize variables for PID control
  int8_t error = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  int8_t past_error = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int8_t P = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  int8_t I = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t D = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  const float Kp = 1;
 8001e08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e0c:	61fb      	str	r3, [r7, #28]
  const float Ki = 0.1;
 8001e0e:	4b9f      	ldr	r3, [pc, #636]	; (800208c <main+0x2f4>)
 8001e10:	61bb      	str	r3, [r7, #24]
  const float Kd = 1;
 8001e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e16:	617b      	str	r3, [r7, #20]

  int16_t theta_g = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	827b      	strh	r3, [r7, #18]

  // Initialize compass
  compass.ADDR_Control_RegisterA = ADDR_REG_A;
 8001e1c:	4b9c      	ldr	r3, [pc, #624]	; (8002090 <main+0x2f8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	711a      	strb	r2, [r3, #4]
  compass.ADDR_Control_RegisterB = ADDR_REG_B;
 8001e22:	4b9b      	ldr	r3, [pc, #620]	; (8002090 <main+0x2f8>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	715a      	strb	r2, [r3, #5]
  compass.ADDR_Mode_Register = ADDR_REG_MODE;
 8001e28:	4b99      	ldr	r3, [pc, #612]	; (8002090 <main+0x2f8>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	719a      	strb	r2, [r3, #6]
  compass.ADDR_Status_Register = ADDR_REG_STATUS;
 8001e2e:	4b98      	ldr	r3, [pc, #608]	; (8002090 <main+0x2f8>)
 8001e30:	2209      	movs	r2, #9
 8001e32:	71da      	strb	r2, [r3, #7]

  // Set compass configuration
  config.gain = _1_3;
 8001e34:	4b97      	ldr	r3, [pc, #604]	; (8002094 <main+0x2fc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	70da      	strb	r2, [r3, #3]
  config.meas_mode = Positive;
 8001e3a:	4b96      	ldr	r3, [pc, #600]	; (8002094 <main+0x2fc>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
  config.op_mode = Continuous_meas;
 8001e40:	4b94      	ldr	r3, [pc, #592]	; (8002094 <main+0x2fc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	711a      	strb	r2, [r3, #4]
  config.output_rate = 15;
 8001e46:	4b93      	ldr	r3, [pc, #588]	; (8002094 <main+0x2fc>)
 8001e48:	220f      	movs	r2, #15
 8001e4a:	709a      	strb	r2, [r3, #2]
  config.samples_num = eight;
 8001e4c:	4b91      	ldr	r3, [pc, #580]	; (8002094 <main+0x2fc>)
 8001e4e:	2203      	movs	r2, #3
 8001e50:	705a      	strb	r2, [r3, #1]

  // Initialize compass
  QMC_init(&compass,&hi2c1,&config);
 8001e52:	4a90      	ldr	r2, [pc, #576]	; (8002094 <main+0x2fc>)
 8001e54:	4990      	ldr	r1, [pc, #576]	; (8002098 <main+0x300>)
 8001e56:	488e      	ldr	r0, [pc, #568]	; (8002090 <main+0x2f8>)
 8001e58:	f7ff fca4 	bl	80017a4 <QMC_init>

  // Set initial motor speed and delay for 10 seconds
  setDCMotorSpeed(&htim2,TIM_CHANNEL_2,PERIOD,100);
 8001e5c:	2364      	movs	r3, #100	; 0x64
 8001e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e62:	2104      	movs	r1, #4
 8001e64:	4886      	ldr	r0, [pc, #536]	; (8002080 <main+0x2e8>)
 8001e66:	f7ff fc15 	bl	8001694 <setDCMotorSpeed>
  HAL_Delay(10000);
 8001e6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e6e:	f001 fa7b 	bl	8003368 <HAL_Delay>

  // Infinite loop
  while (1) {
	// Read sensors
	ListDevices_t listOfDevices = masterScanForSlaves();
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f9de 	bl	8001238 <masterScanForSlaves>
	getPowersFromReading(listOfDevices);
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e84:	f000 fb32 	bl	80024ec <getPowersFromReading>
	Point myPosition = get_position(b1Power, b2Power, b3Power);
 8001e88:	4b84      	ldr	r3, [pc, #528]	; (800209c <main+0x304>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff25 	bl	8000cdc <__aeabi_i2f>
 8001e92:	4604      	mov	r4, r0
 8001e94:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <main+0x308>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff1f 	bl	8000cdc <__aeabi_i2f>
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	4b80      	ldr	r3, [pc, #512]	; (80020a4 <main+0x30c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff19 	bl	8000cdc <__aeabi_i2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4638      	mov	r0, r7
 8001eae:	462a      	mov	r2, r5
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	f000 fcb5 	bl	8002820 <get_position>
	free(listOfDevices.devices);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa61 	bl	8006380 <free>
	// Read compass data
	if(!QMC_read(&compass)){
 8001ebe:	4874      	ldr	r0, [pc, #464]	; (8002090 <main+0x2f8>)
 8001ec0:	f7ff fdce 	bl	8001a60 <QMC_read>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1d3      	bne.n	8001e72 <main+0xda>
	  theta_g = (int16_t) compass.heading;
 8001eca:	4b71      	ldr	r3, [pc, #452]	; (8002090 <main+0x2f8>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f91e 	bl	8001110 <__aeabi_f2iz>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	827b      	strh	r3, [r7, #18]

	  // Calculate error
	  error = (180.0/M_PI)*(M_PI/2 + atan2((b1.y - myPosition.y), (b1.x - myPosition.x)) - theta_g);
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <main+0x310>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fe45 	bl	8000b70 <__aeabi_fsub>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fa9d 	bl	8000428 <__aeabi_f2d>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <main+0x310>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe38 	bl	8000b70 <__aeabi_fsub>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa90 	bl	8000428 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f005 fd70 	bl	80079f4 <atan2>
 8001f14:	a354      	add	r3, pc, #336	; (adr r3, 8002068 <main+0x2d0>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe f927 	bl	800016c <__adddf3>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	461d      	mov	r5, r3
 8001f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fa6a 	bl	8000404 <__aeabi_i2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4620      	mov	r0, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	f7fe f916 	bl	8000168 <__aeabi_dsub>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	a34a      	add	r3, pc, #296	; (adr r3, 8002070 <main+0x2d8>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fac5 	bl	80004d8 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fd6f 	bl	8000a38 <__aeabi_d2iz>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	  // Calculate PID control signal
	  if (error==0){
 8001f60:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <main+0x1d6>
		I = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  }
	  P = error;
 8001f6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  I = I + error;
 8001f76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	  if (I > 45){
 8001f86:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f8c:	dd03      	ble.n	8001f96 <main+0x1fe>
		I = 45;
 8001f8e:	232d      	movs	r3, #45	; 0x2d
 8001f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f94:	e007      	b.n	8001fa6 <main+0x20e>
	  }
	  else if (I < -45){
 8001f96:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001f9a:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001f9e:	da02      	bge.n	8001fa6 <main+0x20e>
		I = -45;
 8001fa0:	23d3      	movs	r3, #211	; 0xd3
 8001fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  }

	  D = error - past_error;
 8001fa6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  uint8_t PID = (Kp*P) + (Ki*I) + (Kd*D);
 8001fb6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe8e 	bl	8000cdc <__aeabi_i2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	69f9      	ldr	r1, [r7, #28]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fedd 	bl	8000d84 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461c      	mov	r4, r3
 8001fce:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fe82 	bl	8000cdc <__aeabi_i2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fed1 	bl	8000d84 <__aeabi_fmul>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7fe fdc4 	bl	8000b74 <__addsf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461c      	mov	r4, r3
 8001ff0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fe71 	bl	8000cdc <__aeabi_i2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fec0 	bl	8000d84 <__aeabi_fmul>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	4620      	mov	r0, r4
 800200a:	f7fe fdb3 	bl	8000b74 <__addsf3>
 800200e:	4603      	mov	r3, r0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f8a3 	bl	800115c <__aeabi_f2uiz>
 8002016:	4603      	mov	r3, r0
 8002018:	747b      	strb	r3, [r7, #17]

	  past_error = error;
 800201a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800201e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // Control motors
	  if (PID >= 0){
		angle -= PID;
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <main+0x314>)
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	7c7b      	ldrb	r3, [r7, #17]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <main+0x314>)
 800202e:	701a      	strb	r2, [r3, #0]
	  }
	  else{
		angle += PID;
	  }

	  speed = 100;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <main+0x318>)
 8002032:	2264      	movs	r2, #100	; 0x64
 8002034:	701a      	strb	r2, [r3, #0]

	  // Set servo angle and motor speed
	  set_servo_angle(&htim3,TIM_CHANNEL_2,PERIOD, angle);
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <main+0x314>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b25b      	sxtb	r3, r3
 800203c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002040:	2104      	movs	r1, #4
 8002042:	4811      	ldr	r0, [pc, #68]	; (8002088 <main+0x2f0>)
 8002044:	f7ff fdb0 	bl	8001ba8 <set_servo_angle>
	  setDCMotorSpeed(&htim2,TIM_CHANNEL_2,PERIOD, speed);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <main+0x318>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002052:	2104      	movs	r1, #4
 8002054:	480a      	ldr	r0, [pc, #40]	; (8002080 <main+0x2e8>)
 8002056:	f7ff fb1d 	bl	8001694 <setDCMotorSpeed>

	  // Delay for 50 milliseconds
	  HAL_Delay(50);
 800205a:	2032      	movs	r0, #50	; 0x32
 800205c:	f001 f984 	bl	8003368 <HAL_Delay>
  while (1) {
 8002060:	e707      	b.n	8001e72 <main+0xda>
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	54442d18 	.word	0x54442d18
 800206c:	3ff921fb 	.word	0x3ff921fb
 8002070:	1a63c1f8 	.word	0x1a63c1f8
 8002074:	404ca5dc 	.word	0x404ca5dc
 8002078:	20000284 	.word	0x20000284
 800207c:	2000013c 	.word	0x2000013c
 8002080:	2000023c 	.word	0x2000023c
 8002084:	20000020 	.word	0x20000020
 8002088:	200001d4 	.word	0x200001d4
 800208c:	3dcccccd 	.word	0x3dcccccd
 8002090:	2000021c 	.word	0x2000021c
 8002094:	200002c8 	.word	0x200002c8
 8002098:	20000180 	.word	0x20000180
 800209c:	200000dc 	.word	0x200000dc
 80020a0:	200000e0 	.word	0x200000e0
 80020a4:	200000e4 	.word	0x200000e4
 80020a8:	20000024 	.word	0x20000024
 80020ac:	200000d8 	.word	0x200000d8
 80020b0:	200000d9 	.word	0x200000d9

080020b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b090      	sub	sp, #64	; 0x40
 80020b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	2228      	movs	r2, #40	; 0x28
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f964 	bl	8006390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020da:	2301      	movs	r3, #1
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020de:	2310      	movs	r3, #16
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e2:	2302      	movs	r3, #2
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80020ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fc41 	bl	800497c <HAL_RCC_OscConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002100:	f000 fdcc 	bl	8002c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002104:	230f      	movs	r3, #15
 8002106:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002108:	2302      	movs	r3, #2
 800210a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f002 feac 	bl	8004e7c <HAL_RCC_ClockConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800212a:	f000 fdb7 	bl	8002c9c <Error_Handler>
  }
}
 800212e:	bf00      	nop
 8002130:	3740      	adds	r7, #64	; 0x40
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_I2C1_Init+0x50>)
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <MX_I2C1_Init+0x54>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_I2C1_Init+0x50>)
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_I2C1_Init+0x58>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_I2C1_Init+0x50>)
 8002156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_I2C1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_I2C1_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_I2C1_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_I2C1_Init+0x50>)
 8002176:	f001 fc01 	bl	800397c <HAL_I2C_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002180:	f000 fd8c 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000180 	.word	0x20000180
 800218c:	40005400 	.word	0x40005400
 8002190:	000186a0 	.word	0x000186a0

08002194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <MX_TIM2_Init+0xb0>)
 80021e2:	f003 f834 	bl	800524e <HAL_TIM_PWM_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80021ec:	f000 fd56 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4619      	mov	r1, r3
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_TIM2_Init+0xb0>)
 8002200:	f003 fda0 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800220a:	f000 fd47 	bl	8002c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2204      	movs	r2, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM2_Init+0xb0>)
 8002226:	f003 f967 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002230:	f000 fd34 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM2_Init+0xb0>)
 8002236:	f000 fde1 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000023c 	.word	0x2000023c

08002248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <MX_TIM3_Init+0xe8>)
 800227a:	4a2e      	ldr	r2, [pc, #184]	; (8002334 <MX_TIM3_Init+0xec>)
 800227c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320;
 800227e:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <MX_TIM3_Init+0xe8>)
 8002280:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <MX_TIM3_Init+0xe8>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <MX_TIM3_Init+0xe8>)
 800228e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <MX_TIM3_Init+0xe8>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <MX_TIM3_Init+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022a0:	4823      	ldr	r0, [pc, #140]	; (8002330 <MX_TIM3_Init+0xe8>)
 80022a2:	f002 ff85 	bl	80051b0 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022ac:	f000 fcf6 	bl	8002c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4619      	mov	r1, r3
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <MX_TIM3_Init+0xe8>)
 80022be:	f003 f9d9 	bl	8005674 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022c8:	f000 fce8 	bl	8002c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM3_Init+0xe8>)
 80022ce:	f002 ffbe 	bl	800524e <HAL_TIM_PWM_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022d8:	f000 fce0 	bl	8002c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	4619      	mov	r1, r3
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <MX_TIM3_Init+0xe8>)
 80022ec:	f003 fd2a 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022f6:	f000 fcd1 	bl	8002c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2204      	movs	r2, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM3_Init+0xe8>)
 8002312:	f003 f8f1 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800231c:	f000 fcbe 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM3_Init+0xe8>)
 8002322:	f000 fd6b 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3738      	adds	r7, #56	; 0x38
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200001d4 	.word	0x200001d4
 8002334:	40000400 	.word	0x40000400

08002338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART2_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 8002344:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART2_UART_Init+0x4c>)
 8002370:	f003 fd46 	bl	8005e00 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 fc8f 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000284 	.word	0x20000284
 8002388:	40004400 	.word	0x40004400

0800238c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_USART3_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART3_UART_Init+0x4c>)
 80023c4:	f003 fd1c 	bl	8005e00 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f000 fc65 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000013c 	.word	0x2000013c
 80023dc:	40004800 	.word	0x40004800

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <MX_GPIO_Init+0xf8>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <MX_GPIO_Init+0xf8>)
 80023fa:	f043 0310 	orr.w	r3, r3, #16
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <MX_GPIO_Init+0xf8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <MX_GPIO_Init+0xf8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <MX_GPIO_Init+0xf8>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <MX_GPIO_Init+0xf8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002442:	f043 0308 	orr.w	r3, r3, #8
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <MX_GPIO_Init+0xf8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 7158 	mov.w	r1, #864	; 0x360
 800245a:	4820      	ldr	r0, [pc, #128]	; (80024dc <MX_GPIO_Init+0xfc>)
 800245c:	f001 fa3a 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2120      	movs	r1, #32
 8002464:	481e      	ldr	r0, [pc, #120]	; (80024e0 <MX_GPIO_Init+0x100>)
 8002466:	f001 fa35 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_GPIO_Init+0x104>)
 8002472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	4619      	mov	r1, r3
 800247e:	481a      	ldr	r0, [pc, #104]	; (80024e8 <MX_GPIO_Init+0x108>)
 8002480:	f001 f8a4 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_LATCH_Pin DIR_EN_Pin DIR_SER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_LATCH_Pin|DIR_EN_Pin|DIR_SER_Pin;
 8002484:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2302      	movs	r3, #2
 8002494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4619      	mov	r1, r3
 800249c:	480f      	ldr	r0, [pc, #60]	; (80024dc <MX_GPIO_Init+0xfc>)
 800249e:	f001 f895 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_CLK_Pin */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 80024a2:	2320      	movs	r3, #32
 80024a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4619      	mov	r1, r3
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <MX_GPIO_Init+0x100>)
 80024ba:	f001 f887 	bl	80035cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2028      	movs	r0, #40	; 0x28
 80024c4:	f001 f84b 	bl	800355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024c8:	2028      	movs	r0, #40	; 0x28
 80024ca:	f001 f864 	bl	8003596 <HAL_NVIC_EnableIRQ>

}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010800 	.word	0x40010800
 80024e0:	40010c00 	.word	0x40010c00
 80024e4:	10110000 	.word	0x10110000
 80024e8:	40011000 	.word	0x40011000

080024ec <getPowersFromReading>:

/* USER CODE BEGIN 4 */
void getPowersFromReading(ListDevices_t listOfDevices) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	463b      	mov	r3, r7
 80024f4:	e883 0003 	stmia.w	r3, {r0, r1}
	static int b1Powers[5] = {0,0,0,0,0};
	static int b2Powers[5] = {0,0,0,0,0};
	static int b3Powers[5] = {0,0,0,0,0};
	static uint8_t currentIndex = 0;

	uint8_t nbOfDevices = listOfDevices.nbOfDevices;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	74fb      	strb	r3, [r7, #19]
	Device_t* devices = listOfDevices.devices;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
	uint8_t b1Changed = 0, b2Changed = 0, b3Changed = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
 8002504:	2300      	movs	r3, #0
 8002506:	75bb      	strb	r3, [r7, #22]
 8002508:	2300      	movs	r3, #0
 800250a:	757b      	strb	r3, [r7, #21]

	// Get the powers from entries
	for (uint8_t i=0; i<nbOfDevices; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	753b      	strb	r3, [r7, #20]
 8002510:	e076      	b.n	8002600 <getPowersFromReading+0x114>
		if(strstr(devices[i].name, "B1") != NULL && !isOutlierInArray(5, b1Powers, devices[i].signalStrength)) {
 8002512:	7d3b      	ldrb	r3, [r7, #20]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4966      	ldr	r1, [pc, #408]	; (80026b8 <getPowersFromReading+0x1cc>)
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fbb7 	bl	8006c92 <strstr>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <getPowersFromReading+0x74>
 800252a:	7d3b      	ldrb	r3, [r7, #20]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	461a      	mov	r2, r3
 8002536:	4961      	ldr	r1, [pc, #388]	; (80026bc <getPowersFromReading+0x1d0>)
 8002538:	2005      	movs	r0, #5
 800253a:	f000 f901 	bl	8002740 <isOutlierInArray>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10d      	bne.n	8002560 <getPowersFromReading+0x74>
			b1Powers[currentIndex] = devices[i].signalStrength;
 8002544:	7d3b      	ldrb	r3, [r7, #20]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <getPowersFromReading+0x1d4>)
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	4611      	mov	r1, r2
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a59      	ldr	r2, [pc, #356]	; (80026bc <getPowersFromReading+0x1d0>)
 8002556:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b1Changed = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e04c      	b.n	80025fa <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B2")!= NULL && !isOutlierInArray(5, b2Powers, devices[i].signalStrength)) {
 8002560:	7d3b      	ldrb	r3, [r7, #20]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4956      	ldr	r1, [pc, #344]	; (80026c4 <getPowersFromReading+0x1d8>)
 800256c:	4618      	mov	r0, r3
 800256e:	f004 fb90 	bl	8006c92 <strstr>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <getPowersFromReading+0xc2>
 8002578:	7d3b      	ldrb	r3, [r7, #20]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	461a      	mov	r2, r3
 8002584:	4950      	ldr	r1, [pc, #320]	; (80026c8 <getPowersFromReading+0x1dc>)
 8002586:	2005      	movs	r0, #5
 8002588:	f000 f8da 	bl	8002740 <isOutlierInArray>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10d      	bne.n	80025ae <getPowersFromReading+0xc2>
			b2Powers[currentIndex] = devices[i].signalStrength;
 8002592:	7d3b      	ldrb	r3, [r7, #20]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <getPowersFromReading+0x1d4>)
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	4611      	mov	r1, r2
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <getPowersFromReading+0x1dc>)
 80025a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b2Changed = 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75bb      	strb	r3, [r7, #22]
 80025ac:	e025      	b.n	80025fa <getPowersFromReading+0x10e>
		} else if (strstr(devices[i].name, "B3")!= NULL && !isOutlierInArray(5, b3Powers, devices[i].signalStrength)) {
 80025ae:	7d3b      	ldrb	r3, [r7, #20]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4944      	ldr	r1, [pc, #272]	; (80026cc <getPowersFromReading+0x1e0>)
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fb69 	bl	8006c92 <strstr>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <getPowersFromReading+0x10e>
 80025c6:	7d3b      	ldrb	r3, [r7, #20]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	461a      	mov	r2, r3
 80025d2:	493f      	ldr	r1, [pc, #252]	; (80026d0 <getPowersFromReading+0x1e4>)
 80025d4:	2005      	movs	r0, #5
 80025d6:	f000 f8b3 	bl	8002740 <isOutlierInArray>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <getPowersFromReading+0x10e>
			b3Powers[currentIndex] = devices[i].signalStrength;
 80025e0:	7d3b      	ldrb	r3, [r7, #20]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a35      	ldr	r2, [pc, #212]	; (80026c0 <getPowersFromReading+0x1d4>)
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	4611      	mov	r1, r2
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <getPowersFromReading+0x1e4>)
 80025f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			b3Changed = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	757b      	strb	r3, [r7, #21]
	for (uint8_t i=0; i<nbOfDevices; i++) {
 80025fa:	7d3b      	ldrb	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	753b      	strb	r3, [r7, #20]
 8002600:	7d3a      	ldrb	r2, [r7, #20]
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	429a      	cmp	r2, r3
 8002606:	d384      	bcc.n	8002512 <getPowersFromReading+0x26>
		}
	}

	uint8_t prevIndex = (currentIndex > 0) ? currentIndex-1 : 4;
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <getPowersFromReading+0x1d4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <getPowersFromReading+0x12e>
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <getPowersFromReading+0x1d4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e000      	b.n	800261c <getPowersFromReading+0x130>
 800261a:	2304      	movs	r3, #4
 800261c:	72fb      	strb	r3, [r7, #11]
	if(!b1Changed) b1Powers[currentIndex] = b1Powers[prevIndex];
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <getPowersFromReading+0x14c>
 8002624:	7afb      	ldrb	r3, [r7, #11]
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <getPowersFromReading+0x1d4>)
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	4611      	mov	r1, r2
 800262c:	4a23      	ldr	r2, [pc, #140]	; (80026bc <getPowersFromReading+0x1d0>)
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <getPowersFromReading+0x1d0>)
 8002634:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b2Changed) b2Powers[currentIndex] = b2Powers[prevIndex];
 8002638:	7dbb      	ldrb	r3, [r7, #22]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <getPowersFromReading+0x166>
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <getPowersFromReading+0x1d4>)
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	4611      	mov	r1, r2
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <getPowersFromReading+0x1dc>)
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <getPowersFromReading+0x1dc>)
 800264e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(!b3Changed) b3Powers[currentIndex] = b3Powers[prevIndex];
 8002652:	7d7b      	ldrb	r3, [r7, #21]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <getPowersFromReading+0x180>
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <getPowersFromReading+0x1d4>)
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	4611      	mov	r1, r2
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <getPowersFromReading+0x1e4>)
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <getPowersFromReading+0x1e4>)
 8002668:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	b1Power = getAverage(5, b1Powers);
 800266c:	4913      	ldr	r1, [pc, #76]	; (80026bc <getPowersFromReading+0x1d0>)
 800266e:	2005      	movs	r0, #5
 8002670:	f000 f836 	bl	80026e0 <getAverage>
 8002674:	4603      	mov	r3, r0
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <getPowersFromReading+0x1e8>)
 8002678:	6013      	str	r3, [r2, #0]
	b2Power = getAverage(5, b2Powers);
 800267a:	4913      	ldr	r1, [pc, #76]	; (80026c8 <getPowersFromReading+0x1dc>)
 800267c:	2005      	movs	r0, #5
 800267e:	f000 f82f 	bl	80026e0 <getAverage>
 8002682:	4603      	mov	r3, r0
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <getPowersFromReading+0x1ec>)
 8002686:	6013      	str	r3, [r2, #0]
	b3Power = getAverage(5, b3Powers);
 8002688:	4911      	ldr	r1, [pc, #68]	; (80026d0 <getPowersFromReading+0x1e4>)
 800268a:	2005      	movs	r0, #5
 800268c:	f000 f828 	bl	80026e0 <getAverage>
 8002690:	4603      	mov	r3, r0
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <getPowersFromReading+0x1f0>)
 8002694:	6013      	str	r3, [r2, #0]

	currentIndex = (currentIndex >= 4) ? 0 : currentIndex+1;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <getPowersFromReading+0x1d4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d804      	bhi.n	80026a8 <getPowersFromReading+0x1bc>
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <getPowersFromReading+0x1d4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e000      	b.n	80026aa <getPowersFromReading+0x1be>
 80026a8:	2300      	movs	r3, #0
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <getPowersFromReading+0x1d4>)
 80026ac:	7013      	strb	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08009240 	.word	0x08009240
 80026bc:	200000e8 	.word	0x200000e8
 80026c0:	200000fc 	.word	0x200000fc
 80026c4:	08009244 	.word	0x08009244
 80026c8:	20000100 	.word	0x20000100
 80026cc:	08009248 	.word	0x08009248
 80026d0:	20000114 	.word	0x20000114
 80026d4:	200000dc 	.word	0x200000dc
 80026d8:	200000e0 	.word	0x200000e0
 80026dc:	200000e4 	.word	0x200000e4

080026e0 <getAverage>:

int getAverage(int nbOfEntries, int entries[]) {
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	int nonNullEntries = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
	int sum = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e014      	b.n	8002722 <getAverage+0x42>
		if(entries[i] != 0)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <getAverage+0x2c>
			nonNullEntries++;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
		sum += entries[i];
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	4413      	add	r3, r2
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
	for (int i=0; i<nbOfEntries; i++) {
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbe6      	blt.n	80026f8 <getAverage+0x18>
	}
	return sum/nonNullEntries;
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002732:	4618      	mov	r0, r3
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	0000      	movs	r0, r0
	...

08002740 <isOutlierInArray>:

uint8_t isOutlierInArray(int nbOfEntries, int array[], int value) {
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	int min = array[0], max = array[0];
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	61bb      	str	r3, [r7, #24]
	for (int i=1; i<nbOfEntries; i++) {
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e01e      	b.n	800279c <isOutlierInArray+0x5c>
		if (array[i] > max) max = array[i];
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	429a      	cmp	r2, r3
 800276c:	da05      	bge.n	800277a <isOutlierInArray+0x3a>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
		if (array[i] < min) min = array[i];
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	429a      	cmp	r2, r3
 8002788:	dd05      	ble.n	8002796 <isOutlierInArray+0x56>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61fb      	str	r3, [r7, #28]
	for (int i=1; i<nbOfEntries; i++) {
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dbdc      	blt.n	800275e <isOutlierInArray+0x1e>
	}
	return (value > 1.1*max || value < 0.9*min);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fd fe2d 	bl	8000404 <__aeabi_i2d>
 80027aa:	4604      	mov	r4, r0
 80027ac:	460d      	mov	r5, r1
 80027ae:	69b8      	ldr	r0, [r7, #24]
 80027b0:	f7fd fe28 	bl	8000404 <__aeabi_i2d>
 80027b4:	a316      	add	r3, pc, #88	; (adr r3, 8002810 <isOutlierInArray+0xd0>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fe8d 	bl	80004d8 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fe f917 	bl	80009f8 <__aeabi_dcmpgt>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d115      	bne.n	80027fc <isOutlierInArray+0xbc>
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fe17 	bl	8000404 <__aeabi_i2d>
 80027d6:	4604      	mov	r4, r0
 80027d8:	460d      	mov	r5, r1
 80027da:	69f8      	ldr	r0, [r7, #28]
 80027dc:	f7fd fe12 	bl	8000404 <__aeabi_i2d>
 80027e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002818 <isOutlierInArray+0xd8>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd fe77 	bl	80004d8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f7fe f8e3 	bl	80009bc <__aeabi_dcmplt>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <isOutlierInArray+0xc0>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <isOutlierInArray+0xc2>
 8002800:	2300      	movs	r3, #0
 8002802:	b2db      	uxtb	r3, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	f3af 8000 	nop.w
 8002810:	9999999a 	.word	0x9999999a
 8002814:	3ff19999 	.word	0x3ff19999
 8002818:	cccccccd 	.word	0xcccccccd
 800281c:	3feccccc 	.word	0x3feccccc

08002820 <get_position>:

Point get_position(float rss1, float rss2, float rss3) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]

  int8_t P = -69; // Abstract Value, Must be measured
 800282e:	23bb      	movs	r3, #187	; 0xbb
 8002830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  int8_t N = 2;  // NI
 8002834:	2302      	movs	r3, #2
 8002836:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  // getting the distance in meters
  float d1 = pow(10,((P - rss1)/(10*N)));
 800283a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fa4c 	bl	8000cdc <__aeabi_i2f>
 8002844:	4603      	mov	r3, r0
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe f991 	bl	8000b70 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	461c      	mov	r4, r3
 8002852:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fa3c 	bl	8000cdc <__aeabi_i2f>
 8002864:	4603      	mov	r3, r0
 8002866:	4619      	mov	r1, r3
 8002868:	4620      	mov	r0, r4
 800286a:	f7fe fb3f 	bl	8000eec <__aeabi_fdiv>
 800286e:	4603      	mov	r3, r0
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fdd9 	bl	8000428 <__aeabi_f2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	f04f 0000 	mov.w	r0, #0
 800287e:	49c6      	ldr	r1, [pc, #792]	; (8002b98 <get_position+0x378>)
 8002880:	f005 f8ba 	bl	80079f8 <pow>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f7fe f91c 	bl	8000ac8 <__aeabi_d2f>
 8002890:	4603      	mov	r3, r0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  float d2 = pow(10,((P - rss2)/(10*N)));
 8002894:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fa1f 	bl	8000cdc <__aeabi_i2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f964 	bl	8000b70 <__aeabi_fsub>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461c      	mov	r4, r3
 80028ac:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fa0f 	bl	8000cdc <__aeabi_i2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe fb12 	bl	8000eec <__aeabi_fdiv>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fdac 	bl	8000428 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	49af      	ldr	r1, [pc, #700]	; (8002b98 <get_position+0x378>)
 80028da:	f005 f88d 	bl	80079f8 <pow>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fe f8ef 	bl	8000ac8 <__aeabi_d2f>
 80028ea:	4603      	mov	r3, r0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
  float d3 = pow(10,((P - rss3)/(10*N)));
 80028ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f9f2 	bl	8000cdc <__aeabi_i2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe f937 	bl	8000b70 <__aeabi_fsub>
 8002902:	4603      	mov	r3, r0
 8002904:	461c      	mov	r4, r3
 8002906:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe f9e2 	bl	8000cdc <__aeabi_i2f>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe fae5 	bl	8000eec <__aeabi_fdiv>
 8002922:	4603      	mov	r3, r0
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fd7f 	bl	8000428 <__aeabi_f2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	4999      	ldr	r1, [pc, #612]	; (8002b98 <get_position+0x378>)
 8002934:	f005 f860 	bl	80079f8 <pow>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f8c2 	bl	8000ac8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  const Point B2 = {-19.866425, -43.964556 };
  const Point B3 = {-19.866572, -43.964556 };

  // Calculate the position of the unknown point.

  float A = (-2*B1.x+2*B2.x);
 8002948:	4b94      	ldr	r3, [pc, #592]	; (8002b9c <get_position+0x37c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fa17 	bl	8000d84 <__aeabi_fmul>
 8002956:	4603      	mov	r3, r0
 8002958:	461c      	mov	r4, r3
 800295a:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <get_position+0x380>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f907 	bl	8000b74 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	4619      	mov	r1, r3
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe f902 	bl	8000b74 <__addsf3>
 8002970:	4603      	mov	r3, r0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  float B = (-2*B1.y+2*B2.y);
 8002974:	4b89      	ldr	r3, [pc, #548]	; (8002b9c <get_position+0x37c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fa01 	bl	8000d84 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	461c      	mov	r4, r3
 8002986:	4b86      	ldr	r3, [pc, #536]	; (8002ba0 <get_position+0x380>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe f8f1 	bl	8000b74 <__addsf3>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f7fe f8ec 	bl	8000b74 <__addsf3>
 800299c:	4603      	mov	r3, r0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  float C = pow(d1,2)-pow(d2,2)-pow(B1.x,2)+pow(B2.x,2)-pow(B1.y,2)+pow(B2.y,2);
 80029a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029a2:	f7fd fd41 	bl	8000428 <__aeabi_f2d>
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ae:	f005 f823 	bl	80079f8 <pow>
 80029b2:	4604      	mov	r4, r0
 80029b4:	460d      	mov	r5, r1
 80029b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029b8:	f7fd fd36 	bl	8000428 <__aeabi_f2d>
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029c4:	f005 f818 	bl	80079f8 <pow>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fbca 	bl	8000168 <__aeabi_dsub>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <get_position+0x37c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd21 	bl	8000428 <__aeabi_f2d>
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ee:	f005 f803 	bl	80079f8 <pow>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fbb5 	bl	8000168 <__aeabi_dsub>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4614      	mov	r4, r2
 8002a04:	461d      	mov	r5, r3
 8002a06:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <get_position+0x380>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd0c 	bl	8000428 <__aeabi_f2d>
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a18:	f004 ffee 	bl	80079f8 <pow>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fba2 	bl	800016c <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <get_position+0x37c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fcf7 	bl	8000428 <__aeabi_f2d>
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a42:	f004 ffd9 	bl	80079f8 <pow>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f7fd fb8b 	bl	8000168 <__aeabi_dsub>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4614      	mov	r4, r2
 8002a58:	461d      	mov	r5, r3
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <get_position+0x380>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fce2 	bl	8000428 <__aeabi_f2d>
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a6c:	f004 ffc4 	bl	80079f8 <pow>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fb78 	bl	800016c <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f820 	bl	8000ac8 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  float D = (-2*B2.x+2*B3.x);
 8002a8c:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <get_position+0x380>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f975 	bl	8000d84 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <get_position+0x384>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f865 	bl	8000b74 <__addsf3>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f860 	bl	8000b74 <__addsf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	623b      	str	r3, [r7, #32]
  float E = (-2*B2.y+2*B3.y);
 8002ab8:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <get_position+0x380>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f95f 	bl	8000d84 <__aeabi_fmul>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461c      	mov	r4, r3
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <get_position+0x384>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe f84f 	bl	8000b74 <__addsf3>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7fe f84a 	bl	8000b74 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	61fb      	str	r3, [r7, #28]
  float F = pow(d2,2)-pow(d3,2)-pow(B2.x,2)+pow(B3.x,2)-pow(B2.y,2)+pow(B2.y,2);
 8002ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ae6:	f7fd fc9f 	bl	8000428 <__aeabi_f2d>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af2:	f004 ff81 	bl	80079f8 <pow>
 8002af6:	4604      	mov	r4, r0
 8002af8:	460d      	mov	r5, r1
 8002afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002afc:	f7fd fc94 	bl	8000428 <__aeabi_f2d>
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b08:	f004 ff76 	bl	80079f8 <pow>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fb28 	bl	8000168 <__aeabi_dsub>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	461d      	mov	r5, r3
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <get_position+0x380>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fc7f 	bl	8000428 <__aeabi_f2d>
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b32:	f004 ff61 	bl	80079f8 <pow>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f7fd fb13 	bl	8000168 <__aeabi_dsub>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4614      	mov	r4, r2
 8002b48:	461d      	mov	r5, r3
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <get_position+0x384>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fc6a 	bl	8000428 <__aeabi_f2d>
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b5c:	f004 ff4c 	bl	80079f8 <pow>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fb00 	bl	800016c <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	461d      	mov	r5, r3
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <get_position+0x380>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc55 	bl	8000428 <__aeabi_f2d>
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b86:	f004 ff37 	bl	80079f8 <pow>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f7fd fae9 	bl	8000168 <__aeabi_dsub>
 8002b96:	e007      	b.n	8002ba8 <get_position+0x388>
 8002b98:	40240000 	.word	0x40240000
 8002b9c:	08009268 	.word	0x08009268
 8002ba0:	08009270 	.word	0x08009270
 8002ba4:	08009278 	.word	0x08009278
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <get_position+0x478>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc37 	bl	8000428 <__aeabi_f2d>
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bc2:	f004 ff19 	bl	80079f8 <pow>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd facd 	bl	800016c <__adddf3>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd ff75 	bl	8000ac8 <__aeabi_d2f>
 8002bde:	4603      	mov	r3, r0
 8002be0:	61bb      	str	r3, [r7, #24]

  Point p = {
    .x = ((C*E) - (F*B)) / ((E*A) - (B*D)),
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002be6:	f7fe f8cd 	bl	8000d84 <__aeabi_fmul>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461c      	mov	r4, r3
 8002bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf0:	69b8      	ldr	r0, [r7, #24]
 8002bf2:	f7fe f8c7 	bl	8000d84 <__aeabi_fmul>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7fd ffb8 	bl	8000b70 <__aeabi_fsub>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461c      	mov	r4, r3
 8002c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c06:	69f8      	ldr	r0, [r7, #28]
 8002c08:	f7fe f8bc 	bl	8000d84 <__aeabi_fmul>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461d      	mov	r5, r3
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f7fe f8b6 	bl	8000d84 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f7fd ffa7 	bl	8000b70 <__aeabi_fsub>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fe f960 	bl	8000eec <__aeabi_fdiv>
 8002c2c:	4603      	mov	r3, r0
  Point p = {
 8002c2e:	613b      	str	r3, [r7, #16]
    .y = ((C*D) - (F*A)) / ((B*D) - (A*E))
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c34:	f7fe f8a6 	bl	8000d84 <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c3e:	69b8      	ldr	r0, [r7, #24]
 8002c40:	f7fe f8a0 	bl	8000d84 <__aeabi_fmul>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fd ff91 	bl	8000b70 <__aeabi_fsub>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461c      	mov	r4, r3
 8002c52:	6a39      	ldr	r1, [r7, #32]
 8002c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c56:	f7fe f895 	bl	8000d84 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c62:	f7fe f88f 	bl	8000d84 <__aeabi_fmul>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7fd ff80 	bl	8000b70 <__aeabi_fsub>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7fe f939 	bl	8000eec <__aeabi_fdiv>
 8002c7a:	4603      	mov	r3, r0
  Point p = {
 8002c7c:	617b      	str	r3, [r7, #20]
  };

  return p;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c8a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	3740      	adds	r7, #64	; 0x40
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08009270 	.word	0x08009270

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6193      	str	r3, [r2, #24]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_MspInit+0x5c>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_MspInit+0x60>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_MspInit+0x60>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000

08002d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_I2C_MspInit+0x70>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d123      	bne.n	8002d74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d44:	23c0      	movs	r3, #192	; 0xc0
 8002d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4619      	mov	r1, r3
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <HAL_I2C_MspInit+0x78>)
 8002d58:	f000 fc38 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d66:	61d3      	str	r3, [r2, #28]
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_I2C_MspInit+0x74>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010c00 	.word	0x40010c00

08002d88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d10b      	bne.n	8002db2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_TIM_PWM_MspInit+0x34>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_TIM_PWM_MspInit+0x34>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	61d3      	str	r3, [r2, #28]
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_TIM_PWM_MspInit+0x34>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_TIM_Base_MspInit+0x34>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10b      	bne.n	8002dea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_TIM_Base_MspInit+0x38>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_TIM_Base_MspInit+0x38>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_TIM_Base_MspInit+0x38>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d12a      	bne.n	8002e72 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e34:	2308      	movs	r3, #8
 8002e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	4825      	ldr	r0, [pc, #148]	; (8002edc <HAL_TIM_MspPostInit+0xe0>)
 8002e48:	f000 fbc0 	bl	80035cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_TIM_MspPostInit+0xe4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIM_MspPostInit+0xe4>)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e70:	e02e      	b.n	8002ed0 <HAL_TIM_MspPostInit+0xd4>
  else if(htim->Instance==TIM3)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_TIM_MspPostInit+0xe8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d129      	bne.n	8002ed0 <HAL_TIM_MspPostInit+0xd4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <HAL_TIM_MspPostInit+0xdc>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4810      	ldr	r0, [pc, #64]	; (8002ee8 <HAL_TIM_MspPostInit+0xec>)
 8002ea8:	f000 fb90 	bl	80035cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_TIM_MspPostInit+0xe4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <HAL_TIM_MspPostInit+0xe4>)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	6053      	str	r3, [r2, #4]
}
 8002ed0:	bf00      	nop
 8002ed2:	3728      	adds	r7, #40	; 0x28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010c00 	.word	0x40010c00
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40011000 	.word	0x40011000

08002eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a40      	ldr	r2, [pc, #256]	; (8003008 <HAL_UART_MspInit+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d130      	bne.n	8002f6e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	4a3e      	ldr	r2, [pc, #248]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f16:	61d3      	str	r3, [r2, #28]
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4830      	ldr	r0, [pc, #192]	; (8003010 <HAL_UART_MspInit+0x124>)
 8002f50:	f000 fb3c 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f54:	2308      	movs	r3, #8
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	482a      	ldr	r0, [pc, #168]	; (8003010 <HAL_UART_MspInit+0x124>)
 8002f68:	f000 fb30 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f6c:	e048      	b.n	8003000 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_UART_MspInit+0x128>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d143      	bne.n	8003000 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_UART_MspInit+0x120>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4816      	ldr	r0, [pc, #88]	; (8003018 <HAL_UART_MspInit+0x12c>)
 8002fbe:	f000 fb05 	bl	80035cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4810      	ldr	r0, [pc, #64]	; (8003018 <HAL_UART_MspInit+0x12c>)
 8002fd8:	f000 faf8 	bl	80035cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_UART_MspInit+0x130>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <HAL_UART_MspInit+0x130>)
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	6053      	str	r3, [r2, #4]
}
 8003000:	bf00      	nop
 8003002:	3730      	adds	r7, #48	; 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40004400 	.word	0x40004400
 800300c:	40021000 	.word	0x40021000
 8003010:	40010800 	.word	0x40010800
 8003014:	40004800 	.word	0x40004800
 8003018:	40011000 	.word	0x40011000
 800301c:	40010000 	.word	0x40010000

08003020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <HardFault_Handler+0x4>

08003032 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <MemManage_Handler+0x4>

08003038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <BusFault_Handler+0x4>

0800303e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <UsageFault_Handler+0x4>

08003044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306c:	f000 f960 	bl	8003330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003078:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800307c:	f000 fc5c 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
	return 1;
 8003088:	2301      	movs	r3, #1
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <_kill>:

int _kill(int pid, int sig)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800309c:	f003 f92c 	bl	80062f8 <__errno>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2216      	movs	r2, #22
 80030a4:	601a      	str	r2, [r3, #0]
	return -1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_exit>:

void _exit (int status)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030ba:	f04f 31ff 	mov.w	r1, #4294967295
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffe7 	bl	8003092 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030c4:	e7fe      	b.n	80030c4 <_exit+0x12>

080030c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e00a      	b.n	80030ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030d8:	f3af 8000 	nop.w
 80030dc:	4601      	mov	r1, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	60ba      	str	r2, [r7, #8]
 80030e4:	b2ca      	uxtb	r2, r1
 80030e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3301      	adds	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbf0      	blt.n	80030d8 <_read+0x12>
	}

return len;
 80030f6:	687b      	ldr	r3, [r7, #4]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e009      	b.n	8003126 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	dbf1      	blt.n	8003112 <_write+0x12>
	}
	return len;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <_sbrk+0x50>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x16>
		heap_end = &end;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <_sbrk+0x50>)
 800314a:	4a10      	ldr	r2, [pc, #64]	; (800318c <_sbrk+0x54>)
 800314c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <_sbrk+0x50>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <_sbrk+0x50>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	466a      	mov	r2, sp
 800315e:	4293      	cmp	r3, r2
 8003160:	d907      	bls.n	8003172 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003162:	f003 f8c9 	bl	80062f8 <__errno>
 8003166:	4603      	mov	r3, r0
 8003168:	220c      	movs	r2, #12
 800316a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	e006      	b.n	8003180 <_sbrk+0x48>
	}

	heap_end += incr;
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <_sbrk+0x50>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a03      	ldr	r2, [pc, #12]	; (8003188 <_sbrk+0x50>)
 800317c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000128 	.word	0x20000128
 800318c:	200002e8 	.word	0x200002e8

08003190 <_close>:

int _close(int file)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	return -1;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	605a      	str	r2, [r3, #4]
	return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <_isatty>:

int _isatty(int file)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	return 1;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
	return 0;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <SystemInit+0x5c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <SystemInit+0x5c>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <SystemInit+0x5c>)
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4911      	ldr	r1, [pc, #68]	; (800324c <SystemInit+0x5c>)
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <SystemInit+0x60>)
 8003208:	4013      	ands	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <SystemInit+0x5c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <SystemInit+0x5c>)
 8003212:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <SystemInit+0x5c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <SystemInit+0x5c>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <SystemInit+0x5c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <SystemInit+0x5c>)
 800322e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003232:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SystemInit+0x5c>)
 8003236:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800323a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SystemInit+0x64>)
 800323e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003242:	609a      	str	r2, [r3, #8]
#endif 
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	f8ff0000 	.word	0xf8ff0000
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003258:	480c      	ldr	r0, [pc, #48]	; (800328c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800325a:	490d      	ldr	r1, [pc, #52]	; (8003290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003270:	4c0a      	ldr	r4, [pc, #40]	; (800329c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800327e:	f7ff ffb7 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003282:	f003 f851 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003286:	f7fe fd87 	bl	8001d98 <main>
  bx lr
 800328a:	4770      	bx	lr
  ldr r0, =_sdata
 800328c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003290:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003294:	080095d8 	.word	0x080095d8
  ldr r2, =_sbss
 8003298:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800329c:	200002e4 	.word	0x200002e4

080032a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a0:	e7fe      	b.n	80032a0 <ADC1_2_IRQHandler>
	...

080032a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_Init+0x28>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_Init+0x28>)
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b4:	2003      	movs	r0, #3
 80032b6:	f000 f947 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f000 f808 	bl	80032d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c0:	f7ff fcf2 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_InitTick+0x54>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_InitTick+0x58>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f95f 	bl	80035b2 <HAL_SYSTICK_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00e      	b.n	800331c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0f      	cmp	r3, #15
 8003302:	d80a      	bhi.n	800331a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003304:	2200      	movs	r2, #0
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	f000 f927 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <HAL_InitTick+0x5c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000002c 	.word	0x2000002c
 8003328:	20000034 	.word	0x20000034
 800332c:	20000030 	.word	0x20000030

08003330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_IncTick+0x1c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_IncTick+0x20>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4413      	add	r3, r2
 8003340:	4a03      	ldr	r2, [pc, #12]	; (8003350 <HAL_IncTick+0x20>)
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000034 	.word	0x20000034
 8003350:	200002d0 	.word	0x200002d0

08003354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return uwTick;
 8003358:	4b02      	ldr	r3, [pc, #8]	; (8003364 <HAL_GetTick+0x10>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	200002d0 	.word	0x200002d0

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff fff0 	bl	8003354 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffe0 	bl	8003354 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000034 	.word	0x20000034

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4906      	ldr	r1, [pc, #24]	; (8003448 <__NVIC_EnableIRQ+0x34>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff90 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff2d 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff42 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff90 	bl	80034a0 <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5f 	bl	800344c <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff35 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ffa2 	bl	8003504 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b08b      	sub	sp, #44	; 0x2c
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035de:	e169      	b.n	80038b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035e0:	2201      	movs	r2, #1
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f040 8158 	bne.w	80038ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a9a      	ldr	r2, [pc, #616]	; (800386c <HAL_GPIO_Init+0x2a0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d05e      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
 8003608:	4a98      	ldr	r2, [pc, #608]	; (800386c <HAL_GPIO_Init+0x2a0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d875      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 800360e:	4a98      	ldr	r2, [pc, #608]	; (8003870 <HAL_GPIO_Init+0x2a4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d058      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
 8003614:	4a96      	ldr	r2, [pc, #600]	; (8003870 <HAL_GPIO_Init+0x2a4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d86f      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 800361a:	4a96      	ldr	r2, [pc, #600]	; (8003874 <HAL_GPIO_Init+0x2a8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d052      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
 8003620:	4a94      	ldr	r2, [pc, #592]	; (8003874 <HAL_GPIO_Init+0x2a8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d869      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 8003626:	4a94      	ldr	r2, [pc, #592]	; (8003878 <HAL_GPIO_Init+0x2ac>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d04c      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
 800362c:	4a92      	ldr	r2, [pc, #584]	; (8003878 <HAL_GPIO_Init+0x2ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d863      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 8003632:	4a92      	ldr	r2, [pc, #584]	; (800387c <HAL_GPIO_Init+0x2b0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d046      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
 8003638:	4a90      	ldr	r2, [pc, #576]	; (800387c <HAL_GPIO_Init+0x2b0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d85d      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 800363e:	2b12      	cmp	r3, #18
 8003640:	d82a      	bhi.n	8003698 <HAL_GPIO_Init+0xcc>
 8003642:	2b12      	cmp	r3, #18
 8003644:	d859      	bhi.n	80036fa <HAL_GPIO_Init+0x12e>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_GPIO_Init+0x80>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	080036c7 	.word	0x080036c7
 8003650:	080036a1 	.word	0x080036a1
 8003654:	080036b3 	.word	0x080036b3
 8003658:	080036f5 	.word	0x080036f5
 800365c:	080036fb 	.word	0x080036fb
 8003660:	080036fb 	.word	0x080036fb
 8003664:	080036fb 	.word	0x080036fb
 8003668:	080036fb 	.word	0x080036fb
 800366c:	080036fb 	.word	0x080036fb
 8003670:	080036fb 	.word	0x080036fb
 8003674:	080036fb 	.word	0x080036fb
 8003678:	080036fb 	.word	0x080036fb
 800367c:	080036fb 	.word	0x080036fb
 8003680:	080036fb 	.word	0x080036fb
 8003684:	080036fb 	.word	0x080036fb
 8003688:	080036fb 	.word	0x080036fb
 800368c:	080036fb 	.word	0x080036fb
 8003690:	080036a9 	.word	0x080036a9
 8003694:	080036bd 	.word	0x080036bd
 8003698:	4a79      	ldr	r2, [pc, #484]	; (8003880 <HAL_GPIO_Init+0x2b4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800369e:	e02c      	b.n	80036fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e029      	b.n	80036fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	3304      	adds	r3, #4
 80036ae:	623b      	str	r3, [r7, #32]
          break;
 80036b0:	e024      	b.n	80036fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	3308      	adds	r3, #8
 80036b8:	623b      	str	r3, [r7, #32]
          break;
 80036ba:	e01f      	b.n	80036fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	330c      	adds	r3, #12
 80036c2:	623b      	str	r3, [r7, #32]
          break;
 80036c4:	e01a      	b.n	80036fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ce:	2304      	movs	r3, #4
 80036d0:	623b      	str	r3, [r7, #32]
          break;
 80036d2:	e013      	b.n	80036fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036dc:	2308      	movs	r3, #8
 80036de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	611a      	str	r2, [r3, #16]
          break;
 80036e6:	e009      	b.n	80036fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036e8:	2308      	movs	r3, #8
 80036ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	615a      	str	r2, [r3, #20]
          break;
 80036f2:	e003      	b.n	80036fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
          break;
 80036f8:	e000      	b.n	80036fc <HAL_GPIO_Init+0x130>
          break;
 80036fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2bff      	cmp	r3, #255	; 0xff
 8003700:	d801      	bhi.n	8003706 <HAL_GPIO_Init+0x13a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	e001      	b.n	800370a <HAL_GPIO_Init+0x13e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2bff      	cmp	r3, #255	; 0xff
 8003710:	d802      	bhi.n	8003718 <HAL_GPIO_Init+0x14c>
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	e002      	b.n	800371e <HAL_GPIO_Init+0x152>
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	3b08      	subs	r3, #8
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	210f      	movs	r1, #15
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80b1 	beq.w	80038ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800374c:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_GPIO_Init+0x2b8>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a4c      	ldr	r2, [pc, #304]	; (8003884 <HAL_GPIO_Init+0x2b8>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_GPIO_Init+0x2b8>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003764:	4a48      	ldr	r2, [pc, #288]	; (8003888 <HAL_GPIO_Init+0x2bc>)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003770:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a40      	ldr	r2, [pc, #256]	; (800388c <HAL_GPIO_Init+0x2c0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_GPIO_Init+0x1ec>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3f      	ldr	r2, [pc, #252]	; (8003890 <HAL_GPIO_Init+0x2c4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00d      	beq.n	80037b4 <HAL_GPIO_Init+0x1e8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3e      	ldr	r2, [pc, #248]	; (8003894 <HAL_GPIO_Init+0x2c8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <HAL_GPIO_Init+0x1e4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3d      	ldr	r2, [pc, #244]	; (8003898 <HAL_GPIO_Init+0x2cc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_GPIO_Init+0x1e0>
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <HAL_GPIO_Init+0x1ee>
 80037ac:	2304      	movs	r3, #4
 80037ae:	e004      	b.n	80037ba <HAL_GPIO_Init+0x1ee>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e002      	b.n	80037ba <HAL_GPIO_Init+0x1ee>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_GPIO_Init+0x1ee>
 80037b8:	2300      	movs	r3, #0
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	f002 0203 	and.w	r2, r2, #3
 80037c0:	0092      	lsls	r2, r2, #2
 80037c2:	4093      	lsls	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ca:	492f      	ldr	r1, [pc, #188]	; (8003888 <HAL_GPIO_Init+0x2bc>)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	492c      	ldr	r1, [pc, #176]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	4928      	ldr	r1, [pc, #160]	; (800389c <HAL_GPIO_Init+0x2d0>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800380c:	4b23      	ldr	r3, [pc, #140]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4922      	ldr	r1, [pc, #136]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	43db      	mvns	r3, r3
 8003822:	491e      	ldr	r1, [pc, #120]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003824:	4013      	ands	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4918      	ldr	r1, [pc, #96]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	43db      	mvns	r3, r3
 800384a:	4914      	ldr	r1, [pc, #80]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800384c:	4013      	ands	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d021      	beq.n	80038a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_GPIO_Init+0x2d0>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	490e      	ldr	r1, [pc, #56]	; (800389c <HAL_GPIO_Init+0x2d0>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
 8003868:	e021      	b.n	80038ae <HAL_GPIO_Init+0x2e2>
 800386a:	bf00      	nop
 800386c:	10320000 	.word	0x10320000
 8003870:	10310000 	.word	0x10310000
 8003874:	10220000 	.word	0x10220000
 8003878:	10210000 	.word	0x10210000
 800387c:	10120000 	.word	0x10120000
 8003880:	10110000 	.word	0x10110000
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	40010800 	.word	0x40010800
 8003890:	40010c00 	.word	0x40010c00
 8003894:	40011000 	.word	0x40011000
 8003898:	40011400 	.word	0x40011400
 800389c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_GPIO_Init+0x304>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	4909      	ldr	r1, [pc, #36]	; (80038d0 <HAL_GPIO_Init+0x304>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f47f ae8e 	bne.w	80035e0 <HAL_GPIO_Init+0x14>
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	372c      	adds	r7, #44	; 0x2c
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	40010400 	.word	0x40010400

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
 80038e0:	4613      	mov	r3, r2
 80038e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e4:	787b      	ldrb	r3, [r7, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038f0:	e003      	b.n	80038fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	041a      	lsls	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	43d9      	mvns	r1, r3
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	400b      	ands	r3, r1
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	611a      	str	r2, [r3, #16]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
	...

08003938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f806 	bl	8003968 <HAL_GPIO_EXTI_Callback>
  }
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e12b      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff f9b2 	bl	8002d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e0:	f001 fba0 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 80039e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4a81      	ldr	r2, [pc, #516]	; (8003bf0 <HAL_I2C_Init+0x274>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d807      	bhi.n	8003a00 <HAL_I2C_Init+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a80      	ldr	r2, [pc, #512]	; (8003bf4 <HAL_I2C_Init+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e006      	b.n	8003a0e <HAL_I2C_Init+0x92>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_I2C_Init+0x27c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0e7      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a78      	ldr	r2, [pc, #480]	; (8003bfc <HAL_I2C_Init+0x280>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <HAL_I2C_Init+0x274>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d802      	bhi.n	8003a50 <HAL_I2C_Init+0xd4>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	e009      	b.n	8003a64 <HAL_I2C_Init+0xe8>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	4a69      	ldr	r2, [pc, #420]	; (8003c00 <HAL_I2C_Init+0x284>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	3301      	adds	r3, #1
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	495c      	ldr	r1, [pc, #368]	; (8003bf0 <HAL_I2C_Init+0x274>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d819      	bhi.n	8003ab8 <HAL_I2C_Init+0x13c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e59      	subs	r1, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a98:	400b      	ands	r3, r1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_I2C_Init+0x138>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e59      	subs	r1, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	e051      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	e04f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <HAL_I2C_Init+0x168>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e58      	subs	r0, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e012      	b.n	8003b0a <HAL_I2C_Init+0x18e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x196>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e022      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_I2C_Init+0x1bc>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e58      	subs	r0, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	440b      	add	r3, r1
 8003b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	6809      	ldr	r1, [r1, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6911      	ldr	r1, [r2, #16]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	000186a0 	.word	0x000186a0
 8003bf4:	001e847f 	.word	0x001e847f
 8003bf8:	003d08ff 	.word	0x003d08ff
 8003bfc:	431bde83 	.word	0x431bde83
 8003c00:	10624dd3 	.word	0x10624dd3

08003c04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	4603      	mov	r3, r0
 8003c14:	817b      	strh	r3, [r7, #10]
 8003c16:	460b      	mov	r3, r1
 8003c18:	813b      	strh	r3, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c1e:	f7ff fb99 	bl	8003354 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	f040 80d9 	bne.w	8003de4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	2319      	movs	r3, #25
 8003c38:	2201      	movs	r2, #1
 8003c3a:	496d      	ldr	r1, [pc, #436]	; (8003df0 <HAL_I2C_Mem_Write+0x1ec>)
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fcc1 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0cc      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Mem_Write+0x56>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0c5      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d007      	beq.n	8003c80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2221      	movs	r2, #33	; 0x21
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2240      	movs	r2, #64	; 0x40
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_I2C_Mem_Write+0x1f0>)
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc2:	88f8      	ldrh	r0, [r7, #6]
 8003cc4:	893a      	ldrh	r2, [r7, #8]
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 faf8 	bl	80042c8 <I2C_RequestMemoryWrite>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d052      	beq.n	8003d84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e081      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fd42 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e06b      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11b      	bne.n	8003d84 <HAL_I2C_Mem_Write+0x180>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1aa      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fd2e 	bl	80047f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e016      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	00100002 	.word	0x00100002
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e16:	f7ff fa9d 	bl	8003354 <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	f040 8244 	bne.w	80042b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2319      	movs	r3, #25
 8003e30:	2201      	movs	r2, #1
 8003e32:	4982      	ldr	r1, [pc, #520]	; (800403c <HAL_I2C_Mem_Read+0x244>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fbc5 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
 8003e42:	e237      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x5a>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e230      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d007      	beq.n	8003e78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2222      	movs	r2, #34	; 0x22
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a62      	ldr	r2, [pc, #392]	; (8004040 <HAL_I2C_Mem_Read+0x248>)
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eba:	88f8      	ldrh	r0, [r7, #6]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa92 	bl	80043f4 <I2C_RequestMemoryRead>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1ec      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d113      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e1c0      	b.n	800428c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d11e      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f22:	b672      	cpsid	i
}
 8003f24:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f4c:	b662      	cpsie	i
}
 8003f4e:	e035      	b.n	8003fbc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d11e      	bne.n	8003f96 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f68:	b672      	cpsid	i
}
 8003f6a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f92:	b662      	cpsie	i
}
 8003f94:	e012      	b.n	8003fbc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fbc:	e166      	b.n	800428c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	f200 811f 	bhi.w	8004206 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d123      	bne.n	8004018 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fc4d 	bl	8004874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e167      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004016:	e139      	b.n	800428c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	2b02      	cmp	r3, #2
 800401e:	d152      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	2200      	movs	r2, #0
 8004028:	4906      	ldr	r1, [pc, #24]	; (8004044 <HAL_I2C_Mem_Read+0x24c>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 faca 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e13c      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
 800403a:	bf00      	nop
 800403c:	00100002 	.word	0x00100002
 8004040:	ffff0000 	.word	0xffff0000
 8004044:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004048:	b672      	cpsid	i
}
 800404a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800408e:	b662      	cpsie	i
}
 8004090:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c4:	e0e2      	b.n	800428c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	497b      	ldr	r1, [pc, #492]	; (80042bc <HAL_I2C_Mem_Read+0x4c4>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fa77 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0e9      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f0:	b672      	cpsid	i
}
 80040f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004126:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_I2C_Mem_Read+0x4c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	4a65      	ldr	r2, [pc, #404]	; (80042c4 <HAL_I2C_Mem_Read+0x4cc>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0a1a      	lsrs	r2, r3, #8
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00da      	lsls	r2, r3, #3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	3b01      	subs	r3, #1
 8004144:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d118      	bne.n	800417e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800416e:	b662      	cpsie	i
}
 8004170:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e09a      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d1d9      	bne.n	8004140 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ce:	b662      	cpsie	i
}
 80041d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004204:	e042      	b.n	800428c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fb32 	bl	8004874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e04c      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d118      	bne.n	800428c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f ae94 	bne.w	8003fbe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	00010004 	.word	0x00010004
 80042c0:	2000002c 	.word	0x2000002c
 80042c4:	14f8b589 	.word	0x14f8b589

080042c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	460b      	mov	r3, r1
 80042dc:	813b      	strh	r3, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f960 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d103      	bne.n	8004322 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e05f      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <I2C_RequestMemoryWrite+0x128>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f998 	bl	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04c      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fa02 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02b      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e021      	b.n	80043e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a0:	893b      	ldrh	r3, [r7, #8]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6a39      	ldr	r1, [r7, #32]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f9dc 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d107      	bne.n	80043d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e005      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	00010002 	.word	0x00010002

080043f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	4603      	mov	r3, r0
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	460b      	mov	r3, r1
 8004408:	813b      	strh	r3, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2200      	movs	r2, #0
 8004436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f8c2 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d103      	bne.n	800445e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0aa      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	4952      	ldr	r1, [pc, #328]	; (80045c0 <I2C_RequestMemoryRead+0x1cc>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f8fa 	bl	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e097      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6a39      	ldr	r1, [r7, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f964 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e076      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d0:	893b      	ldrh	r3, [r7, #8]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	e021      	b.n	8004520 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044dc:	893b      	ldrh	r3, [r7, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f93e 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e050      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004516:	893b      	ldrh	r3, [r7, #8]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	6a39      	ldr	r1, [r7, #32]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f923 	bl	8004770 <I2C_WaitOnTXEFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b04      	cmp	r3, #4
 8004536:	d107      	bne.n	8004548 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004546:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e035      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2200      	movs	r2, #0
 8004564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f82b 	bl	80045c4 <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	d103      	bne.n	800458c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e013      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004590:	897b      	ldrh	r3, [r7, #10]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	6a3a      	ldr	r2, [r7, #32]
 80045a4:	4906      	ldr	r1, [pc, #24]	; (80045c0 <I2C_RequestMemoryRead+0x1cc>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f863 	bl	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	00010002 	.word	0x00010002

080045c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d4:	e025      	b.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d021      	beq.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe feb9 	bl	8003354 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e023      	b.n	800466a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d10d      	bne.n	8004648 <I2C_WaitOnFlagUntilTimeout+0x84>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	e00c      	b.n	8004662 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	429a      	cmp	r2, r3
 8004666:	d0b6      	beq.n	80045d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004680:	e051      	b.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004690:	d123      	bne.n	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e046      	b.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d021      	beq.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fe fe37 	bl	8003354 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e020      	b.n	8004768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10c      	bne.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e00b      	b.n	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d18d      	bne.n	8004682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800477c:	e02d      	b.n	80047da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f8ce 	bl	8004920 <I2C_IsAcknowledgeFailed>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02d      	b.n	80047ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d021      	beq.n	80047da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fe fddd 	bl	8003354 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d116      	bne.n	80047da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e007      	b.n	80047ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d1ca      	bne.n	800477e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047fe:	e02d      	b.n	800485c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f88d 	bl	8004920 <I2C_IsAcknowledgeFailed>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e02d      	b.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d021      	beq.n	800485c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7fe fd9c 	bl	8003354 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e007      	b.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d1ca      	bne.n	8004800 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004880:	e042      	b.n	8004908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d119      	bne.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e029      	b.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fe fd46 	bl	8003354 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d116      	bne.n	8004908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e007      	b.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d1b5      	bne.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d11b      	bne.n	8004970 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004940:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f043 0204 	orr.w	r2, r3, #4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e26c      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8087 	beq.w	8004aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800499c:	4b92      	ldr	r3, [pc, #584]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d00c      	beq.n	80049c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049a8:	4b8f      	ldr	r3, [pc, #572]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d112      	bne.n	80049da <HAL_RCC_OscConfig+0x5e>
 80049b4:	4b8c      	ldr	r3, [pc, #560]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d10b      	bne.n	80049da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c2:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d06c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x12c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d168      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e246      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x76>
 80049e4:	4b80      	ldr	r3, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7f      	ldr	r2, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e02e      	b.n	8004a50 <HAL_RCC_OscConfig+0xd4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x98>
 80049fa:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b78      	ldr	r3, [pc, #480]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a77      	ldr	r2, [pc, #476]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e01d      	b.n	8004a50 <HAL_RCC_OscConfig+0xd4>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0xbc>
 8004a1e:	4b72      	ldr	r3, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a71      	ldr	r2, [pc, #452]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b6f      	ldr	r3, [pc, #444]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6e      	ldr	r2, [pc, #440]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0xd4>
 8004a38:	4b6b      	ldr	r3, [pc, #428]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6a      	ldr	r2, [pc, #424]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b68      	ldr	r3, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a67      	ldr	r2, [pc, #412]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fe fc7c 	bl	8003354 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fe fc78 	bl	8003354 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e1fa      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b5d      	ldr	r3, [pc, #372]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0xe4>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fc68 	bl	8003354 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe fc64 	bl	8003354 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e1e6      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x10c>
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d063      	beq.n	8004b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab6:	4b4c      	ldr	r3, [pc, #304]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ac2:	4b49      	ldr	r3, [pc, #292]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d11c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x18c>
 8004ace:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d116      	bne.n	8004b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x176>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e1ba      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af2:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4939      	ldr	r1, [pc, #228]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b06:	e03a      	b.n	8004b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d020      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe fc1d 	bl	8003354 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fe fc19 	bl	8003354 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e19b      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4927      	ldr	r1, [pc, #156]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fe fbfc 	bl	8003354 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fe fbf8 	bl	8003354 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e17a      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d03a      	beq.n	8004c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b92:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <HAL_RCC_OscConfig+0x274>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fe fbdc 	bl	8003354 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fe fbd8 	bl	8003354 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e15a      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f000 fad8 	bl	8005174 <RCC_Delay>
 8004bc4:	e01c      	b.n	8004c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bcc:	f7fe fbc2 	bl	8003354 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd2:	e00f      	b.n	8004bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fe fbbe 	bl	8003354 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d908      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e140      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	42420000 	.word	0x42420000
 8004bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	4b9e      	ldr	r3, [pc, #632]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e9      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80a6 	beq.w	8004d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c12:	4b97      	ldr	r3, [pc, #604]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10d      	bne.n	8004c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	4b94      	ldr	r3, [pc, #592]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4a93      	ldr	r2, [pc, #588]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	61d3      	str	r3, [r2, #28]
 8004c2a:	4b91      	ldr	r3, [pc, #580]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b8e      	ldr	r3, [pc, #568]	; (8004e74 <HAL_RCC_OscConfig+0x4f8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d118      	bne.n	8004c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c46:	4b8b      	ldr	r3, [pc, #556]	; (8004e74 <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a8a      	ldr	r2, [pc, #552]	; (8004e74 <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fe fb7f 	bl	8003354 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5a:	f7fe fb7b 	bl	8003354 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	; 0x64
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0fd      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	4b81      	ldr	r3, [pc, #516]	; (8004e74 <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCC_OscConfig+0x312>
 8004c80:	4b7b      	ldr	r3, [pc, #492]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a7a      	ldr	r2, [pc, #488]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6213      	str	r3, [r2, #32]
 8004c8c:	e02d      	b.n	8004cea <HAL_RCC_OscConfig+0x36e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x334>
 8004c96:	4b76      	ldr	r3, [pc, #472]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4a75      	ldr	r2, [pc, #468]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6213      	str	r3, [r2, #32]
 8004ca2:	4b73      	ldr	r3, [pc, #460]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4a72      	ldr	r2, [pc, #456]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	6213      	str	r3, [r2, #32]
 8004cae:	e01c      	b.n	8004cea <HAL_RCC_OscConfig+0x36e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x356>
 8004cb8:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4a6c      	ldr	r2, [pc, #432]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	6213      	str	r3, [r2, #32]
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4a69      	ldr	r2, [pc, #420]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6213      	str	r3, [r2, #32]
 8004cd0:	e00b      	b.n	8004cea <HAL_RCC_OscConfig+0x36e>
 8004cd2:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4a66      	ldr	r2, [pc, #408]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	6213      	str	r3, [r2, #32]
 8004cde:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d015      	beq.n	8004d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fb2f 	bl	8003354 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fe fb2b 	bl	8003354 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0ab      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	4b57      	ldr	r3, [pc, #348]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ee      	beq.n	8004cfa <HAL_RCC_OscConfig+0x37e>
 8004d1c:	e014      	b.n	8004d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fb19 	bl	8003354 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fe fb15 	bl	8003354 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e095      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ee      	bne.n	8004d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d105      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4e:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	4a47      	ldr	r2, [pc, #284]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8081 	beq.w	8004e66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d061      	beq.n	8004e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d146      	bne.n	8004e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b3f      	ldr	r3, [pc, #252]	; (8004e78 <HAL_RCC_OscConfig+0x4fc>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fe fae9 	bl	8003354 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fe fae5 	bl	8003354 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e067      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d98:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d108      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dae:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	492d      	ldr	r1, [pc, #180]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a19      	ldr	r1, [r3, #32]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	4927      	ldr	r1, [pc, #156]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_RCC_OscConfig+0x4fc>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fe fab9 	bl	8003354 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fe fab5 	bl	8003354 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e037      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x46a>
 8004e04:	e02f      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <HAL_RCC_OscConfig+0x4fc>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe faa2 	bl	8003354 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fa9e 	bl	8003354 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e020      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x498>
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e013      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_OscConfig+0x4f4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d106      	bne.n	8004e62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
 8004e78:	42420060 	.word	0x42420060

08004e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0d0      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d910      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b67      	ldr	r3, [pc, #412]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 0207 	bic.w	r2, r3, #7
 8004ea6:	4965      	ldr	r1, [pc, #404]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b63      	ldr	r3, [pc, #396]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0b8      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d040      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d115      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07f      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e073      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06b      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4936      	ldr	r1, [pc, #216]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f6c:	f7fe f9f2 	bl	8003354 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fe f9ee 	bl	8003354 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e053      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 020c 	and.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1eb      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d210      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 0207 	bic.w	r2, r3, #7
 8004fb2:	4922      	ldr	r1, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e032      	b.n	8005032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800500a:	f000 f821 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	5ccb      	ldrb	r3, [r1, r3]
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1cc>)
 8005024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1d0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe f950 	bl	80032d0 <HAL_InitTick>

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40022000 	.word	0x40022000
 8005040:	40021000 	.word	0x40021000
 8005044:	08009280 	.word	0x08009280
 8005048:	2000002c 	.word	0x2000002c
 800504c:	20000030 	.word	0x20000030

08005050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	b490      	push	{r4, r7}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005058:	1d3c      	adds	r4, r7, #4
 800505a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800505c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005060:	f240 2301 	movw	r3, #513	; 0x201
 8005064:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800507a:	4b22      	ldr	r3, [pc, #136]	; (8005104 <HAL_RCC_GetSysClockFreq+0xb4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d002      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x40>
 800508a:	2b08      	cmp	r3, #8
 800508c:	d003      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x46>
 800508e:	e02d      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005092:	623b      	str	r3, [r7, #32]
      break;
 8005094:	e02d      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	0c9b      	lsrs	r3, r3, #18
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050a2:	4413      	add	r3, r2
 80050a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <HAL_RCC_GetSysClockFreq+0xb4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0c5b      	lsrs	r3, r3, #17
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050c2:	4413      	add	r3, r2
 80050c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ce:	fb02 f203 	mul.w	r2, r2, r3
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
 80050da:	e004      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e0:	fb02 f303 	mul.w	r3, r2, r3
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	623b      	str	r3, [r7, #32]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ee:	623b      	str	r3, [r7, #32]
      break;
 80050f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3728      	adds	r7, #40	; 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc90      	pop	{r4, r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	0800924c 	.word	0x0800924c
 8005104:	40021000 	.word	0x40021000
 8005108:	007a1200 	.word	0x007a1200
 800510c:	003d0900 	.word	0x003d0900

08005110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b02      	ldr	r3, [pc, #8]	; (8005120 <HAL_RCC_GetHCLKFreq+0x10>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	2000002c 	.word	0x2000002c

08005124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005128:	f7ff fff2 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	08009290 	.word	0x08009290

0800514c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005150:	f7ff ffde 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	0adb      	lsrs	r3, r3, #11
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4903      	ldr	r1, [pc, #12]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	08009290 	.word	0x08009290

08005174 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <RCC_Delay+0x34>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <RCC_Delay+0x38>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005190:	bf00      	nop
  }
  while (Delay --);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f9      	bne.n	8005190 <RCC_Delay+0x1c>
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr
 80051a8:	2000002c 	.word	0x2000002c
 80051ac:	10624dd3 	.word	0x10624dd3

080051b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e041      	b.n	8005246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd fdf2 	bl	8002dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f000 fb04 	bl	80057fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e041      	b.n	80052e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fd fd87 	bl	8002d88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fab5 	bl	80057fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_TIM_PWM_Start+0x24>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e022      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d109      	bne.n	800532a <HAL_TIM_PWM_Start+0x3e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	bf14      	ite	ne
 8005322:	2301      	movne	r3, #1
 8005324:	2300      	moveq	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e015      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d109      	bne.n	8005344 <HAL_TIM_PWM_Start+0x58>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e008      	b.n	8005356 <HAL_TIM_PWM_Start+0x6a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e05e      	b.n	800541c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <HAL_TIM_PWM_Start+0x82>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536c:	e013      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d104      	bne.n	800537e <HAL_TIM_PWM_Start+0x92>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	e00b      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	e003      	b.n	8005396 <HAL_TIM_PWM_Start+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fcac 	bl	8005cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIM_PWM_Start+0x138>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d107      	bne.n	80053be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIM_PWM_Start+0x138>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIM_PWM_Start+0xfa>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d009      	beq.n	80053e6 <HAL_TIM_PWM_Start+0xfa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <HAL_TIM_PWM_Start+0x13c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIM_PWM_Start+0xfa>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a12      	ldr	r2, [pc, #72]	; (800542c <HAL_TIM_PWM_Start+0x140>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d010      	beq.n	800541a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	e007      	b.n	800541a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800

08005430 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc5a 	bl	8005cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <HAL_TIM_PWM_Stop+0xc4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d117      	bne.n	8005482 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	f241 1311 	movw	r3, #4369	; 0x1111
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_TIM_PWM_Stop+0x52>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	f240 4344 	movw	r3, #1092	; 0x444
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <HAL_TIM_PWM_Stop+0x52>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005480:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f241 1311 	movw	r3, #4369	; 0x1111
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <HAL_TIM_PWM_Stop+0x82>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	f240 4344 	movw	r3, #1092	; 0x444
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_PWM_Stop+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_PWM_Stop+0x92>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	e013      	b.n	80054ea <HAL_TIM_PWM_Stop+0xba>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_PWM_Stop+0xa2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	e00b      	b.n	80054ea <HAL_TIM_PWM_Stop+0xba>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Stop+0xb2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e0:	e003      	b.n	80054ea <HAL_TIM_PWM_Stop+0xba>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40012c00 	.word	0x40012c00

080054f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ac      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	f200 809f 	bhi.w	8005660 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005661 	.word	0x08005661
 8005530:	08005661 	.word	0x08005661
 8005534:	08005661 	.word	0x08005661
 8005538:	0800559d 	.word	0x0800559d
 800553c:	08005661 	.word	0x08005661
 8005540:	08005661 	.word	0x08005661
 8005544:	08005661 	.word	0x08005661
 8005548:	080055df 	.word	0x080055df
 800554c:	08005661 	.word	0x08005661
 8005550:	08005661 	.word	0x08005661
 8005554:	08005661 	.word	0x08005661
 8005558:	0800561f 	.word	0x0800561f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f9ac 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0208 	orr.w	r2, r2, #8
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	619a      	str	r2, [r3, #24]
      break;
 800559a:	e062      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f9f2 	bl	800598c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
      break;
 80055dc:	e041      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fa3b 	bl	8005a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0208 	orr.w	r2, r2, #8
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0204 	bic.w	r2, r2, #4
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	61da      	str	r2, [r3, #28]
      break;
 800561c:	e021      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa85 	bl	8005b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	61da      	str	r2, [r3, #28]
      break;
 800565e:	e000      	b.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIM_ConfigClockSource+0x18>
 8005688:	2302      	movs	r3, #2
 800568a:	e0b3      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x180>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d03e      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xd0>
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	f200 8087 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	f000 8085 	beq.w	80057e0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d87f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d01a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0xa2>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d87b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d050      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x116>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d877      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d03c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0xf6>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d873      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d058      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x136>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d86f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d064      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x156>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d86b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d060      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x156>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d867      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x156>
 8005710:	2b10      	cmp	r3, #16
 8005712:	d05a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005714:	e062      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f000 faca 	bl	8005cbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005738:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e04e      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f000 fab3 	bl	8005cbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005766:	609a      	str	r2, [r3, #8]
      break;
 8005768:	e03b      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 fa2a 	bl	8005bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2150      	movs	r1, #80	; 0x50
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa81 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 8005788:	e02b      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 fa48 	bl	8005c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2160      	movs	r1, #96	; 0x60
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fa71 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80057a8:	e01b      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fa0a 	bl	8005bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa61 	bl	8005c8a <TIM_ITRx_SetConfig>
      break;
 80057c8:	e00b      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f000 fa58 	bl	8005c8a <TIM_ITRx_SetConfig>
        break;
 80057da:	e002      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80057e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <TIM_Base_SetConfig+0xb8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0x30>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0x30>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <TIM_Base_SetConfig+0xbc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0x30>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a25      	ldr	r2, [pc, #148]	; (80058bc <TIM_Base_SetConfig+0xc0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d108      	bne.n	800583e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <TIM_Base_SetConfig+0xb8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_Base_SetConfig+0x62>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d007      	beq.n	800585e <TIM_Base_SetConfig+0x62>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <TIM_Base_SetConfig+0xbc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_Base_SetConfig+0x62>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a18      	ldr	r2, [pc, #96]	; (80058bc <TIM_Base_SetConfig+0xc0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d108      	bne.n	8005870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <TIM_Base_SetConfig+0xb8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d103      	bne.n	80058a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	615a      	str	r2, [r3, #20]
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0302 	bic.w	r3, r3, #2
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <TIM_OC1_SetConfig+0xc8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0308 	bic.w	r3, r3, #8
 8005922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <TIM_OC1_SetConfig+0xc8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d111      	bne.n	8005962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00

0800598c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0210 	bic.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0320 	bic.w	r3, r3, #32
 80059d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <TIM_OC2_SetConfig+0xd0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10d      	bne.n	8005a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <TIM_OC2_SetConfig+0xd0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d113      	bne.n	8005a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00

08005a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <TIM_OC3_SetConfig+0xd0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d10d      	bne.n	8005ada <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <TIM_OC3_SetConfig+0xd0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d113      	bne.n	8005b0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00

08005b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	031b      	lsls	r3, r3, #12
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <TIM_OC4_SetConfig+0x98>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	019b      	lsls	r3, r3, #6
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	40012c00 	.word	0x40012c00

08005bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f023 0201 	bic.w	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 030a 	bic.w	r3, r3, #10
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f023 0210 	bic.w	r2, r3, #16
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	031b      	lsls	r3, r3, #12
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f043 0307 	orr.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b087      	sub	sp, #28
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
 8005cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	021a      	lsls	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e046      	b.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d009      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800

08005e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e03f      	b.n	8005e92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fd f860 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9a7 	bl	8006198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08a      	sub	sp, #40	; 0x28
 8005e9e:	af02      	add	r7, sp, #8
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d17c      	bne.n	8005fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Transmit+0x2c>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e075      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit+0x3e>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e06e      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eee:	f7fd fa31 	bl	8003354 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	d108      	bne.n	8005f1c <HAL_UART_Transmit+0x82>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e003      	b.n	8005f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f2c:	e02a      	b.n	8005f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f8e2 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e036      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3302      	adds	r3, #2
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e007      	b.n	8005f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1cf      	bne.n	8005f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2140      	movs	r1, #64	; 0x40
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f8b2 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b08a      	sub	sp, #40	; 0x28
 8005fc2:	af02      	add	r7, sp, #8
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	f040 808c 	bne.w	80060f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Receive+0x2e>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e084      	b.n	80060fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Receive+0x40>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e07d      	b.n	80060fa <HAL_UART_Receive+0x13c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2222      	movs	r2, #34	; 0x22
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800601a:	f7fd f99b 	bl	8003354 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006034:	d108      	bne.n	8006048 <HAL_UART_Receive+0x8a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e003      	b.n	8006050 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006058:	e043      	b.n	80060e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	2120      	movs	r1, #32
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f84c 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e042      	b.n	80060fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10c      	bne.n	8006094 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	b29a      	uxth	r2, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	3302      	adds	r3, #2
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e01f      	b.n	80060d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609c:	d007      	beq.n	80060ae <HAL_UART_Receive+0xf0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_UART_Receive+0xfe>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e008      	b.n	80060ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1b6      	bne.n	800605a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006112:	e02c      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d028      	beq.n	800616e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x30>
 8006122:	f7fd f917 	bl	8003354 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	429a      	cmp	r2, r3
 8006130:	d21d      	bcs.n	800616e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006140:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695a      	ldr	r2, [r3, #20]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e00f      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4013      	ands	r3, r2
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	bf0c      	ite	eq
 800617e:	2301      	moveq	r3, #1
 8006180:	2300      	movne	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	429a      	cmp	r2, r3
 800618a:	d0c3      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061d2:	f023 030c 	bic.w	r3, r3, #12
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	430b      	orrs	r3, r1
 80061de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <UART_SetConfig+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d103      	bne.n	8006208 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006200:	f7fe ffa4 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	e002      	b.n	800620e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fe ff8c 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 800620c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009a      	lsls	r2, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <UART_SetConfig+0x118>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	0119      	lsls	r1, r3, #4
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009a      	lsls	r2, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	fbb2 f2f3 	udiv	r2, r2, r3
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <UART_SetConfig+0x118>)
 8006246:	fba3 0302 	umull	r0, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2064      	movs	r0, #100	; 0x64
 800624e:	fb00 f303 	mul.w	r3, r0, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3332      	adds	r3, #50	; 0x32
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <UART_SetConfig+0x118>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006264:	4419      	add	r1, r3
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009a      	lsls	r2, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	fbb2 f2f3 	udiv	r2, r2, r3
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <UART_SetConfig+0x118>)
 800627e:	fba3 0302 	umull	r0, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2064      	movs	r0, #100	; 0x64
 8006286:	fb00 f303 	mul.w	r3, r0, r3
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	3332      	adds	r3, #50	; 0x32
 8006290:	4a07      	ldr	r2, [pc, #28]	; (80062b0 <UART_SetConfig+0x118>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	440a      	add	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40013800 	.word	0x40013800
 80062b0:	51eb851f 	.word	0x51eb851f

080062b4 <__assert_func>:
 80062b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062b6:	4614      	mov	r4, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <__assert_func+0x2c>)
 80062bc:	4605      	mov	r5, r0
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68d8      	ldr	r0, [r3, #12]
 80062c2:	b14c      	cbz	r4, 80062d8 <__assert_func+0x24>
 80062c4:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <__assert_func+0x30>)
 80062c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062ca:	9100      	str	r1, [sp, #0]
 80062cc:	462b      	mov	r3, r5
 80062ce:	4906      	ldr	r1, [pc, #24]	; (80062e8 <__assert_func+0x34>)
 80062d0:	f000 f818 	bl	8006304 <fiprintf>
 80062d4:	f000 fea0 	bl	8007018 <abort>
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <__assert_func+0x38>)
 80062da:	461c      	mov	r4, r3
 80062dc:	e7f3      	b.n	80062c6 <__assert_func+0x12>
 80062de:	bf00      	nop
 80062e0:	20000038 	.word	0x20000038
 80062e4:	08009298 	.word	0x08009298
 80062e8:	080092a5 	.word	0x080092a5
 80062ec:	080092d3 	.word	0x080092d3

080062f0 <atoi>:
 80062f0:	220a      	movs	r2, #10
 80062f2:	2100      	movs	r1, #0
 80062f4:	f000 bdc6 	b.w	8006e84 <strtol>

080062f8 <__errno>:
 80062f8:	4b01      	ldr	r3, [pc, #4]	; (8006300 <__errno+0x8>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20000038 	.word	0x20000038

08006304 <fiprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b503      	push	{r0, r1, lr}
 8006308:	4601      	mov	r1, r0
 800630a:	ab03      	add	r3, sp, #12
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <fiprintf+0x20>)
 800630e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	f000 f911 	bl	800653c <_vfiprintf_r>
 800631a:	b002      	add	sp, #8
 800631c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006320:	b003      	add	sp, #12
 8006322:	4770      	bx	lr
 8006324:	20000038 	.word	0x20000038

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	2600      	movs	r6, #0
 800632c:	4d0c      	ldr	r5, [pc, #48]	; (8006360 <__libc_init_array+0x38>)
 800632e:	4c0d      	ldr	r4, [pc, #52]	; (8006364 <__libc_init_array+0x3c>)
 8006330:	1b64      	subs	r4, r4, r5
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	f002 fee4 	bl	8009104 <_init>
 800633c:	2600      	movs	r6, #0
 800633e:	4d0a      	ldr	r5, [pc, #40]	; (8006368 <__libc_init_array+0x40>)
 8006340:	4c0a      	ldr	r4, [pc, #40]	; (800636c <__libc_init_array+0x44>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f855 3b04 	ldr.w	r3, [r5], #4
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	080095d0 	.word	0x080095d0
 8006364:	080095d0 	.word	0x080095d0
 8006368:	080095d0 	.word	0x080095d0
 800636c:	080095d4 	.word	0x080095d4

08006370 <malloc>:
 8006370:	4b02      	ldr	r3, [pc, #8]	; (800637c <malloc+0xc>)
 8006372:	4601      	mov	r1, r0
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f000 b85f 	b.w	8006438 <_malloc_r>
 800637a:	bf00      	nop
 800637c:	20000038 	.word	0x20000038

08006380 <free>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <free+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f000 b80b 	b.w	80063a0 <_free_r>
 800638a:	bf00      	nop
 800638c:	20000038 	.word	0x20000038

08006390 <memset>:
 8006390:	4603      	mov	r3, r0
 8006392:	4402      	add	r2, r0
 8006394:	4293      	cmp	r3, r2
 8006396:	d100      	bne.n	800639a <memset+0xa>
 8006398:	4770      	bx	lr
 800639a:	f803 1b01 	strb.w	r1, [r3], #1
 800639e:	e7f9      	b.n	8006394 <memset+0x4>

080063a0 <_free_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4605      	mov	r5, r0
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d043      	beq.n	8006430 <_free_r+0x90>
 80063a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ac:	1f0c      	subs	r4, r1, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfb8      	it	lt
 80063b2:	18e4      	addlt	r4, r4, r3
 80063b4:	f001 f88c 	bl	80074d0 <__malloc_lock>
 80063b8:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <_free_r+0x94>)
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	4610      	mov	r0, r2
 80063be:	b933      	cbnz	r3, 80063ce <_free_r+0x2e>
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6014      	str	r4, [r2, #0]
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ca:	f001 b887 	b.w	80074dc <__malloc_unlock>
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	d90a      	bls.n	80063e8 <_free_r+0x48>
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	1862      	adds	r2, r4, r1
 80063d6:	4293      	cmp	r3, r2
 80063d8:	bf01      	itttt	eq
 80063da:	681a      	ldreq	r2, [r3, #0]
 80063dc:	685b      	ldreq	r3, [r3, #4]
 80063de:	1852      	addeq	r2, r2, r1
 80063e0:	6022      	streq	r2, [r4, #0]
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	6004      	str	r4, [r0, #0]
 80063e6:	e7ed      	b.n	80063c4 <_free_r+0x24>
 80063e8:	461a      	mov	r2, r3
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	b10b      	cbz	r3, 80063f2 <_free_r+0x52>
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	d9fa      	bls.n	80063e8 <_free_r+0x48>
 80063f2:	6811      	ldr	r1, [r2, #0]
 80063f4:	1850      	adds	r0, r2, r1
 80063f6:	42a0      	cmp	r0, r4
 80063f8:	d10b      	bne.n	8006412 <_free_r+0x72>
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	4401      	add	r1, r0
 80063fe:	1850      	adds	r0, r2, r1
 8006400:	4283      	cmp	r3, r0
 8006402:	6011      	str	r1, [r2, #0]
 8006404:	d1de      	bne.n	80063c4 <_free_r+0x24>
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4401      	add	r1, r0
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	6053      	str	r3, [r2, #4]
 8006410:	e7d8      	b.n	80063c4 <_free_r+0x24>
 8006412:	d902      	bls.n	800641a <_free_r+0x7a>
 8006414:	230c      	movs	r3, #12
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	e7d4      	b.n	80063c4 <_free_r+0x24>
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	1821      	adds	r1, r4, r0
 800641e:	428b      	cmp	r3, r1
 8006420:	bf01      	itttt	eq
 8006422:	6819      	ldreq	r1, [r3, #0]
 8006424:	685b      	ldreq	r3, [r3, #4]
 8006426:	1809      	addeq	r1, r1, r0
 8006428:	6021      	streq	r1, [r4, #0]
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	6054      	str	r4, [r2, #4]
 800642e:	e7c9      	b.n	80063c4 <_free_r+0x24>
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	2000012c 	.word	0x2000012c

08006438 <_malloc_r>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	1ccd      	adds	r5, r1, #3
 800643c:	f025 0503 	bic.w	r5, r5, #3
 8006440:	3508      	adds	r5, #8
 8006442:	2d0c      	cmp	r5, #12
 8006444:	bf38      	it	cc
 8006446:	250c      	movcc	r5, #12
 8006448:	2d00      	cmp	r5, #0
 800644a:	4606      	mov	r6, r0
 800644c:	db01      	blt.n	8006452 <_malloc_r+0x1a>
 800644e:	42a9      	cmp	r1, r5
 8006450:	d903      	bls.n	800645a <_malloc_r+0x22>
 8006452:	230c      	movs	r3, #12
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	2000      	movs	r0, #0
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645a:	f001 f839 	bl	80074d0 <__malloc_lock>
 800645e:	4921      	ldr	r1, [pc, #132]	; (80064e4 <_malloc_r+0xac>)
 8006460:	680a      	ldr	r2, [r1, #0]
 8006462:	4614      	mov	r4, r2
 8006464:	b99c      	cbnz	r4, 800648e <_malloc_r+0x56>
 8006466:	4f20      	ldr	r7, [pc, #128]	; (80064e8 <_malloc_r+0xb0>)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	b923      	cbnz	r3, 8006476 <_malloc_r+0x3e>
 800646c:	4621      	mov	r1, r4
 800646e:	4630      	mov	r0, r6
 8006470:	f000 fba0 	bl	8006bb4 <_sbrk_r>
 8006474:	6038      	str	r0, [r7, #0]
 8006476:	4629      	mov	r1, r5
 8006478:	4630      	mov	r0, r6
 800647a:	f000 fb9b 	bl	8006bb4 <_sbrk_r>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d123      	bne.n	80064ca <_malloc_r+0x92>
 8006482:	230c      	movs	r3, #12
 8006484:	4630      	mov	r0, r6
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	f001 f828 	bl	80074dc <__malloc_unlock>
 800648c:	e7e3      	b.n	8006456 <_malloc_r+0x1e>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	1b5b      	subs	r3, r3, r5
 8006492:	d417      	bmi.n	80064c4 <_malloc_r+0x8c>
 8006494:	2b0b      	cmp	r3, #11
 8006496:	d903      	bls.n	80064a0 <_malloc_r+0x68>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	441c      	add	r4, r3
 800649c:	6025      	str	r5, [r4, #0]
 800649e:	e004      	b.n	80064aa <_malloc_r+0x72>
 80064a0:	6863      	ldr	r3, [r4, #4]
 80064a2:	42a2      	cmp	r2, r4
 80064a4:	bf0c      	ite	eq
 80064a6:	600b      	streq	r3, [r1, #0]
 80064a8:	6053      	strne	r3, [r2, #4]
 80064aa:	4630      	mov	r0, r6
 80064ac:	f001 f816 	bl	80074dc <__malloc_unlock>
 80064b0:	f104 000b 	add.w	r0, r4, #11
 80064b4:	1d23      	adds	r3, r4, #4
 80064b6:	f020 0007 	bic.w	r0, r0, #7
 80064ba:	1ac2      	subs	r2, r0, r3
 80064bc:	d0cc      	beq.n	8006458 <_malloc_r+0x20>
 80064be:	1a1b      	subs	r3, r3, r0
 80064c0:	50a3      	str	r3, [r4, r2]
 80064c2:	e7c9      	b.n	8006458 <_malloc_r+0x20>
 80064c4:	4622      	mov	r2, r4
 80064c6:	6864      	ldr	r4, [r4, #4]
 80064c8:	e7cc      	b.n	8006464 <_malloc_r+0x2c>
 80064ca:	1cc4      	adds	r4, r0, #3
 80064cc:	f024 0403 	bic.w	r4, r4, #3
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d0e3      	beq.n	800649c <_malloc_r+0x64>
 80064d4:	1a21      	subs	r1, r4, r0
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 fb6c 	bl	8006bb4 <_sbrk_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d1dd      	bne.n	800649c <_malloc_r+0x64>
 80064e0:	e7cf      	b.n	8006482 <_malloc_r+0x4a>
 80064e2:	bf00      	nop
 80064e4:	2000012c 	.word	0x2000012c
 80064e8:	20000130 	.word	0x20000130

080064ec <__sfputc_r>:
 80064ec:	6893      	ldr	r3, [r2, #8]
 80064ee:	b410      	push	{r4}
 80064f0:	3b01      	subs	r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	6093      	str	r3, [r2, #8]
 80064f6:	da07      	bge.n	8006508 <__sfputc_r+0x1c>
 80064f8:	6994      	ldr	r4, [r2, #24]
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	db01      	blt.n	8006502 <__sfputc_r+0x16>
 80064fe:	290a      	cmp	r1, #10
 8006500:	d102      	bne.n	8006508 <__sfputc_r+0x1c>
 8006502:	bc10      	pop	{r4}
 8006504:	f000 bcc8 	b.w	8006e98 <__swbuf_r>
 8006508:	6813      	ldr	r3, [r2, #0]
 800650a:	1c58      	adds	r0, r3, #1
 800650c:	6010      	str	r0, [r2, #0]
 800650e:	7019      	strb	r1, [r3, #0]
 8006510:	4608      	mov	r0, r1
 8006512:	bc10      	pop	{r4}
 8006514:	4770      	bx	lr

08006516 <__sfputs_r>:
 8006516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006518:	4606      	mov	r6, r0
 800651a:	460f      	mov	r7, r1
 800651c:	4614      	mov	r4, r2
 800651e:	18d5      	adds	r5, r2, r3
 8006520:	42ac      	cmp	r4, r5
 8006522:	d101      	bne.n	8006528 <__sfputs_r+0x12>
 8006524:	2000      	movs	r0, #0
 8006526:	e007      	b.n	8006538 <__sfputs_r+0x22>
 8006528:	463a      	mov	r2, r7
 800652a:	4630      	mov	r0, r6
 800652c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006530:	f7ff ffdc 	bl	80064ec <__sfputc_r>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d1f3      	bne.n	8006520 <__sfputs_r+0xa>
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800653c <_vfiprintf_r>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	460d      	mov	r5, r1
 8006542:	4614      	mov	r4, r2
 8006544:	4698      	mov	r8, r3
 8006546:	4606      	mov	r6, r0
 8006548:	b09d      	sub	sp, #116	; 0x74
 800654a:	b118      	cbz	r0, 8006554 <_vfiprintf_r+0x18>
 800654c:	6983      	ldr	r3, [r0, #24]
 800654e:	b90b      	cbnz	r3, 8006554 <_vfiprintf_r+0x18>
 8006550:	f000 fe84 	bl	800725c <__sinit>
 8006554:	4b89      	ldr	r3, [pc, #548]	; (800677c <_vfiprintf_r+0x240>)
 8006556:	429d      	cmp	r5, r3
 8006558:	d11b      	bne.n	8006592 <_vfiprintf_r+0x56>
 800655a:	6875      	ldr	r5, [r6, #4]
 800655c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800655e:	07d9      	lsls	r1, r3, #31
 8006560:	d405      	bmi.n	800656e <_vfiprintf_r+0x32>
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	059a      	lsls	r2, r3, #22
 8006566:	d402      	bmi.n	800656e <_vfiprintf_r+0x32>
 8006568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800656a:	f000 ff15 	bl	8007398 <__retarget_lock_acquire_recursive>
 800656e:	89ab      	ldrh	r3, [r5, #12]
 8006570:	071b      	lsls	r3, r3, #28
 8006572:	d501      	bpl.n	8006578 <_vfiprintf_r+0x3c>
 8006574:	692b      	ldr	r3, [r5, #16]
 8006576:	b9eb      	cbnz	r3, 80065b4 <_vfiprintf_r+0x78>
 8006578:	4629      	mov	r1, r5
 800657a:	4630      	mov	r0, r6
 800657c:	f000 fcde 	bl	8006f3c <__swsetup_r>
 8006580:	b1c0      	cbz	r0, 80065b4 <_vfiprintf_r+0x78>
 8006582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006584:	07dc      	lsls	r4, r3, #31
 8006586:	d50e      	bpl.n	80065a6 <_vfiprintf_r+0x6a>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	b01d      	add	sp, #116	; 0x74
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <_vfiprintf_r+0x244>)
 8006594:	429d      	cmp	r5, r3
 8006596:	d101      	bne.n	800659c <_vfiprintf_r+0x60>
 8006598:	68b5      	ldr	r5, [r6, #8]
 800659a:	e7df      	b.n	800655c <_vfiprintf_r+0x20>
 800659c:	4b79      	ldr	r3, [pc, #484]	; (8006784 <_vfiprintf_r+0x248>)
 800659e:	429d      	cmp	r5, r3
 80065a0:	bf08      	it	eq
 80065a2:	68f5      	ldreq	r5, [r6, #12]
 80065a4:	e7da      	b.n	800655c <_vfiprintf_r+0x20>
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	0598      	lsls	r0, r3, #22
 80065aa:	d4ed      	bmi.n	8006588 <_vfiprintf_r+0x4c>
 80065ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ae:	f000 fef4 	bl	800739a <__retarget_lock_release_recursive>
 80065b2:	e7e9      	b.n	8006588 <_vfiprintf_r+0x4c>
 80065b4:	2300      	movs	r3, #0
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	2320      	movs	r3, #32
 80065ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065be:	2330      	movs	r3, #48	; 0x30
 80065c0:	f04f 0901 	mov.w	r9, #1
 80065c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006788 <_vfiprintf_r+0x24c>
 80065cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065d0:	4623      	mov	r3, r4
 80065d2:	469a      	mov	sl, r3
 80065d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d8:	b10a      	cbz	r2, 80065de <_vfiprintf_r+0xa2>
 80065da:	2a25      	cmp	r2, #37	; 0x25
 80065dc:	d1f9      	bne.n	80065d2 <_vfiprintf_r+0x96>
 80065de:	ebba 0b04 	subs.w	fp, sl, r4
 80065e2:	d00b      	beq.n	80065fc <_vfiprintf_r+0xc0>
 80065e4:	465b      	mov	r3, fp
 80065e6:	4622      	mov	r2, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ff93 	bl	8006516 <__sfputs_r>
 80065f0:	3001      	adds	r0, #1
 80065f2:	f000 80aa 	beq.w	800674a <_vfiprintf_r+0x20e>
 80065f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f8:	445a      	add	r2, fp
 80065fa:	9209      	str	r2, [sp, #36]	; 0x24
 80065fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a2 	beq.w	800674a <_vfiprintf_r+0x20e>
 8006606:	2300      	movs	r3, #0
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006610:	f10a 0a01 	add.w	sl, sl, #1
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	9307      	str	r3, [sp, #28]
 8006618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800661c:	931a      	str	r3, [sp, #104]	; 0x68
 800661e:	4654      	mov	r4, sl
 8006620:	2205      	movs	r2, #5
 8006622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006626:	4858      	ldr	r0, [pc, #352]	; (8006788 <_vfiprintf_r+0x24c>)
 8006628:	f000 ff1c 	bl	8007464 <memchr>
 800662c:	9a04      	ldr	r2, [sp, #16]
 800662e:	b9d8      	cbnz	r0, 8006668 <_vfiprintf_r+0x12c>
 8006630:	06d1      	lsls	r1, r2, #27
 8006632:	bf44      	itt	mi
 8006634:	2320      	movmi	r3, #32
 8006636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663a:	0713      	lsls	r3, r2, #28
 800663c:	bf44      	itt	mi
 800663e:	232b      	movmi	r3, #43	; 0x2b
 8006640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006644:	f89a 3000 	ldrb.w	r3, [sl]
 8006648:	2b2a      	cmp	r3, #42	; 0x2a
 800664a:	d015      	beq.n	8006678 <_vfiprintf_r+0x13c>
 800664c:	4654      	mov	r4, sl
 800664e:	2000      	movs	r0, #0
 8006650:	f04f 0c0a 	mov.w	ip, #10
 8006654:	9a07      	ldr	r2, [sp, #28]
 8006656:	4621      	mov	r1, r4
 8006658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800665c:	3b30      	subs	r3, #48	; 0x30
 800665e:	2b09      	cmp	r3, #9
 8006660:	d94e      	bls.n	8006700 <_vfiprintf_r+0x1c4>
 8006662:	b1b0      	cbz	r0, 8006692 <_vfiprintf_r+0x156>
 8006664:	9207      	str	r2, [sp, #28]
 8006666:	e014      	b.n	8006692 <_vfiprintf_r+0x156>
 8006668:	eba0 0308 	sub.w	r3, r0, r8
 800666c:	fa09 f303 	lsl.w	r3, r9, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	46a2      	mov	sl, r4
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	e7d2      	b.n	800661e <_vfiprintf_r+0xe2>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	1d19      	adds	r1, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	9103      	str	r1, [sp, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfbb      	ittet	lt
 8006684:	425b      	neglt	r3, r3
 8006686:	f042 0202 	orrlt.w	r2, r2, #2
 800668a:	9307      	strge	r3, [sp, #28]
 800668c:	9307      	strlt	r3, [sp, #28]
 800668e:	bfb8      	it	lt
 8006690:	9204      	strlt	r2, [sp, #16]
 8006692:	7823      	ldrb	r3, [r4, #0]
 8006694:	2b2e      	cmp	r3, #46	; 0x2e
 8006696:	d10c      	bne.n	80066b2 <_vfiprintf_r+0x176>
 8006698:	7863      	ldrb	r3, [r4, #1]
 800669a:	2b2a      	cmp	r3, #42	; 0x2a
 800669c:	d135      	bne.n	800670a <_vfiprintf_r+0x1ce>
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	3402      	adds	r4, #2
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	9203      	str	r2, [sp, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfb8      	it	lt
 80066ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006798 <_vfiprintf_r+0x25c>
 80066b6:	2203      	movs	r2, #3
 80066b8:	4650      	mov	r0, sl
 80066ba:	7821      	ldrb	r1, [r4, #0]
 80066bc:	f000 fed2 	bl	8007464 <memchr>
 80066c0:	b140      	cbz	r0, 80066d4 <_vfiprintf_r+0x198>
 80066c2:	2340      	movs	r3, #64	; 0x40
 80066c4:	eba0 000a 	sub.w	r0, r0, sl
 80066c8:	fa03 f000 	lsl.w	r0, r3, r0
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	3401      	adds	r4, #1
 80066d0:	4303      	orrs	r3, r0
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	2206      	movs	r2, #6
 80066da:	482c      	ldr	r0, [pc, #176]	; (800678c <_vfiprintf_r+0x250>)
 80066dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066e0:	f000 fec0 	bl	8007464 <memchr>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d03f      	beq.n	8006768 <_vfiprintf_r+0x22c>
 80066e8:	4b29      	ldr	r3, [pc, #164]	; (8006790 <_vfiprintf_r+0x254>)
 80066ea:	bb1b      	cbnz	r3, 8006734 <_vfiprintf_r+0x1f8>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	3308      	adds	r3, #8
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	443b      	add	r3, r7
 80066fc:	9309      	str	r3, [sp, #36]	; 0x24
 80066fe:	e767      	b.n	80065d0 <_vfiprintf_r+0x94>
 8006700:	460c      	mov	r4, r1
 8006702:	2001      	movs	r0, #1
 8006704:	fb0c 3202 	mla	r2, ip, r2, r3
 8006708:	e7a5      	b.n	8006656 <_vfiprintf_r+0x11a>
 800670a:	2300      	movs	r3, #0
 800670c:	f04f 0c0a 	mov.w	ip, #10
 8006710:	4619      	mov	r1, r3
 8006712:	3401      	adds	r4, #1
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	4620      	mov	r0, r4
 8006718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671c:	3a30      	subs	r2, #48	; 0x30
 800671e:	2a09      	cmp	r2, #9
 8006720:	d903      	bls.n	800672a <_vfiprintf_r+0x1ee>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0c5      	beq.n	80066b2 <_vfiprintf_r+0x176>
 8006726:	9105      	str	r1, [sp, #20]
 8006728:	e7c3      	b.n	80066b2 <_vfiprintf_r+0x176>
 800672a:	4604      	mov	r4, r0
 800672c:	2301      	movs	r3, #1
 800672e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006732:	e7f0      	b.n	8006716 <_vfiprintf_r+0x1da>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4630      	mov	r0, r6
 800673c:	4b15      	ldr	r3, [pc, #84]	; (8006794 <_vfiprintf_r+0x258>)
 800673e:	a904      	add	r1, sp, #16
 8006740:	f3af 8000 	nop.w
 8006744:	4607      	mov	r7, r0
 8006746:	1c78      	adds	r0, r7, #1
 8006748:	d1d6      	bne.n	80066f8 <_vfiprintf_r+0x1bc>
 800674a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800674c:	07d9      	lsls	r1, r3, #31
 800674e:	d405      	bmi.n	800675c <_vfiprintf_r+0x220>
 8006750:	89ab      	ldrh	r3, [r5, #12]
 8006752:	059a      	lsls	r2, r3, #22
 8006754:	d402      	bmi.n	800675c <_vfiprintf_r+0x220>
 8006756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006758:	f000 fe1f 	bl	800739a <__retarget_lock_release_recursive>
 800675c:	89ab      	ldrh	r3, [r5, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af12 	bmi.w	8006588 <_vfiprintf_r+0x4c>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	e711      	b.n	800658c <_vfiprintf_r+0x50>
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	462a      	mov	r2, r5
 800676e:	4630      	mov	r0, r6
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <_vfiprintf_r+0x258>)
 8006772:	a904      	add	r1, sp, #16
 8006774:	f000 f882 	bl	800687c <_printf_i>
 8006778:	e7e4      	b.n	8006744 <_vfiprintf_r+0x208>
 800677a:	bf00      	nop
 800677c:	080094a4 	.word	0x080094a4
 8006780:	080094c4 	.word	0x080094c4
 8006784:	08009484 	.word	0x08009484
 8006788:	080092d8 	.word	0x080092d8
 800678c:	080092e2 	.word	0x080092e2
 8006790:	00000000 	.word	0x00000000
 8006794:	08006517 	.word	0x08006517
 8006798:	080092de 	.word	0x080092de

0800679c <_printf_common>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	4616      	mov	r6, r2
 80067a2:	4699      	mov	r9, r3
 80067a4:	688a      	ldr	r2, [r1, #8]
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	4607      	mov	r7, r0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bfb8      	it	lt
 80067ae:	4613      	movlt	r3, r2
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067b6:	460c      	mov	r4, r1
 80067b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067bc:	b10a      	cbz	r2, 80067c2 <_printf_common+0x26>
 80067be:	3301      	adds	r3, #1
 80067c0:	6033      	str	r3, [r6, #0]
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	0699      	lsls	r1, r3, #26
 80067c6:	bf42      	ittt	mi
 80067c8:	6833      	ldrmi	r3, [r6, #0]
 80067ca:	3302      	addmi	r3, #2
 80067cc:	6033      	strmi	r3, [r6, #0]
 80067ce:	6825      	ldr	r5, [r4, #0]
 80067d0:	f015 0506 	ands.w	r5, r5, #6
 80067d4:	d106      	bne.n	80067e4 <_printf_common+0x48>
 80067d6:	f104 0a19 	add.w	sl, r4, #25
 80067da:	68e3      	ldr	r3, [r4, #12]
 80067dc:	6832      	ldr	r2, [r6, #0]
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	42ab      	cmp	r3, r5
 80067e2:	dc28      	bgt.n	8006836 <_printf_common+0x9a>
 80067e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067e8:	1e13      	subs	r3, r2, #0
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	bf18      	it	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	0692      	lsls	r2, r2, #26
 80067f2:	d42d      	bmi.n	8006850 <_printf_common+0xb4>
 80067f4:	4649      	mov	r1, r9
 80067f6:	4638      	mov	r0, r7
 80067f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fc:	47c0      	blx	r8
 80067fe:	3001      	adds	r0, #1
 8006800:	d020      	beq.n	8006844 <_printf_common+0xa8>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	68e5      	ldr	r5, [r4, #12]
 8006806:	f003 0306 	and.w	r3, r3, #6
 800680a:	2b04      	cmp	r3, #4
 800680c:	bf18      	it	ne
 800680e:	2500      	movne	r5, #0
 8006810:	6832      	ldr	r2, [r6, #0]
 8006812:	f04f 0600 	mov.w	r6, #0
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	bf08      	it	eq
 800681a:	1aad      	subeq	r5, r5, r2
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	bf08      	it	eq
 8006820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006824:	4293      	cmp	r3, r2
 8006826:	bfc4      	itt	gt
 8006828:	1a9b      	subgt	r3, r3, r2
 800682a:	18ed      	addgt	r5, r5, r3
 800682c:	341a      	adds	r4, #26
 800682e:	42b5      	cmp	r5, r6
 8006830:	d11a      	bne.n	8006868 <_printf_common+0xcc>
 8006832:	2000      	movs	r0, #0
 8006834:	e008      	b.n	8006848 <_printf_common+0xac>
 8006836:	2301      	movs	r3, #1
 8006838:	4652      	mov	r2, sl
 800683a:	4649      	mov	r1, r9
 800683c:	4638      	mov	r0, r7
 800683e:	47c0      	blx	r8
 8006840:	3001      	adds	r0, #1
 8006842:	d103      	bne.n	800684c <_printf_common+0xb0>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	3501      	adds	r5, #1
 800684e:	e7c4      	b.n	80067da <_printf_common+0x3e>
 8006850:	2030      	movs	r0, #48	; 0x30
 8006852:	18e1      	adds	r1, r4, r3
 8006854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800685e:	4422      	add	r2, r4
 8006860:	3302      	adds	r3, #2
 8006862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006866:	e7c5      	b.n	80067f4 <_printf_common+0x58>
 8006868:	2301      	movs	r3, #1
 800686a:	4622      	mov	r2, r4
 800686c:	4649      	mov	r1, r9
 800686e:	4638      	mov	r0, r7
 8006870:	47c0      	blx	r8
 8006872:	3001      	adds	r0, #1
 8006874:	d0e6      	beq.n	8006844 <_printf_common+0xa8>
 8006876:	3601      	adds	r6, #1
 8006878:	e7d9      	b.n	800682e <_printf_common+0x92>
	...

0800687c <_printf_i>:
 800687c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	7e27      	ldrb	r7, [r4, #24]
 8006884:	4691      	mov	r9, r2
 8006886:	2f78      	cmp	r7, #120	; 0x78
 8006888:	4680      	mov	r8, r0
 800688a:	469a      	mov	sl, r3
 800688c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800688e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006892:	d807      	bhi.n	80068a4 <_printf_i+0x28>
 8006894:	2f62      	cmp	r7, #98	; 0x62
 8006896:	d80a      	bhi.n	80068ae <_printf_i+0x32>
 8006898:	2f00      	cmp	r7, #0
 800689a:	f000 80d9 	beq.w	8006a50 <_printf_i+0x1d4>
 800689e:	2f58      	cmp	r7, #88	; 0x58
 80068a0:	f000 80a4 	beq.w	80069ec <_printf_i+0x170>
 80068a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068ac:	e03a      	b.n	8006924 <_printf_i+0xa8>
 80068ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068b2:	2b15      	cmp	r3, #21
 80068b4:	d8f6      	bhi.n	80068a4 <_printf_i+0x28>
 80068b6:	a001      	add	r0, pc, #4	; (adr r0, 80068bc <_printf_i+0x40>)
 80068b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006929 	.word	0x08006929
 80068c4:	080068a5 	.word	0x080068a5
 80068c8:	080068a5 	.word	0x080068a5
 80068cc:	080068a5 	.word	0x080068a5
 80068d0:	080068a5 	.word	0x080068a5
 80068d4:	08006929 	.word	0x08006929
 80068d8:	080068a5 	.word	0x080068a5
 80068dc:	080068a5 	.word	0x080068a5
 80068e0:	080068a5 	.word	0x080068a5
 80068e4:	080068a5 	.word	0x080068a5
 80068e8:	08006a37 	.word	0x08006a37
 80068ec:	08006959 	.word	0x08006959
 80068f0:	08006a19 	.word	0x08006a19
 80068f4:	080068a5 	.word	0x080068a5
 80068f8:	080068a5 	.word	0x080068a5
 80068fc:	08006a59 	.word	0x08006a59
 8006900:	080068a5 	.word	0x080068a5
 8006904:	08006959 	.word	0x08006959
 8006908:	080068a5 	.word	0x080068a5
 800690c:	080068a5 	.word	0x080068a5
 8006910:	08006a21 	.word	0x08006a21
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800691a:	1d1a      	adds	r2, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	600a      	str	r2, [r1, #0]
 8006920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006924:	2301      	movs	r3, #1
 8006926:	e0a4      	b.n	8006a72 <_printf_i+0x1f6>
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	6808      	ldr	r0, [r1, #0]
 800692c:	062e      	lsls	r6, r5, #24
 800692e:	f100 0304 	add.w	r3, r0, #4
 8006932:	d50a      	bpl.n	800694a <_printf_i+0xce>
 8006934:	6805      	ldr	r5, [r0, #0]
 8006936:	600b      	str	r3, [r1, #0]
 8006938:	2d00      	cmp	r5, #0
 800693a:	da03      	bge.n	8006944 <_printf_i+0xc8>
 800693c:	232d      	movs	r3, #45	; 0x2d
 800693e:	426d      	negs	r5, r5
 8006940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006944:	230a      	movs	r3, #10
 8006946:	485e      	ldr	r0, [pc, #376]	; (8006ac0 <_printf_i+0x244>)
 8006948:	e019      	b.n	800697e <_printf_i+0x102>
 800694a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800694e:	6805      	ldr	r5, [r0, #0]
 8006950:	600b      	str	r3, [r1, #0]
 8006952:	bf18      	it	ne
 8006954:	b22d      	sxthne	r5, r5
 8006956:	e7ef      	b.n	8006938 <_printf_i+0xbc>
 8006958:	680b      	ldr	r3, [r1, #0]
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	1d18      	adds	r0, r3, #4
 800695e:	6008      	str	r0, [r1, #0]
 8006960:	0628      	lsls	r0, r5, #24
 8006962:	d501      	bpl.n	8006968 <_printf_i+0xec>
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	e002      	b.n	800696e <_printf_i+0xf2>
 8006968:	0669      	lsls	r1, r5, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0xe8>
 800696c:	881d      	ldrh	r5, [r3, #0]
 800696e:	2f6f      	cmp	r7, #111	; 0x6f
 8006970:	bf0c      	ite	eq
 8006972:	2308      	moveq	r3, #8
 8006974:	230a      	movne	r3, #10
 8006976:	4852      	ldr	r0, [pc, #328]	; (8006ac0 <_printf_i+0x244>)
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	2e00      	cmp	r6, #0
 8006982:	bfa8      	it	ge
 8006984:	6821      	ldrge	r1, [r4, #0]
 8006986:	60a6      	str	r6, [r4, #8]
 8006988:	bfa4      	itt	ge
 800698a:	f021 0104 	bicge.w	r1, r1, #4
 800698e:	6021      	strge	r1, [r4, #0]
 8006990:	b90d      	cbnz	r5, 8006996 <_printf_i+0x11a>
 8006992:	2e00      	cmp	r6, #0
 8006994:	d04d      	beq.n	8006a32 <_printf_i+0x1b6>
 8006996:	4616      	mov	r6, r2
 8006998:	fbb5 f1f3 	udiv	r1, r5, r3
 800699c:	fb03 5711 	mls	r7, r3, r1, r5
 80069a0:	5dc7      	ldrb	r7, [r0, r7]
 80069a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a6:	462f      	mov	r7, r5
 80069a8:	42bb      	cmp	r3, r7
 80069aa:	460d      	mov	r5, r1
 80069ac:	d9f4      	bls.n	8006998 <_printf_i+0x11c>
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d10b      	bne.n	80069ca <_printf_i+0x14e>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	07df      	lsls	r7, r3, #31
 80069b6:	d508      	bpl.n	80069ca <_printf_i+0x14e>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	6861      	ldr	r1, [r4, #4]
 80069bc:	4299      	cmp	r1, r3
 80069be:	bfde      	ittt	le
 80069c0:	2330      	movle	r3, #48	; 0x30
 80069c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069ca:	1b92      	subs	r2, r2, r6
 80069cc:	6122      	str	r2, [r4, #16]
 80069ce:	464b      	mov	r3, r9
 80069d0:	4621      	mov	r1, r4
 80069d2:	4640      	mov	r0, r8
 80069d4:	f8cd a000 	str.w	sl, [sp]
 80069d8:	aa03      	add	r2, sp, #12
 80069da:	f7ff fedf 	bl	800679c <_printf_common>
 80069de:	3001      	adds	r0, #1
 80069e0:	d14c      	bne.n	8006a7c <_printf_i+0x200>
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
 80069e6:	b004      	add	sp, #16
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	4834      	ldr	r0, [pc, #208]	; (8006ac0 <_printf_i+0x244>)
 80069ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069f2:	680e      	ldr	r6, [r1, #0]
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80069fa:	061f      	lsls	r7, r3, #24
 80069fc:	600e      	str	r6, [r1, #0]
 80069fe:	d514      	bpl.n	8006a2a <_printf_i+0x1ae>
 8006a00:	07d9      	lsls	r1, r3, #31
 8006a02:	bf44      	itt	mi
 8006a04:	f043 0320 	orrmi.w	r3, r3, #32
 8006a08:	6023      	strmi	r3, [r4, #0]
 8006a0a:	b91d      	cbnz	r5, 8006a14 <_printf_i+0x198>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	f023 0320 	bic.w	r3, r3, #32
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	2310      	movs	r3, #16
 8006a16:	e7af      	b.n	8006978 <_printf_i+0xfc>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	f043 0320 	orr.w	r3, r3, #32
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	2378      	movs	r3, #120	; 0x78
 8006a22:	4828      	ldr	r0, [pc, #160]	; (8006ac4 <_printf_i+0x248>)
 8006a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a28:	e7e3      	b.n	80069f2 <_printf_i+0x176>
 8006a2a:	065e      	lsls	r6, r3, #25
 8006a2c:	bf48      	it	mi
 8006a2e:	b2ad      	uxthmi	r5, r5
 8006a30:	e7e6      	b.n	8006a00 <_printf_i+0x184>
 8006a32:	4616      	mov	r6, r2
 8006a34:	e7bb      	b.n	80069ae <_printf_i+0x132>
 8006a36:	680b      	ldr	r3, [r1, #0]
 8006a38:	6826      	ldr	r6, [r4, #0]
 8006a3a:	1d1d      	adds	r5, r3, #4
 8006a3c:	6960      	ldr	r0, [r4, #20]
 8006a3e:	600d      	str	r5, [r1, #0]
 8006a40:	0635      	lsls	r5, r6, #24
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	d501      	bpl.n	8006a4a <_printf_i+0x1ce>
 8006a46:	6018      	str	r0, [r3, #0]
 8006a48:	e002      	b.n	8006a50 <_printf_i+0x1d4>
 8006a4a:	0671      	lsls	r1, r6, #25
 8006a4c:	d5fb      	bpl.n	8006a46 <_printf_i+0x1ca>
 8006a4e:	8018      	strh	r0, [r3, #0]
 8006a50:	2300      	movs	r3, #0
 8006a52:	4616      	mov	r6, r2
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	e7ba      	b.n	80069ce <_printf_i+0x152>
 8006a58:	680b      	ldr	r3, [r1, #0]
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	600a      	str	r2, [r1, #0]
 8006a5e:	681e      	ldr	r6, [r3, #0]
 8006a60:	2100      	movs	r1, #0
 8006a62:	4630      	mov	r0, r6
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	f000 fcfd 	bl	8007464 <memchr>
 8006a6a:	b108      	cbz	r0, 8006a70 <_printf_i+0x1f4>
 8006a6c:	1b80      	subs	r0, r0, r6
 8006a6e:	6060      	str	r0, [r4, #4]
 8006a70:	6863      	ldr	r3, [r4, #4]
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	2300      	movs	r3, #0
 8006a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a7a:	e7a8      	b.n	80069ce <_printf_i+0x152>
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4640      	mov	r0, r8
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	47d0      	blx	sl
 8006a86:	3001      	adds	r0, #1
 8006a88:	d0ab      	beq.n	80069e2 <_printf_i+0x166>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	079b      	lsls	r3, r3, #30
 8006a8e:	d413      	bmi.n	8006ab8 <_printf_i+0x23c>
 8006a90:	68e0      	ldr	r0, [r4, #12]
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	4298      	cmp	r0, r3
 8006a96:	bfb8      	it	lt
 8006a98:	4618      	movlt	r0, r3
 8006a9a:	e7a4      	b.n	80069e6 <_printf_i+0x16a>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	47d0      	blx	sl
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d09b      	beq.n	80069e2 <_printf_i+0x166>
 8006aaa:	3501      	adds	r5, #1
 8006aac:	68e3      	ldr	r3, [r4, #12]
 8006aae:	9903      	ldr	r1, [sp, #12]
 8006ab0:	1a5b      	subs	r3, r3, r1
 8006ab2:	42ab      	cmp	r3, r5
 8006ab4:	dcf2      	bgt.n	8006a9c <_printf_i+0x220>
 8006ab6:	e7eb      	b.n	8006a90 <_printf_i+0x214>
 8006ab8:	2500      	movs	r5, #0
 8006aba:	f104 0619 	add.w	r6, r4, #25
 8006abe:	e7f5      	b.n	8006aac <_printf_i+0x230>
 8006ac0:	080092e9 	.word	0x080092e9
 8006ac4:	080092fa 	.word	0x080092fa

08006ac8 <_puts_r>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	460e      	mov	r6, r1
 8006acc:	4605      	mov	r5, r0
 8006ace:	b118      	cbz	r0, 8006ad8 <_puts_r+0x10>
 8006ad0:	6983      	ldr	r3, [r0, #24]
 8006ad2:	b90b      	cbnz	r3, 8006ad8 <_puts_r+0x10>
 8006ad4:	f000 fbc2 	bl	800725c <__sinit>
 8006ad8:	69ab      	ldr	r3, [r5, #24]
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	b913      	cbnz	r3, 8006ae4 <_puts_r+0x1c>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 fbbc 	bl	800725c <__sinit>
 8006ae4:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <_puts_r+0xd0>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d120      	bne.n	8006b2c <_puts_r+0x64>
 8006aea:	686c      	ldr	r4, [r5, #4]
 8006aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aee:	07db      	lsls	r3, r3, #31
 8006af0:	d405      	bmi.n	8006afe <_puts_r+0x36>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	0598      	lsls	r0, r3, #22
 8006af6:	d402      	bmi.n	8006afe <_puts_r+0x36>
 8006af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006afa:	f000 fc4d 	bl	8007398 <__retarget_lock_acquire_recursive>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	0719      	lsls	r1, r3, #28
 8006b02:	d51d      	bpl.n	8006b40 <_puts_r+0x78>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	b1db      	cbz	r3, 8006b40 <_puts_r+0x78>
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b10:	3b01      	subs	r3, #1
 8006b12:	60a3      	str	r3, [r4, #8]
 8006b14:	bb39      	cbnz	r1, 8006b66 <_puts_r+0x9e>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da38      	bge.n	8006b8c <_puts_r+0xc4>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	210a      	movs	r1, #10
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f9ba 	bl	8006e98 <__swbuf_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d011      	beq.n	8006b4c <_puts_r+0x84>
 8006b28:	250a      	movs	r5, #10
 8006b2a:	e011      	b.n	8006b50 <_puts_r+0x88>
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <_puts_r+0xd4>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d101      	bne.n	8006b36 <_puts_r+0x6e>
 8006b32:	68ac      	ldr	r4, [r5, #8]
 8006b34:	e7da      	b.n	8006aec <_puts_r+0x24>
 8006b36:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <_puts_r+0xd8>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	bf08      	it	eq
 8006b3c:	68ec      	ldreq	r4, [r5, #12]
 8006b3e:	e7d5      	b.n	8006aec <_puts_r+0x24>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f9fa 	bl	8006f3c <__swsetup_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0dd      	beq.n	8006b08 <_puts_r+0x40>
 8006b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b52:	07da      	lsls	r2, r3, #31
 8006b54:	d405      	bmi.n	8006b62 <_puts_r+0x9a>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	059b      	lsls	r3, r3, #22
 8006b5a:	d402      	bmi.n	8006b62 <_puts_r+0x9a>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5e:	f000 fc1c 	bl	800739a <__retarget_lock_release_recursive>
 8006b62:	4628      	mov	r0, r5
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da04      	bge.n	8006b74 <_puts_r+0xac>
 8006b6a:	69a2      	ldr	r2, [r4, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	dc06      	bgt.n	8006b7e <_puts_r+0xb6>
 8006b70:	290a      	cmp	r1, #10
 8006b72:	d004      	beq.n	8006b7e <_puts_r+0xb6>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	7019      	strb	r1, [r3, #0]
 8006b7c:	e7c5      	b.n	8006b0a <_puts_r+0x42>
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f989 	bl	8006e98 <__swbuf_r>
 8006b86:	3001      	adds	r0, #1
 8006b88:	d1bf      	bne.n	8006b0a <_puts_r+0x42>
 8006b8a:	e7df      	b.n	8006b4c <_puts_r+0x84>
 8006b8c:	250a      	movs	r5, #10
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	701d      	strb	r5, [r3, #0]
 8006b96:	e7db      	b.n	8006b50 <_puts_r+0x88>
 8006b98:	080094a4 	.word	0x080094a4
 8006b9c:	080094c4 	.word	0x080094c4
 8006ba0:	08009484 	.word	0x08009484

08006ba4 <puts>:
 8006ba4:	4b02      	ldr	r3, [pc, #8]	; (8006bb0 <puts+0xc>)
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	f7ff bf8d 	b.w	8006ac8 <_puts_r>
 8006bae:	bf00      	nop
 8006bb0:	20000038 	.word	0x20000038

08006bb4 <_sbrk_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4d05      	ldr	r5, [pc, #20]	; (8006bd0 <_sbrk_r+0x1c>)
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7fc faba 	bl	8003138 <_sbrk>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_sbrk_r+0x1a>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_sbrk_r+0x1a>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	200002e0 	.word	0x200002e0

08006bd4 <siprintf>:
 8006bd4:	b40e      	push	{r1, r2, r3}
 8006bd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bda:	b500      	push	{lr}
 8006bdc:	b09c      	sub	sp, #112	; 0x70
 8006bde:	ab1d      	add	r3, sp, #116	; 0x74
 8006be0:	9002      	str	r0, [sp, #8]
 8006be2:	9006      	str	r0, [sp, #24]
 8006be4:	9107      	str	r1, [sp, #28]
 8006be6:	9104      	str	r1, [sp, #16]
 8006be8:	4808      	ldr	r0, [pc, #32]	; (8006c0c <siprintf+0x38>)
 8006bea:	4909      	ldr	r1, [pc, #36]	; (8006c10 <siprintf+0x3c>)
 8006bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf0:	9105      	str	r1, [sp, #20]
 8006bf2:	6800      	ldr	r0, [r0, #0]
 8006bf4:	a902      	add	r1, sp, #8
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	f000 fcf8 	bl	80075ec <_svfiprintf_r>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	b01c      	add	sp, #112	; 0x70
 8006c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c08:	b003      	add	sp, #12
 8006c0a:	4770      	bx	lr
 8006c0c:	20000038 	.word	0x20000038
 8006c10:	ffff0208 	.word	0xffff0208

08006c14 <strcat>:
 8006c14:	4602      	mov	r2, r0
 8006c16:	b510      	push	{r4, lr}
 8006c18:	7814      	ldrb	r4, [r2, #0]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	3201      	adds	r2, #1
 8006c1e:	2c00      	cmp	r4, #0
 8006c20:	d1fa      	bne.n	8006c18 <strcat+0x4>
 8006c22:	3b01      	subs	r3, #1
 8006c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c28:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1f9      	bne.n	8006c24 <strcat+0x10>
 8006c30:	bd10      	pop	{r4, pc}
	...

08006c34 <strdup>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <strdup+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f000 b803 	b.w	8006c44 <_strdup_r>
 8006c3e:	bf00      	nop
 8006c40:	20000038 	.word	0x20000038

08006c44 <_strdup_r>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	f7f9 fa80 	bl	8000150 <strlen>
 8006c50:	1c46      	adds	r6, r0, #1
 8006c52:	4631      	mov	r1, r6
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7ff fbef 	bl	8006438 <_malloc_r>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	b118      	cbz	r0, 8006c66 <_strdup_r+0x22>
 8006c5e:	4632      	mov	r2, r6
 8006c60:	4629      	mov	r1, r5
 8006c62:	f000 fc0d 	bl	8007480 <memcpy>
 8006c66:	4620      	mov	r0, r4
 8006c68:	bd70      	pop	{r4, r5, r6, pc}

08006c6a <strrchr>:
 8006c6a:	b538      	push	{r3, r4, r5, lr}
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	b969      	cbnz	r1, 8006c8e <strrchr+0x24>
 8006c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c76:	f000 be40 	b.w	80078fa <strchr>
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fe3a 	bl	80078fa <strchr>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d1f7      	bne.n	8006c7a <strrchr+0x10>
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	2500      	movs	r5, #0
 8006c90:	e7f5      	b.n	8006c7e <strrchr+0x14>

08006c92 <strstr>:
 8006c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c94:	780c      	ldrb	r4, [r1, #0]
 8006c96:	b164      	cbz	r4, 8006cb2 <strstr+0x20>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	781a      	ldrb	r2, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	1c5e      	adds	r6, r3, #1
 8006ca0:	b90a      	cbnz	r2, 8006ca6 <strstr+0x14>
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	e005      	b.n	8006cb2 <strstr+0x20>
 8006ca6:	4294      	cmp	r4, r2
 8006ca8:	d108      	bne.n	8006cbc <strstr+0x2a>
 8006caa:	460d      	mov	r5, r1
 8006cac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006cb0:	b902      	cbnz	r2, 8006cb4 <strstr+0x22>
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006cb8:	4297      	cmp	r7, r2
 8006cba:	d0f7      	beq.n	8006cac <strstr+0x1a>
 8006cbc:	4633      	mov	r3, r6
 8006cbe:	e7ec      	b.n	8006c9a <strstr+0x8>

08006cc0 <strtok>:
 8006cc0:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <strtok+0x5c>)
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	681f      	ldr	r7, [r3, #0]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006ccc:	460e      	mov	r6, r1
 8006cce:	b9ec      	cbnz	r4, 8006d0c <strtok+0x4c>
 8006cd0:	2050      	movs	r0, #80	; 0x50
 8006cd2:	f7ff fb4d 	bl	8006370 <malloc>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	65b8      	str	r0, [r7, #88]	; 0x58
 8006cda:	b920      	cbnz	r0, 8006ce6 <strtok+0x26>
 8006cdc:	2157      	movs	r1, #87	; 0x57
 8006cde:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <strtok+0x60>)
 8006ce0:	4810      	ldr	r0, [pc, #64]	; (8006d24 <strtok+0x64>)
 8006ce2:	f7ff fae7 	bl	80062b4 <__assert_func>
 8006ce6:	e9c0 4400 	strd	r4, r4, [r0]
 8006cea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006cee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006cf2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006cf6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006cfa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006cfe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006d02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006d06:	6184      	str	r4, [r0, #24]
 8006d08:	7704      	strb	r4, [r0, #28]
 8006d0a:	6244      	str	r4, [r0, #36]	; 0x24
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d12:	2301      	movs	r3, #1
 8006d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	f000 b806 	b.w	8006d28 <__strtok_r>
 8006d1c:	20000038 	.word	0x20000038
 8006d20:	0800930b 	.word	0x0800930b
 8006d24:	08009322 	.word	0x08009322

08006d28 <__strtok_r>:
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	b908      	cbnz	r0, 8006d30 <__strtok_r+0x8>
 8006d2c:	6810      	ldr	r0, [r2, #0]
 8006d2e:	b188      	cbz	r0, 8006d54 <__strtok_r+0x2c>
 8006d30:	4604      	mov	r4, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	4620      	mov	r0, r4
 8006d36:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006d3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006d3e:	b91e      	cbnz	r6, 8006d48 <__strtok_r+0x20>
 8006d40:	b965      	cbnz	r5, 8006d5c <__strtok_r+0x34>
 8006d42:	4628      	mov	r0, r5
 8006d44:	6015      	str	r5, [r2, #0]
 8006d46:	e005      	b.n	8006d54 <__strtok_r+0x2c>
 8006d48:	42b5      	cmp	r5, r6
 8006d4a:	d1f6      	bne.n	8006d3a <__strtok_r+0x12>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <__strtok_r+0xa>
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	7003      	strb	r3, [r0, #0]
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d56:	461c      	mov	r4, r3
 8006d58:	e00c      	b.n	8006d74 <__strtok_r+0x4c>
 8006d5a:	b915      	cbnz	r5, 8006d62 <__strtok_r+0x3a>
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006d66:	42ab      	cmp	r3, r5
 8006d68:	d1f7      	bne.n	8006d5a <__strtok_r+0x32>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f3      	beq.n	8006d56 <__strtok_r+0x2e>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006d74:	6014      	str	r4, [r2, #0]
 8006d76:	e7ed      	b.n	8006d54 <__strtok_r+0x2c>

08006d78 <_strtol_l.isra.0>:
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7e:	4686      	mov	lr, r0
 8006d80:	d001      	beq.n	8006d86 <_strtol_l.isra.0+0xe>
 8006d82:	2b24      	cmp	r3, #36	; 0x24
 8006d84:	d906      	bls.n	8006d94 <_strtol_l.isra.0+0x1c>
 8006d86:	f7ff fab7 	bl	80062f8 <__errno>
 8006d8a:	2316      	movs	r3, #22
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d94:	468c      	mov	ip, r1
 8006d96:	4e3a      	ldr	r6, [pc, #232]	; (8006e80 <_strtol_l.isra.0+0x108>)
 8006d98:	4660      	mov	r0, ip
 8006d9a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006d9e:	5da5      	ldrb	r5, [r4, r6]
 8006da0:	f015 0508 	ands.w	r5, r5, #8
 8006da4:	d1f8      	bne.n	8006d98 <_strtol_l.isra.0+0x20>
 8006da6:	2c2d      	cmp	r4, #45	; 0x2d
 8006da8:	d133      	bne.n	8006e12 <_strtol_l.isra.0+0x9a>
 8006daa:	f04f 0801 	mov.w	r8, #1
 8006dae:	f89c 4000 	ldrb.w	r4, [ip]
 8006db2:	f100 0c02 	add.w	ip, r0, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d05d      	beq.n	8006e76 <_strtol_l.isra.0+0xfe>
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d10c      	bne.n	8006dd8 <_strtol_l.isra.0+0x60>
 8006dbe:	2c30      	cmp	r4, #48	; 0x30
 8006dc0:	d10a      	bne.n	8006dd8 <_strtol_l.isra.0+0x60>
 8006dc2:	f89c 0000 	ldrb.w	r0, [ip]
 8006dc6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006dca:	2858      	cmp	r0, #88	; 0x58
 8006dcc:	d14e      	bne.n	8006e6c <_strtol_l.isra.0+0xf4>
 8006dce:	2310      	movs	r3, #16
 8006dd0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006dd4:	f10c 0c02 	add.w	ip, ip, #2
 8006dd8:	2500      	movs	r5, #0
 8006dda:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006dde:	3f01      	subs	r7, #1
 8006de0:	fbb7 f9f3 	udiv	r9, r7, r3
 8006de4:	4628      	mov	r0, r5
 8006de6:	fb03 7a19 	mls	sl, r3, r9, r7
 8006dea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006dee:	2e09      	cmp	r6, #9
 8006df0:	d818      	bhi.n	8006e24 <_strtol_l.isra.0+0xac>
 8006df2:	4634      	mov	r4, r6
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	dd24      	ble.n	8006e42 <_strtol_l.isra.0+0xca>
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	db1f      	blt.n	8006e3c <_strtol_l.isra.0+0xc4>
 8006dfc:	4581      	cmp	r9, r0
 8006dfe:	d31d      	bcc.n	8006e3c <_strtol_l.isra.0+0xc4>
 8006e00:	d101      	bne.n	8006e06 <_strtol_l.isra.0+0x8e>
 8006e02:	45a2      	cmp	sl, r4
 8006e04:	db1a      	blt.n	8006e3c <_strtol_l.isra.0+0xc4>
 8006e06:	2501      	movs	r5, #1
 8006e08:	fb00 4003 	mla	r0, r0, r3, r4
 8006e0c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006e10:	e7eb      	b.n	8006dea <_strtol_l.isra.0+0x72>
 8006e12:	2c2b      	cmp	r4, #43	; 0x2b
 8006e14:	bf08      	it	eq
 8006e16:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006e1a:	46a8      	mov	r8, r5
 8006e1c:	bf08      	it	eq
 8006e1e:	f100 0c02 	addeq.w	ip, r0, #2
 8006e22:	e7c8      	b.n	8006db6 <_strtol_l.isra.0+0x3e>
 8006e24:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006e28:	2e19      	cmp	r6, #25
 8006e2a:	d801      	bhi.n	8006e30 <_strtol_l.isra.0+0xb8>
 8006e2c:	3c37      	subs	r4, #55	; 0x37
 8006e2e:	e7e1      	b.n	8006df4 <_strtol_l.isra.0+0x7c>
 8006e30:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006e34:	2e19      	cmp	r6, #25
 8006e36:	d804      	bhi.n	8006e42 <_strtol_l.isra.0+0xca>
 8006e38:	3c57      	subs	r4, #87	; 0x57
 8006e3a:	e7db      	b.n	8006df4 <_strtol_l.isra.0+0x7c>
 8006e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8006e40:	e7e4      	b.n	8006e0c <_strtol_l.isra.0+0x94>
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	da08      	bge.n	8006e58 <_strtol_l.isra.0+0xe0>
 8006e46:	2322      	movs	r3, #34	; 0x22
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f8ce 3000 	str.w	r3, [lr]
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	d09e      	beq.n	8006d90 <_strtol_l.isra.0+0x18>
 8006e52:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006e56:	e007      	b.n	8006e68 <_strtol_l.isra.0+0xf0>
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	d000      	beq.n	8006e60 <_strtol_l.isra.0+0xe8>
 8006e5e:	4240      	negs	r0, r0
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d095      	beq.n	8006d90 <_strtol_l.isra.0+0x18>
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	d1f4      	bne.n	8006e52 <_strtol_l.isra.0+0xda>
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	e791      	b.n	8006d90 <_strtol_l.isra.0+0x18>
 8006e6c:	2430      	movs	r4, #48	; 0x30
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1b2      	bne.n	8006dd8 <_strtol_l.isra.0+0x60>
 8006e72:	2308      	movs	r3, #8
 8006e74:	e7b0      	b.n	8006dd8 <_strtol_l.isra.0+0x60>
 8006e76:	2c30      	cmp	r4, #48	; 0x30
 8006e78:	d0a3      	beq.n	8006dc2 <_strtol_l.isra.0+0x4a>
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	e7ac      	b.n	8006dd8 <_strtol_l.isra.0+0x60>
 8006e7e:	bf00      	nop
 8006e80:	08009384 	.word	0x08009384

08006e84 <strtol>:
 8006e84:	4613      	mov	r3, r2
 8006e86:	460a      	mov	r2, r1
 8006e88:	4601      	mov	r1, r0
 8006e8a:	4802      	ldr	r0, [pc, #8]	; (8006e94 <strtol+0x10>)
 8006e8c:	6800      	ldr	r0, [r0, #0]
 8006e8e:	f7ff bf73 	b.w	8006d78 <_strtol_l.isra.0>
 8006e92:	bf00      	nop
 8006e94:	20000038 	.word	0x20000038

08006e98 <__swbuf_r>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	460e      	mov	r6, r1
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	b118      	cbz	r0, 8006eaa <__swbuf_r+0x12>
 8006ea2:	6983      	ldr	r3, [r0, #24]
 8006ea4:	b90b      	cbnz	r3, 8006eaa <__swbuf_r+0x12>
 8006ea6:	f000 f9d9 	bl	800725c <__sinit>
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <__swbuf_r+0x98>)
 8006eac:	429c      	cmp	r4, r3
 8006eae:	d12b      	bne.n	8006f08 <__swbuf_r+0x70>
 8006eb0:	686c      	ldr	r4, [r5, #4]
 8006eb2:	69a3      	ldr	r3, [r4, #24]
 8006eb4:	60a3      	str	r3, [r4, #8]
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	071a      	lsls	r2, r3, #28
 8006eba:	d52f      	bpl.n	8006f1c <__swbuf_r+0x84>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	b36b      	cbz	r3, 8006f1c <__swbuf_r+0x84>
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	b2f6      	uxtb	r6, r6
 8006ec6:	1ac0      	subs	r0, r0, r3
 8006ec8:	6963      	ldr	r3, [r4, #20]
 8006eca:	4637      	mov	r7, r6
 8006ecc:	4283      	cmp	r3, r0
 8006ece:	dc04      	bgt.n	8006eda <__swbuf_r+0x42>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f000 f92e 	bl	8007134 <_fflush_r>
 8006ed8:	bb30      	cbnz	r0, 8006f28 <__swbuf_r+0x90>
 8006eda:	68a3      	ldr	r3, [r4, #8]
 8006edc:	3001      	adds	r0, #1
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	6022      	str	r2, [r4, #0]
 8006ee8:	701e      	strb	r6, [r3, #0]
 8006eea:	6963      	ldr	r3, [r4, #20]
 8006eec:	4283      	cmp	r3, r0
 8006eee:	d004      	beq.n	8006efa <__swbuf_r+0x62>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	07db      	lsls	r3, r3, #31
 8006ef4:	d506      	bpl.n	8006f04 <__swbuf_r+0x6c>
 8006ef6:	2e0a      	cmp	r6, #10
 8006ef8:	d104      	bne.n	8006f04 <__swbuf_r+0x6c>
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f919 	bl	8007134 <_fflush_r>
 8006f02:	b988      	cbnz	r0, 8006f28 <__swbuf_r+0x90>
 8006f04:	4638      	mov	r0, r7
 8006f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <__swbuf_r+0x9c>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <__swbuf_r+0x7a>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7cf      	b.n	8006eb2 <__swbuf_r+0x1a>
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <__swbuf_r+0xa0>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7ca      	b.n	8006eb2 <__swbuf_r+0x1a>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 f80c 	bl	8006f3c <__swsetup_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d0cb      	beq.n	8006ec0 <__swbuf_r+0x28>
 8006f28:	f04f 37ff 	mov.w	r7, #4294967295
 8006f2c:	e7ea      	b.n	8006f04 <__swbuf_r+0x6c>
 8006f2e:	bf00      	nop
 8006f30:	080094a4 	.word	0x080094a4
 8006f34:	080094c4 	.word	0x080094c4
 8006f38:	08009484 	.word	0x08009484

08006f3c <__swsetup_r>:
 8006f3c:	4b32      	ldr	r3, [pc, #200]	; (8007008 <__swsetup_r+0xcc>)
 8006f3e:	b570      	push	{r4, r5, r6, lr}
 8006f40:	681d      	ldr	r5, [r3, #0]
 8006f42:	4606      	mov	r6, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	b125      	cbz	r5, 8006f52 <__swsetup_r+0x16>
 8006f48:	69ab      	ldr	r3, [r5, #24]
 8006f4a:	b913      	cbnz	r3, 8006f52 <__swsetup_r+0x16>
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f985 	bl	800725c <__sinit>
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <__swsetup_r+0xd0>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	d10f      	bne.n	8006f78 <__swsetup_r+0x3c>
 8006f58:	686c      	ldr	r4, [r5, #4]
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f60:	0719      	lsls	r1, r3, #28
 8006f62:	d42c      	bmi.n	8006fbe <__swsetup_r+0x82>
 8006f64:	06dd      	lsls	r5, r3, #27
 8006f66:	d411      	bmi.n	8006f8c <__swsetup_r+0x50>
 8006f68:	2309      	movs	r3, #9
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e03e      	b.n	8006ff6 <__swsetup_r+0xba>
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <__swsetup_r+0xd4>)
 8006f7a:	429c      	cmp	r4, r3
 8006f7c:	d101      	bne.n	8006f82 <__swsetup_r+0x46>
 8006f7e:	68ac      	ldr	r4, [r5, #8]
 8006f80:	e7eb      	b.n	8006f5a <__swsetup_r+0x1e>
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <__swsetup_r+0xd8>)
 8006f84:	429c      	cmp	r4, r3
 8006f86:	bf08      	it	eq
 8006f88:	68ec      	ldreq	r4, [r5, #12]
 8006f8a:	e7e6      	b.n	8006f5a <__swsetup_r+0x1e>
 8006f8c:	0758      	lsls	r0, r3, #29
 8006f8e:	d512      	bpl.n	8006fb6 <__swsetup_r+0x7a>
 8006f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f92:	b141      	cbz	r1, 8006fa6 <__swsetup_r+0x6a>
 8006f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	d002      	beq.n	8006fa2 <__swsetup_r+0x66>
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7ff f9ff 	bl	80063a0 <_free_r>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f043 0308 	orr.w	r3, r3, #8
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	b94b      	cbnz	r3, 8006fd6 <__swsetup_r+0x9a>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fcc:	d003      	beq.n	8006fd6 <__swsetup_r+0x9a>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f000 fa07 	bl	80073e4 <__smakebuf_r>
 8006fd6:	89a0      	ldrh	r0, [r4, #12]
 8006fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fdc:	f010 0301 	ands.w	r3, r0, #1
 8006fe0:	d00a      	beq.n	8006ff8 <__swsetup_r+0xbc>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60a3      	str	r3, [r4, #8]
 8006fe6:	6963      	ldr	r3, [r4, #20]
 8006fe8:	425b      	negs	r3, r3
 8006fea:	61a3      	str	r3, [r4, #24]
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	b943      	cbnz	r3, 8007002 <__swsetup_r+0xc6>
 8006ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ff4:	d1ba      	bne.n	8006f6c <__swsetup_r+0x30>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	0781      	lsls	r1, r0, #30
 8006ffa:	bf58      	it	pl
 8006ffc:	6963      	ldrpl	r3, [r4, #20]
 8006ffe:	60a3      	str	r3, [r4, #8]
 8007000:	e7f4      	b.n	8006fec <__swsetup_r+0xb0>
 8007002:	2000      	movs	r0, #0
 8007004:	e7f7      	b.n	8006ff6 <__swsetup_r+0xba>
 8007006:	bf00      	nop
 8007008:	20000038 	.word	0x20000038
 800700c:	080094a4 	.word	0x080094a4
 8007010:	080094c4 	.word	0x080094c4
 8007014:	08009484 	.word	0x08009484

08007018 <abort>:
 8007018:	2006      	movs	r0, #6
 800701a:	b508      	push	{r3, lr}
 800701c:	f000 fc0e 	bl	800783c <raise>
 8007020:	2001      	movs	r0, #1
 8007022:	f7fc f846 	bl	80030b2 <_exit>
	...

08007028 <__sflush_r>:
 8007028:	898a      	ldrh	r2, [r1, #12]
 800702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	4605      	mov	r5, r0
 8007030:	0710      	lsls	r0, r2, #28
 8007032:	460c      	mov	r4, r1
 8007034:	d458      	bmi.n	80070e8 <__sflush_r+0xc0>
 8007036:	684b      	ldr	r3, [r1, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc05      	bgt.n	8007048 <__sflush_r+0x20>
 800703c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc02      	bgt.n	8007048 <__sflush_r+0x20>
 8007042:	2000      	movs	r0, #0
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800704a:	2e00      	cmp	r6, #0
 800704c:	d0f9      	beq.n	8007042 <__sflush_r+0x1a>
 800704e:	2300      	movs	r3, #0
 8007050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007054:	682f      	ldr	r7, [r5, #0]
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	d032      	beq.n	80070c0 <__sflush_r+0x98>
 800705a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	075a      	lsls	r2, r3, #29
 8007060:	d505      	bpl.n	800706e <__sflush_r+0x46>
 8007062:	6863      	ldr	r3, [r4, #4]
 8007064:	1ac0      	subs	r0, r0, r3
 8007066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007068:	b10b      	cbz	r3, 800706e <__sflush_r+0x46>
 800706a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706c:	1ac0      	subs	r0, r0, r3
 800706e:	2300      	movs	r3, #0
 8007070:	4602      	mov	r2, r0
 8007072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007074:	4628      	mov	r0, r5
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	47b0      	blx	r6
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	d106      	bne.n	800708e <__sflush_r+0x66>
 8007080:	6829      	ldr	r1, [r5, #0]
 8007082:	291d      	cmp	r1, #29
 8007084:	d82c      	bhi.n	80070e0 <__sflush_r+0xb8>
 8007086:	4a2a      	ldr	r2, [pc, #168]	; (8007130 <__sflush_r+0x108>)
 8007088:	40ca      	lsrs	r2, r1
 800708a:	07d6      	lsls	r6, r2, #31
 800708c:	d528      	bpl.n	80070e0 <__sflush_r+0xb8>
 800708e:	2200      	movs	r2, #0
 8007090:	6062      	str	r2, [r4, #4]
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	04d9      	lsls	r1, r3, #19
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	d504      	bpl.n	80070a4 <__sflush_r+0x7c>
 800709a:	1c42      	adds	r2, r0, #1
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0x7a>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	b903      	cbnz	r3, 80070a4 <__sflush_r+0x7c>
 80070a2:	6560      	str	r0, [r4, #84]	; 0x54
 80070a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	d0ca      	beq.n	8007042 <__sflush_r+0x1a>
 80070ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b0:	4299      	cmp	r1, r3
 80070b2:	d002      	beq.n	80070ba <__sflush_r+0x92>
 80070b4:	4628      	mov	r0, r5
 80070b6:	f7ff f973 	bl	80063a0 <_free_r>
 80070ba:	2000      	movs	r0, #0
 80070bc:	6360      	str	r0, [r4, #52]	; 0x34
 80070be:	e7c1      	b.n	8007044 <__sflush_r+0x1c>
 80070c0:	6a21      	ldr	r1, [r4, #32]
 80070c2:	2301      	movs	r3, #1
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b0      	blx	r6
 80070c8:	1c41      	adds	r1, r0, #1
 80070ca:	d1c7      	bne.n	800705c <__sflush_r+0x34>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0c4      	beq.n	800705c <__sflush_r+0x34>
 80070d2:	2b1d      	cmp	r3, #29
 80070d4:	d001      	beq.n	80070da <__sflush_r+0xb2>
 80070d6:	2b16      	cmp	r3, #22
 80070d8:	d101      	bne.n	80070de <__sflush_r+0xb6>
 80070da:	602f      	str	r7, [r5, #0]
 80070dc:	e7b1      	b.n	8007042 <__sflush_r+0x1a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	e7ad      	b.n	8007044 <__sflush_r+0x1c>
 80070e8:	690f      	ldr	r7, [r1, #16]
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	d0a9      	beq.n	8007042 <__sflush_r+0x1a>
 80070ee:	0793      	lsls	r3, r2, #30
 80070f0:	bf18      	it	ne
 80070f2:	2300      	movne	r3, #0
 80070f4:	680e      	ldr	r6, [r1, #0]
 80070f6:	bf08      	it	eq
 80070f8:	694b      	ldreq	r3, [r1, #20]
 80070fa:	eba6 0807 	sub.w	r8, r6, r7
 80070fe:	600f      	str	r7, [r1, #0]
 8007100:	608b      	str	r3, [r1, #8]
 8007102:	f1b8 0f00 	cmp.w	r8, #0
 8007106:	dd9c      	ble.n	8007042 <__sflush_r+0x1a>
 8007108:	4643      	mov	r3, r8
 800710a:	463a      	mov	r2, r7
 800710c:	4628      	mov	r0, r5
 800710e:	6a21      	ldr	r1, [r4, #32]
 8007110:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007112:	47b0      	blx	r6
 8007114:	2800      	cmp	r0, #0
 8007116:	dc06      	bgt.n	8007126 <__sflush_r+0xfe>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	e78e      	b.n	8007044 <__sflush_r+0x1c>
 8007126:	4407      	add	r7, r0
 8007128:	eba8 0800 	sub.w	r8, r8, r0
 800712c:	e7e9      	b.n	8007102 <__sflush_r+0xda>
 800712e:	bf00      	nop
 8007130:	20400001 	.word	0x20400001

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b913      	cbnz	r3, 8007144 <_fflush_r+0x10>
 800713e:	2500      	movs	r5, #0
 8007140:	4628      	mov	r0, r5
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	b118      	cbz	r0, 800714e <_fflush_r+0x1a>
 8007146:	6983      	ldr	r3, [r0, #24]
 8007148:	b90b      	cbnz	r3, 800714e <_fflush_r+0x1a>
 800714a:	f000 f887 	bl	800725c <__sinit>
 800714e:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <_fflush_r+0x6c>)
 8007150:	429c      	cmp	r4, r3
 8007152:	d11b      	bne.n	800718c <_fflush_r+0x58>
 8007154:	686c      	ldr	r4, [r5, #4]
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0ef      	beq.n	800713e <_fflush_r+0xa>
 800715e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007160:	07d0      	lsls	r0, r2, #31
 8007162:	d404      	bmi.n	800716e <_fflush_r+0x3a>
 8007164:	0599      	lsls	r1, r3, #22
 8007166:	d402      	bmi.n	800716e <_fflush_r+0x3a>
 8007168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800716a:	f000 f915 	bl	8007398 <__retarget_lock_acquire_recursive>
 800716e:	4628      	mov	r0, r5
 8007170:	4621      	mov	r1, r4
 8007172:	f7ff ff59 	bl	8007028 <__sflush_r>
 8007176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007178:	4605      	mov	r5, r0
 800717a:	07da      	lsls	r2, r3, #31
 800717c:	d4e0      	bmi.n	8007140 <_fflush_r+0xc>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	059b      	lsls	r3, r3, #22
 8007182:	d4dd      	bmi.n	8007140 <_fflush_r+0xc>
 8007184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007186:	f000 f908 	bl	800739a <__retarget_lock_release_recursive>
 800718a:	e7d9      	b.n	8007140 <_fflush_r+0xc>
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <_fflush_r+0x70>)
 800718e:	429c      	cmp	r4, r3
 8007190:	d101      	bne.n	8007196 <_fflush_r+0x62>
 8007192:	68ac      	ldr	r4, [r5, #8]
 8007194:	e7df      	b.n	8007156 <_fflush_r+0x22>
 8007196:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <_fflush_r+0x74>)
 8007198:	429c      	cmp	r4, r3
 800719a:	bf08      	it	eq
 800719c:	68ec      	ldreq	r4, [r5, #12]
 800719e:	e7da      	b.n	8007156 <_fflush_r+0x22>
 80071a0:	080094a4 	.word	0x080094a4
 80071a4:	080094c4 	.word	0x080094c4
 80071a8:	08009484 	.word	0x08009484

080071ac <std>:
 80071ac:	2300      	movs	r3, #0
 80071ae:	b510      	push	{r4, lr}
 80071b0:	4604      	mov	r4, r0
 80071b2:	e9c0 3300 	strd	r3, r3, [r0]
 80071b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ba:	6083      	str	r3, [r0, #8]
 80071bc:	8181      	strh	r1, [r0, #12]
 80071be:	6643      	str	r3, [r0, #100]	; 0x64
 80071c0:	81c2      	strh	r2, [r0, #14]
 80071c2:	6183      	str	r3, [r0, #24]
 80071c4:	4619      	mov	r1, r3
 80071c6:	2208      	movs	r2, #8
 80071c8:	305c      	adds	r0, #92	; 0x5c
 80071ca:	f7ff f8e1 	bl	8006390 <memset>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x38>)
 80071d0:	6224      	str	r4, [r4, #32]
 80071d2:	6263      	str	r3, [r4, #36]	; 0x24
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <std+0x3c>)
 80071d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <std+0x40>)
 80071da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <std+0x44>)
 80071de:	6323      	str	r3, [r4, #48]	; 0x30
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	08007875 	.word	0x08007875
 80071e8:	08007897 	.word	0x08007897
 80071ec:	080078cf 	.word	0x080078cf
 80071f0:	080078f3 	.word	0x080078f3

080071f4 <_cleanup_r>:
 80071f4:	4901      	ldr	r1, [pc, #4]	; (80071fc <_cleanup_r+0x8>)
 80071f6:	f000 b8af 	b.w	8007358 <_fwalk_reent>
 80071fa:	bf00      	nop
 80071fc:	08007135 	.word	0x08007135

08007200 <__sfmoreglue>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	2568      	movs	r5, #104	; 0x68
 8007204:	1e4a      	subs	r2, r1, #1
 8007206:	4355      	muls	r5, r2
 8007208:	460e      	mov	r6, r1
 800720a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800720e:	f7ff f913 	bl	8006438 <_malloc_r>
 8007212:	4604      	mov	r4, r0
 8007214:	b140      	cbz	r0, 8007228 <__sfmoreglue+0x28>
 8007216:	2100      	movs	r1, #0
 8007218:	e9c0 1600 	strd	r1, r6, [r0]
 800721c:	300c      	adds	r0, #12
 800721e:	60a0      	str	r0, [r4, #8]
 8007220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007224:	f7ff f8b4 	bl	8006390 <memset>
 8007228:	4620      	mov	r0, r4
 800722a:	bd70      	pop	{r4, r5, r6, pc}

0800722c <__sfp_lock_acquire>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__sfp_lock_acquire+0x8>)
 800722e:	f000 b8b3 	b.w	8007398 <__retarget_lock_acquire_recursive>
 8007232:	bf00      	nop
 8007234:	200002dc 	.word	0x200002dc

08007238 <__sfp_lock_release>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__sfp_lock_release+0x8>)
 800723a:	f000 b8ae 	b.w	800739a <__retarget_lock_release_recursive>
 800723e:	bf00      	nop
 8007240:	200002dc 	.word	0x200002dc

08007244 <__sinit_lock_acquire>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__sinit_lock_acquire+0x8>)
 8007246:	f000 b8a7 	b.w	8007398 <__retarget_lock_acquire_recursive>
 800724a:	bf00      	nop
 800724c:	200002d7 	.word	0x200002d7

08007250 <__sinit_lock_release>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__sinit_lock_release+0x8>)
 8007252:	f000 b8a2 	b.w	800739a <__retarget_lock_release_recursive>
 8007256:	bf00      	nop
 8007258:	200002d7 	.word	0x200002d7

0800725c <__sinit>:
 800725c:	b510      	push	{r4, lr}
 800725e:	4604      	mov	r4, r0
 8007260:	f7ff fff0 	bl	8007244 <__sinit_lock_acquire>
 8007264:	69a3      	ldr	r3, [r4, #24]
 8007266:	b11b      	cbz	r3, 8007270 <__sinit+0x14>
 8007268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800726c:	f7ff bff0 	b.w	8007250 <__sinit_lock_release>
 8007270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007274:	6523      	str	r3, [r4, #80]	; 0x50
 8007276:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <__sinit+0x68>)
 8007278:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <__sinit+0x6c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	62a2      	str	r2, [r4, #40]	; 0x28
 800727e:	42a3      	cmp	r3, r4
 8007280:	bf08      	it	eq
 8007282:	2301      	moveq	r3, #1
 8007284:	4620      	mov	r0, r4
 8007286:	bf08      	it	eq
 8007288:	61a3      	streq	r3, [r4, #24]
 800728a:	f000 f81f 	bl	80072cc <__sfp>
 800728e:	6060      	str	r0, [r4, #4]
 8007290:	4620      	mov	r0, r4
 8007292:	f000 f81b 	bl	80072cc <__sfp>
 8007296:	60a0      	str	r0, [r4, #8]
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f817 	bl	80072cc <__sfp>
 800729e:	2200      	movs	r2, #0
 80072a0:	2104      	movs	r1, #4
 80072a2:	60e0      	str	r0, [r4, #12]
 80072a4:	6860      	ldr	r0, [r4, #4]
 80072a6:	f7ff ff81 	bl	80071ac <std>
 80072aa:	2201      	movs	r2, #1
 80072ac:	2109      	movs	r1, #9
 80072ae:	68a0      	ldr	r0, [r4, #8]
 80072b0:	f7ff ff7c 	bl	80071ac <std>
 80072b4:	2202      	movs	r2, #2
 80072b6:	2112      	movs	r1, #18
 80072b8:	68e0      	ldr	r0, [r4, #12]
 80072ba:	f7ff ff77 	bl	80071ac <std>
 80072be:	2301      	movs	r3, #1
 80072c0:	61a3      	str	r3, [r4, #24]
 80072c2:	e7d1      	b.n	8007268 <__sinit+0xc>
 80072c4:	080092d4 	.word	0x080092d4
 80072c8:	080071f5 	.word	0x080071f5

080072cc <__sfp>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	4607      	mov	r7, r0
 80072d0:	f7ff ffac 	bl	800722c <__sfp_lock_acquire>
 80072d4:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <__sfp+0x84>)
 80072d6:	681e      	ldr	r6, [r3, #0]
 80072d8:	69b3      	ldr	r3, [r6, #24]
 80072da:	b913      	cbnz	r3, 80072e2 <__sfp+0x16>
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff ffbd 	bl	800725c <__sinit>
 80072e2:	3648      	adds	r6, #72	; 0x48
 80072e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	d503      	bpl.n	80072f4 <__sfp+0x28>
 80072ec:	6833      	ldr	r3, [r6, #0]
 80072ee:	b30b      	cbz	r3, 8007334 <__sfp+0x68>
 80072f0:	6836      	ldr	r6, [r6, #0]
 80072f2:	e7f7      	b.n	80072e4 <__sfp+0x18>
 80072f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072f8:	b9d5      	cbnz	r5, 8007330 <__sfp+0x64>
 80072fa:	4b16      	ldr	r3, [pc, #88]	; (8007354 <__sfp+0x88>)
 80072fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007300:	60e3      	str	r3, [r4, #12]
 8007302:	6665      	str	r5, [r4, #100]	; 0x64
 8007304:	f000 f847 	bl	8007396 <__retarget_lock_init_recursive>
 8007308:	f7ff ff96 	bl	8007238 <__sfp_lock_release>
 800730c:	2208      	movs	r2, #8
 800730e:	4629      	mov	r1, r5
 8007310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007318:	6025      	str	r5, [r4, #0]
 800731a:	61a5      	str	r5, [r4, #24]
 800731c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007320:	f7ff f836 	bl	8006390 <memset>
 8007324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800732c:	4620      	mov	r0, r4
 800732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007330:	3468      	adds	r4, #104	; 0x68
 8007332:	e7d9      	b.n	80072e8 <__sfp+0x1c>
 8007334:	2104      	movs	r1, #4
 8007336:	4638      	mov	r0, r7
 8007338:	f7ff ff62 	bl	8007200 <__sfmoreglue>
 800733c:	4604      	mov	r4, r0
 800733e:	6030      	str	r0, [r6, #0]
 8007340:	2800      	cmp	r0, #0
 8007342:	d1d5      	bne.n	80072f0 <__sfp+0x24>
 8007344:	f7ff ff78 	bl	8007238 <__sfp_lock_release>
 8007348:	230c      	movs	r3, #12
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	e7ee      	b.n	800732c <__sfp+0x60>
 800734e:	bf00      	nop
 8007350:	080092d4 	.word	0x080092d4
 8007354:	ffff0001 	.word	0xffff0001

08007358 <_fwalk_reent>:
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	4606      	mov	r6, r0
 800735e:	4688      	mov	r8, r1
 8007360:	2700      	movs	r7, #0
 8007362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800736a:	f1b9 0901 	subs.w	r9, r9, #1
 800736e:	d505      	bpl.n	800737c <_fwalk_reent+0x24>
 8007370:	6824      	ldr	r4, [r4, #0]
 8007372:	2c00      	cmp	r4, #0
 8007374:	d1f7      	bne.n	8007366 <_fwalk_reent+0xe>
 8007376:	4638      	mov	r0, r7
 8007378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737c:	89ab      	ldrh	r3, [r5, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d907      	bls.n	8007392 <_fwalk_reent+0x3a>
 8007382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007386:	3301      	adds	r3, #1
 8007388:	d003      	beq.n	8007392 <_fwalk_reent+0x3a>
 800738a:	4629      	mov	r1, r5
 800738c:	4630      	mov	r0, r6
 800738e:	47c0      	blx	r8
 8007390:	4307      	orrs	r7, r0
 8007392:	3568      	adds	r5, #104	; 0x68
 8007394:	e7e9      	b.n	800736a <_fwalk_reent+0x12>

08007396 <__retarget_lock_init_recursive>:
 8007396:	4770      	bx	lr

08007398 <__retarget_lock_acquire_recursive>:
 8007398:	4770      	bx	lr

0800739a <__retarget_lock_release_recursive>:
 800739a:	4770      	bx	lr

0800739c <__swhatbuf_r>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	460e      	mov	r6, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	4614      	mov	r4, r2
 80073a6:	2900      	cmp	r1, #0
 80073a8:	461d      	mov	r5, r3
 80073aa:	b096      	sub	sp, #88	; 0x58
 80073ac:	da07      	bge.n	80073be <__swhatbuf_r+0x22>
 80073ae:	2300      	movs	r3, #0
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	89b3      	ldrh	r3, [r6, #12]
 80073b4:	061a      	lsls	r2, r3, #24
 80073b6:	d410      	bmi.n	80073da <__swhatbuf_r+0x3e>
 80073b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073bc:	e00e      	b.n	80073dc <__swhatbuf_r+0x40>
 80073be:	466a      	mov	r2, sp
 80073c0:	f000 faca 	bl	8007958 <_fstat_r>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	dbf2      	blt.n	80073ae <__swhatbuf_r+0x12>
 80073c8:	9a01      	ldr	r2, [sp, #4]
 80073ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073d2:	425a      	negs	r2, r3
 80073d4:	415a      	adcs	r2, r3
 80073d6:	602a      	str	r2, [r5, #0]
 80073d8:	e7ee      	b.n	80073b8 <__swhatbuf_r+0x1c>
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	2000      	movs	r0, #0
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	b016      	add	sp, #88	; 0x58
 80073e2:	bd70      	pop	{r4, r5, r6, pc}

080073e4 <__smakebuf_r>:
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073e8:	079d      	lsls	r5, r3, #30
 80073ea:	4606      	mov	r6, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	d507      	bpl.n	8007400 <__smakebuf_r+0x1c>
 80073f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	2301      	movs	r3, #1
 80073fa:	6163      	str	r3, [r4, #20]
 80073fc:	b002      	add	sp, #8
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	466a      	mov	r2, sp
 8007402:	ab01      	add	r3, sp, #4
 8007404:	f7ff ffca 	bl	800739c <__swhatbuf_r>
 8007408:	9900      	ldr	r1, [sp, #0]
 800740a:	4605      	mov	r5, r0
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff f813 	bl	8006438 <_malloc_r>
 8007412:	b948      	cbnz	r0, 8007428 <__smakebuf_r+0x44>
 8007414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007418:	059a      	lsls	r2, r3, #22
 800741a:	d4ef      	bmi.n	80073fc <__smakebuf_r+0x18>
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	e7e3      	b.n	80073f0 <__smakebuf_r+0xc>
 8007428:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <__smakebuf_r+0x7c>)
 800742a:	62b3      	str	r3, [r6, #40]	; 0x28
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	6020      	str	r0, [r4, #0]
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	9b00      	ldr	r3, [sp, #0]
 8007438:	6120      	str	r0, [r4, #16]
 800743a:	6163      	str	r3, [r4, #20]
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	b15b      	cbz	r3, 8007458 <__smakebuf_r+0x74>
 8007440:	4630      	mov	r0, r6
 8007442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007446:	f000 fa99 	bl	800797c <_isatty_r>
 800744a:	b128      	cbz	r0, 8007458 <__smakebuf_r+0x74>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	89a0      	ldrh	r0, [r4, #12]
 800745a:	4305      	orrs	r5, r0
 800745c:	81a5      	strh	r5, [r4, #12]
 800745e:	e7cd      	b.n	80073fc <__smakebuf_r+0x18>
 8007460:	080071f5 	.word	0x080071f5

08007464 <memchr>:
 8007464:	4603      	mov	r3, r0
 8007466:	b510      	push	{r4, lr}
 8007468:	b2c9      	uxtb	r1, r1
 800746a:	4402      	add	r2, r0
 800746c:	4293      	cmp	r3, r2
 800746e:	4618      	mov	r0, r3
 8007470:	d101      	bne.n	8007476 <memchr+0x12>
 8007472:	2000      	movs	r0, #0
 8007474:	e003      	b.n	800747e <memchr+0x1a>
 8007476:	7804      	ldrb	r4, [r0, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	428c      	cmp	r4, r1
 800747c:	d1f6      	bne.n	800746c <memchr+0x8>
 800747e:	bd10      	pop	{r4, pc}

08007480 <memcpy>:
 8007480:	440a      	add	r2, r1
 8007482:	4291      	cmp	r1, r2
 8007484:	f100 33ff 	add.w	r3, r0, #4294967295
 8007488:	d100      	bne.n	800748c <memcpy+0xc>
 800748a:	4770      	bx	lr
 800748c:	b510      	push	{r4, lr}
 800748e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007492:	4291      	cmp	r1, r2
 8007494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007498:	d1f9      	bne.n	800748e <memcpy+0xe>
 800749a:	bd10      	pop	{r4, pc}

0800749c <memmove>:
 800749c:	4288      	cmp	r0, r1
 800749e:	b510      	push	{r4, lr}
 80074a0:	eb01 0402 	add.w	r4, r1, r2
 80074a4:	d902      	bls.n	80074ac <memmove+0x10>
 80074a6:	4284      	cmp	r4, r0
 80074a8:	4623      	mov	r3, r4
 80074aa:	d807      	bhi.n	80074bc <memmove+0x20>
 80074ac:	1e43      	subs	r3, r0, #1
 80074ae:	42a1      	cmp	r1, r4
 80074b0:	d008      	beq.n	80074c4 <memmove+0x28>
 80074b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074ba:	e7f8      	b.n	80074ae <memmove+0x12>
 80074bc:	4601      	mov	r1, r0
 80074be:	4402      	add	r2, r0
 80074c0:	428a      	cmp	r2, r1
 80074c2:	d100      	bne.n	80074c6 <memmove+0x2a>
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ce:	e7f7      	b.n	80074c0 <memmove+0x24>

080074d0 <__malloc_lock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__malloc_lock+0x8>)
 80074d2:	f7ff bf61 	b.w	8007398 <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	200002d8 	.word	0x200002d8

080074dc <__malloc_unlock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_unlock+0x8>)
 80074de:	f7ff bf5c 	b.w	800739a <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	200002d8 	.word	0x200002d8

080074e8 <_realloc_r>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4607      	mov	r7, r0
 80074ec:	4614      	mov	r4, r2
 80074ee:	460e      	mov	r6, r1
 80074f0:	b921      	cbnz	r1, 80074fc <_realloc_r+0x14>
 80074f2:	4611      	mov	r1, r2
 80074f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074f8:	f7fe bf9e 	b.w	8006438 <_malloc_r>
 80074fc:	b922      	cbnz	r2, 8007508 <_realloc_r+0x20>
 80074fe:	f7fe ff4f 	bl	80063a0 <_free_r>
 8007502:	4625      	mov	r5, r4
 8007504:	4628      	mov	r0, r5
 8007506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007508:	f000 fa5a 	bl	80079c0 <_malloc_usable_size_r>
 800750c:	42a0      	cmp	r0, r4
 800750e:	d20f      	bcs.n	8007530 <_realloc_r+0x48>
 8007510:	4621      	mov	r1, r4
 8007512:	4638      	mov	r0, r7
 8007514:	f7fe ff90 	bl	8006438 <_malloc_r>
 8007518:	4605      	mov	r5, r0
 800751a:	2800      	cmp	r0, #0
 800751c:	d0f2      	beq.n	8007504 <_realloc_r+0x1c>
 800751e:	4631      	mov	r1, r6
 8007520:	4622      	mov	r2, r4
 8007522:	f7ff ffad 	bl	8007480 <memcpy>
 8007526:	4631      	mov	r1, r6
 8007528:	4638      	mov	r0, r7
 800752a:	f7fe ff39 	bl	80063a0 <_free_r>
 800752e:	e7e9      	b.n	8007504 <_realloc_r+0x1c>
 8007530:	4635      	mov	r5, r6
 8007532:	e7e7      	b.n	8007504 <_realloc_r+0x1c>

08007534 <__ssputs_r>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	688e      	ldr	r6, [r1, #8]
 800753a:	4682      	mov	sl, r0
 800753c:	429e      	cmp	r6, r3
 800753e:	460c      	mov	r4, r1
 8007540:	4690      	mov	r8, r2
 8007542:	461f      	mov	r7, r3
 8007544:	d838      	bhi.n	80075b8 <__ssputs_r+0x84>
 8007546:	898a      	ldrh	r2, [r1, #12]
 8007548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800754c:	d032      	beq.n	80075b4 <__ssputs_r+0x80>
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	6909      	ldr	r1, [r1, #16]
 8007552:	3301      	adds	r3, #1
 8007554:	eba5 0901 	sub.w	r9, r5, r1
 8007558:	6965      	ldr	r5, [r4, #20]
 800755a:	444b      	add	r3, r9
 800755c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007564:	106d      	asrs	r5, r5, #1
 8007566:	429d      	cmp	r5, r3
 8007568:	bf38      	it	cc
 800756a:	461d      	movcc	r5, r3
 800756c:	0553      	lsls	r3, r2, #21
 800756e:	d531      	bpl.n	80075d4 <__ssputs_r+0xa0>
 8007570:	4629      	mov	r1, r5
 8007572:	f7fe ff61 	bl	8006438 <_malloc_r>
 8007576:	4606      	mov	r6, r0
 8007578:	b950      	cbnz	r0, 8007590 <__ssputs_r+0x5c>
 800757a:	230c      	movs	r3, #12
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	f8ca 3000 	str.w	r3, [sl]
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	464a      	mov	r2, r9
 8007592:	6921      	ldr	r1, [r4, #16]
 8007594:	f7ff ff74 	bl	8007480 <memcpy>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800759e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	6126      	str	r6, [r4, #16]
 80075a6:	444e      	add	r6, r9
 80075a8:	6026      	str	r6, [r4, #0]
 80075aa:	463e      	mov	r6, r7
 80075ac:	6165      	str	r5, [r4, #20]
 80075ae:	eba5 0509 	sub.w	r5, r5, r9
 80075b2:	60a5      	str	r5, [r4, #8]
 80075b4:	42be      	cmp	r6, r7
 80075b6:	d900      	bls.n	80075ba <__ssputs_r+0x86>
 80075b8:	463e      	mov	r6, r7
 80075ba:	4632      	mov	r2, r6
 80075bc:	4641      	mov	r1, r8
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	f7ff ff6c 	bl	800749c <memmove>
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	1b9b      	subs	r3, r3, r6
 80075ca:	4432      	add	r2, r6
 80075cc:	2000      	movs	r0, #0
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	6022      	str	r2, [r4, #0]
 80075d2:	e7db      	b.n	800758c <__ssputs_r+0x58>
 80075d4:	462a      	mov	r2, r5
 80075d6:	f7ff ff87 	bl	80074e8 <_realloc_r>
 80075da:	4606      	mov	r6, r0
 80075dc:	2800      	cmp	r0, #0
 80075de:	d1e1      	bne.n	80075a4 <__ssputs_r+0x70>
 80075e0:	4650      	mov	r0, sl
 80075e2:	6921      	ldr	r1, [r4, #16]
 80075e4:	f7fe fedc 	bl	80063a0 <_free_r>
 80075e8:	e7c7      	b.n	800757a <__ssputs_r+0x46>
	...

080075ec <_svfiprintf_r>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	4698      	mov	r8, r3
 80075f2:	898b      	ldrh	r3, [r1, #12]
 80075f4:	4607      	mov	r7, r0
 80075f6:	061b      	lsls	r3, r3, #24
 80075f8:	460d      	mov	r5, r1
 80075fa:	4614      	mov	r4, r2
 80075fc:	b09d      	sub	sp, #116	; 0x74
 80075fe:	d50e      	bpl.n	800761e <_svfiprintf_r+0x32>
 8007600:	690b      	ldr	r3, [r1, #16]
 8007602:	b963      	cbnz	r3, 800761e <_svfiprintf_r+0x32>
 8007604:	2140      	movs	r1, #64	; 0x40
 8007606:	f7fe ff17 	bl	8006438 <_malloc_r>
 800760a:	6028      	str	r0, [r5, #0]
 800760c:	6128      	str	r0, [r5, #16]
 800760e:	b920      	cbnz	r0, 800761a <_svfiprintf_r+0x2e>
 8007610:	230c      	movs	r3, #12
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	e0d1      	b.n	80077be <_svfiprintf_r+0x1d2>
 800761a:	2340      	movs	r3, #64	; 0x40
 800761c:	616b      	str	r3, [r5, #20]
 800761e:	2300      	movs	r3, #0
 8007620:	9309      	str	r3, [sp, #36]	; 0x24
 8007622:	2320      	movs	r3, #32
 8007624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007628:	2330      	movs	r3, #48	; 0x30
 800762a:	f04f 0901 	mov.w	r9, #1
 800762e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007632:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80077d8 <_svfiprintf_r+0x1ec>
 8007636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800763a:	4623      	mov	r3, r4
 800763c:	469a      	mov	sl, r3
 800763e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007642:	b10a      	cbz	r2, 8007648 <_svfiprintf_r+0x5c>
 8007644:	2a25      	cmp	r2, #37	; 0x25
 8007646:	d1f9      	bne.n	800763c <_svfiprintf_r+0x50>
 8007648:	ebba 0b04 	subs.w	fp, sl, r4
 800764c:	d00b      	beq.n	8007666 <_svfiprintf_r+0x7a>
 800764e:	465b      	mov	r3, fp
 8007650:	4622      	mov	r2, r4
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ff6d 	bl	8007534 <__ssputs_r>
 800765a:	3001      	adds	r0, #1
 800765c:	f000 80aa 	beq.w	80077b4 <_svfiprintf_r+0x1c8>
 8007660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007662:	445a      	add	r2, fp
 8007664:	9209      	str	r2, [sp, #36]	; 0x24
 8007666:	f89a 3000 	ldrb.w	r3, [sl]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a2 	beq.w	80077b4 <_svfiprintf_r+0x1c8>
 8007670:	2300      	movs	r3, #0
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800767a:	f10a 0a01 	add.w	sl, sl, #1
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007686:	931a      	str	r3, [sp, #104]	; 0x68
 8007688:	4654      	mov	r4, sl
 800768a:	2205      	movs	r2, #5
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	4851      	ldr	r0, [pc, #324]	; (80077d8 <_svfiprintf_r+0x1ec>)
 8007692:	f7ff fee7 	bl	8007464 <memchr>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	b9d8      	cbnz	r0, 80076d2 <_svfiprintf_r+0xe6>
 800769a:	06d0      	lsls	r0, r2, #27
 800769c:	bf44      	itt	mi
 800769e:	2320      	movmi	r3, #32
 80076a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a4:	0711      	lsls	r1, r2, #28
 80076a6:	bf44      	itt	mi
 80076a8:	232b      	movmi	r3, #43	; 0x2b
 80076aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ae:	f89a 3000 	ldrb.w	r3, [sl]
 80076b2:	2b2a      	cmp	r3, #42	; 0x2a
 80076b4:	d015      	beq.n	80076e2 <_svfiprintf_r+0xf6>
 80076b6:	4654      	mov	r4, sl
 80076b8:	2000      	movs	r0, #0
 80076ba:	f04f 0c0a 	mov.w	ip, #10
 80076be:	9a07      	ldr	r2, [sp, #28]
 80076c0:	4621      	mov	r1, r4
 80076c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076c6:	3b30      	subs	r3, #48	; 0x30
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d94e      	bls.n	800776a <_svfiprintf_r+0x17e>
 80076cc:	b1b0      	cbz	r0, 80076fc <_svfiprintf_r+0x110>
 80076ce:	9207      	str	r2, [sp, #28]
 80076d0:	e014      	b.n	80076fc <_svfiprintf_r+0x110>
 80076d2:	eba0 0308 	sub.w	r3, r0, r8
 80076d6:	fa09 f303 	lsl.w	r3, r9, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	46a2      	mov	sl, r4
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	e7d2      	b.n	8007688 <_svfiprintf_r+0x9c>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9103      	str	r1, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbb      	ittet	lt
 80076ee:	425b      	neglt	r3, r3
 80076f0:	f042 0202 	orrlt.w	r2, r2, #2
 80076f4:	9307      	strge	r3, [sp, #28]
 80076f6:	9307      	strlt	r3, [sp, #28]
 80076f8:	bfb8      	it	lt
 80076fa:	9204      	strlt	r2, [sp, #16]
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007700:	d10c      	bne.n	800771c <_svfiprintf_r+0x130>
 8007702:	7863      	ldrb	r3, [r4, #1]
 8007704:	2b2a      	cmp	r3, #42	; 0x2a
 8007706:	d135      	bne.n	8007774 <_svfiprintf_r+0x188>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	3402      	adds	r4, #2
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	9203      	str	r2, [sp, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfb8      	it	lt
 8007716:	f04f 33ff 	movlt.w	r3, #4294967295
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077e8 <_svfiprintf_r+0x1fc>
 8007720:	2203      	movs	r2, #3
 8007722:	4650      	mov	r0, sl
 8007724:	7821      	ldrb	r1, [r4, #0]
 8007726:	f7ff fe9d 	bl	8007464 <memchr>
 800772a:	b140      	cbz	r0, 800773e <_svfiprintf_r+0x152>
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	eba0 000a 	sub.w	r0, r0, sl
 8007732:	fa03 f000 	lsl.w	r0, r3, r0
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	3401      	adds	r4, #1
 800773a:	4303      	orrs	r3, r0
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	2206      	movs	r2, #6
 8007744:	4825      	ldr	r0, [pc, #148]	; (80077dc <_svfiprintf_r+0x1f0>)
 8007746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800774a:	f7ff fe8b 	bl	8007464 <memchr>
 800774e:	2800      	cmp	r0, #0
 8007750:	d038      	beq.n	80077c4 <_svfiprintf_r+0x1d8>
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <_svfiprintf_r+0x1f4>)
 8007754:	bb1b      	cbnz	r3, 800779e <_svfiprintf_r+0x1b2>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	3307      	adds	r3, #7
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	3308      	adds	r3, #8
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	4433      	add	r3, r6
 8007766:	9309      	str	r3, [sp, #36]	; 0x24
 8007768:	e767      	b.n	800763a <_svfiprintf_r+0x4e>
 800776a:	460c      	mov	r4, r1
 800776c:	2001      	movs	r0, #1
 800776e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007772:	e7a5      	b.n	80076c0 <_svfiprintf_r+0xd4>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 0c0a 	mov.w	ip, #10
 800777a:	4619      	mov	r1, r3
 800777c:	3401      	adds	r4, #1
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4620      	mov	r0, r4
 8007782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007786:	3a30      	subs	r2, #48	; 0x30
 8007788:	2a09      	cmp	r2, #9
 800778a:	d903      	bls.n	8007794 <_svfiprintf_r+0x1a8>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0c5      	beq.n	800771c <_svfiprintf_r+0x130>
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	e7c3      	b.n	800771c <_svfiprintf_r+0x130>
 8007794:	4604      	mov	r4, r0
 8007796:	2301      	movs	r3, #1
 8007798:	fb0c 2101 	mla	r1, ip, r1, r2
 800779c:	e7f0      	b.n	8007780 <_svfiprintf_r+0x194>
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <_svfiprintf_r+0x1f8>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	f3af 8000 	nop.w
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	4606      	mov	r6, r0
 80077b2:	d1d6      	bne.n	8007762 <_svfiprintf_r+0x176>
 80077b4:	89ab      	ldrh	r3, [r5, #12]
 80077b6:	065b      	lsls	r3, r3, #25
 80077b8:	f53f af2c 	bmi.w	8007614 <_svfiprintf_r+0x28>
 80077bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077be:	b01d      	add	sp, #116	; 0x74
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4638      	mov	r0, r7
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <_svfiprintf_r+0x1f8>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	f7ff f854 	bl	800687c <_printf_i>
 80077d4:	e7eb      	b.n	80077ae <_svfiprintf_r+0x1c2>
 80077d6:	bf00      	nop
 80077d8:	080092d8 	.word	0x080092d8
 80077dc:	080092e2 	.word	0x080092e2
 80077e0:	00000000 	.word	0x00000000
 80077e4:	08007535 	.word	0x08007535
 80077e8:	080092de 	.word	0x080092de

080077ec <_raise_r>:
 80077ec:	291f      	cmp	r1, #31
 80077ee:	b538      	push	{r3, r4, r5, lr}
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	d904      	bls.n	8007800 <_raise_r+0x14>
 80077f6:	2316      	movs	r3, #22
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007802:	b112      	cbz	r2, 800780a <_raise_r+0x1e>
 8007804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007808:	b94b      	cbnz	r3, 800781e <_raise_r+0x32>
 800780a:	4620      	mov	r0, r4
 800780c:	f000 f830 	bl	8007870 <_getpid_r>
 8007810:	462a      	mov	r2, r5
 8007812:	4601      	mov	r1, r0
 8007814:	4620      	mov	r0, r4
 8007816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800781a:	f000 b817 	b.w	800784c <_kill_r>
 800781e:	2b01      	cmp	r3, #1
 8007820:	d00a      	beq.n	8007838 <_raise_r+0x4c>
 8007822:	1c59      	adds	r1, r3, #1
 8007824:	d103      	bne.n	800782e <_raise_r+0x42>
 8007826:	2316      	movs	r3, #22
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	2001      	movs	r0, #1
 800782c:	e7e7      	b.n	80077fe <_raise_r+0x12>
 800782e:	2400      	movs	r4, #0
 8007830:	4628      	mov	r0, r5
 8007832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007836:	4798      	blx	r3
 8007838:	2000      	movs	r0, #0
 800783a:	e7e0      	b.n	80077fe <_raise_r+0x12>

0800783c <raise>:
 800783c:	4b02      	ldr	r3, [pc, #8]	; (8007848 <raise+0xc>)
 800783e:	4601      	mov	r1, r0
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f7ff bfd3 	b.w	80077ec <_raise_r>
 8007846:	bf00      	nop
 8007848:	20000038 	.word	0x20000038

0800784c <_kill_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	2300      	movs	r3, #0
 8007850:	4d06      	ldr	r5, [pc, #24]	; (800786c <_kill_r+0x20>)
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	4611      	mov	r1, r2
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	f7fb fc1a 	bl	8003092 <_kill>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d102      	bne.n	8007868 <_kill_r+0x1c>
 8007862:	682b      	ldr	r3, [r5, #0]
 8007864:	b103      	cbz	r3, 8007868 <_kill_r+0x1c>
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	bd38      	pop	{r3, r4, r5, pc}
 800786a:	bf00      	nop
 800786c:	200002e0 	.word	0x200002e0

08007870 <_getpid_r>:
 8007870:	f7fb bc08 	b.w	8003084 <_getpid>

08007874 <__sread>:
 8007874:	b510      	push	{r4, lr}
 8007876:	460c      	mov	r4, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	f000 f8a8 	bl	80079d0 <_read_r>
 8007880:	2800      	cmp	r0, #0
 8007882:	bfab      	itete	ge
 8007884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007886:	89a3      	ldrhlt	r3, [r4, #12]
 8007888:	181b      	addge	r3, r3, r0
 800788a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800788e:	bfac      	ite	ge
 8007890:	6563      	strge	r3, [r4, #84]	; 0x54
 8007892:	81a3      	strhlt	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__swrite>:
 8007896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	461f      	mov	r7, r3
 800789c:	898b      	ldrh	r3, [r1, #12]
 800789e:	4605      	mov	r5, r0
 80078a0:	05db      	lsls	r3, r3, #23
 80078a2:	460c      	mov	r4, r1
 80078a4:	4616      	mov	r6, r2
 80078a6:	d505      	bpl.n	80078b4 <__swrite+0x1e>
 80078a8:	2302      	movs	r3, #2
 80078aa:	2200      	movs	r2, #0
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	f000 f874 	bl	800799c <_lseek_r>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	4632      	mov	r2, r6
 80078b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	4628      	mov	r0, r5
 80078c0:	463b      	mov	r3, r7
 80078c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	f000 b823 	b.w	8007914 <_write_r>

080078ce <__sseek>:
 80078ce:	b510      	push	{r4, lr}
 80078d0:	460c      	mov	r4, r1
 80078d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d6:	f000 f861 	bl	800799c <_lseek_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	bf15      	itete	ne
 80078e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ea:	81a3      	strheq	r3, [r4, #12]
 80078ec:	bf18      	it	ne
 80078ee:	81a3      	strhne	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__sclose>:
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f000 b81f 	b.w	8007938 <_close_r>

080078fa <strchr>:
 80078fa:	4603      	mov	r3, r0
 80078fc:	b2c9      	uxtb	r1, r1
 80078fe:	4618      	mov	r0, r3
 8007900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007904:	b112      	cbz	r2, 800790c <strchr+0x12>
 8007906:	428a      	cmp	r2, r1
 8007908:	d1f9      	bne.n	80078fe <strchr+0x4>
 800790a:	4770      	bx	lr
 800790c:	2900      	cmp	r1, #0
 800790e:	bf18      	it	ne
 8007910:	2000      	movne	r0, #0
 8007912:	4770      	bx	lr

08007914 <_write_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	4608      	mov	r0, r1
 800791a:	4611      	mov	r1, r2
 800791c:	2200      	movs	r2, #0
 800791e:	4d05      	ldr	r5, [pc, #20]	; (8007934 <_write_r+0x20>)
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7fb fbec 	bl	8003100 <_write>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_write_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_write_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	200002e0 	.word	0x200002e0

08007938 <_close_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	2300      	movs	r3, #0
 800793c:	4d05      	ldr	r5, [pc, #20]	; (8007954 <_close_r+0x1c>)
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	f7fb fc24 	bl	8003190 <_close>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_close_r+0x1a>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_close_r+0x1a>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	200002e0 	.word	0x200002e0

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	2300      	movs	r3, #0
 800795c:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_fstat_r+0x20>)
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7fb fc1e 	bl	80031a6 <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	200002e0 	.word	0x200002e0

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	2300      	movs	r3, #0
 8007980:	4d05      	ldr	r5, [pc, #20]	; (8007998 <_isatty_r+0x1c>)
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fb fc1c 	bl	80031c4 <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002e0 	.word	0x200002e0

0800799c <_lseek_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	2200      	movs	r2, #0
 80079a6:	4d05      	ldr	r5, [pc, #20]	; (80079bc <_lseek_r+0x20>)
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7fb fc14 	bl	80031d8 <_lseek>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_lseek_r+0x1e>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_lseek_r+0x1e>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	200002e0 	.word	0x200002e0

080079c0 <_malloc_usable_size_r>:
 80079c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c4:	1f18      	subs	r0, r3, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbc      	itt	lt
 80079ca:	580b      	ldrlt	r3, [r1, r0]
 80079cc:	18c0      	addlt	r0, r0, r3
 80079ce:	4770      	bx	lr

080079d0 <_read_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	2200      	movs	r2, #0
 80079da:	4d05      	ldr	r5, [pc, #20]	; (80079f0 <_read_r+0x20>)
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7fb fb71 	bl	80030c6 <_read>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_read_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_read_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	200002e0 	.word	0x200002e0

080079f4 <atan2>:
 80079f4:	f000 b8b0 	b.w	8007b58 <__ieee754_atan2>

080079f8 <pow>:
 80079f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fc:	461f      	mov	r7, r3
 80079fe:	4680      	mov	r8, r0
 8007a00:	4689      	mov	r9, r1
 8007a02:	4616      	mov	r6, r2
 8007a04:	f000 f97c 	bl	8007d00 <__ieee754_pow>
 8007a08:	4b4d      	ldr	r3, [pc, #308]	; (8007b40 <pow+0x148>)
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a10:	460d      	mov	r5, r1
 8007a12:	3301      	adds	r3, #1
 8007a14:	d015      	beq.n	8007a42 <pow+0x4a>
 8007a16:	4632      	mov	r2, r6
 8007a18:	463b      	mov	r3, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	f7f8 fff5 	bl	8000a0c <__aeabi_dcmpun>
 8007a22:	b970      	cbnz	r0, 8007a42 <pow+0x4a>
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 ffee 	bl	8000a0c <__aeabi_dcmpun>
 8007a30:	2200      	movs	r2, #0
 8007a32:	2300      	movs	r3, #0
 8007a34:	b148      	cbz	r0, 8007a4a <pow+0x52>
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d17b      	bne.n	8007b3a <pow+0x142>
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f8 ffab 	bl	80009a8 <__aeabi_dcmpeq>
 8007a52:	b1e0      	cbz	r0, 8007a8e <pow+0x96>
 8007a54:	2200      	movs	r2, #0
 8007a56:	2300      	movs	r3, #0
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f8 ffa4 	bl	80009a8 <__aeabi_dcmpeq>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d16a      	bne.n	8007b3a <pow+0x142>
 8007a64:	4630      	mov	r0, r6
 8007a66:	4639      	mov	r1, r7
 8007a68:	f001 f91f 	bl	8008caa <finite>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d0e8      	beq.n	8007a42 <pow+0x4a>
 8007a70:	2200      	movs	r2, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f8 ffa0 	bl	80009bc <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d0e0      	beq.n	8007a42 <pow+0x4a>
 8007a80:	f7fe fc3a 	bl	80062f8 <__errno>
 8007a84:	2321      	movs	r3, #33	; 0x21
 8007a86:	2400      	movs	r4, #0
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	4d2e      	ldr	r5, [pc, #184]	; (8007b44 <pow+0x14c>)
 8007a8c:	e7d9      	b.n	8007a42 <pow+0x4a>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f001 f90a 	bl	8008caa <finite>
 8007a96:	bba8      	cbnz	r0, 8007b04 <pow+0x10c>
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	f001 f905 	bl	8008caa <finite>
 8007aa0:	b380      	cbz	r0, 8007b04 <pow+0x10c>
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	f001 f900 	bl	8008caa <finite>
 8007aaa:	b358      	cbz	r0, 8007b04 <pow+0x10c>
 8007aac:	4622      	mov	r2, r4
 8007aae:	462b      	mov	r3, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8007ab8:	b160      	cbz	r0, 8007ad4 <pow+0xdc>
 8007aba:	f7fe fc1d 	bl	80062f8 <__errno>
 8007abe:	2321      	movs	r3, #33	; 0x21
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	6003      	str	r3, [r0, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7f8 fe2f 	bl	800072c <__aeabi_ddiv>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	e7b6      	b.n	8007a42 <pow+0x4a>
 8007ad4:	f7fe fc10 	bl	80062f8 <__errno>
 8007ad8:	2322      	movs	r3, #34	; 0x22
 8007ada:	2200      	movs	r2, #0
 8007adc:	6003      	str	r3, [r0, #0]
 8007ade:	4649      	mov	r1, r9
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	f7f8 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8007ae8:	2400      	movs	r4, #0
 8007aea:	b148      	cbz	r0, 8007b00 <pow+0x108>
 8007aec:	4630      	mov	r0, r6
 8007aee:	4639      	mov	r1, r7
 8007af0:	f001 f8e8 	bl	8008cc4 <rint>
 8007af4:	4632      	mov	r2, r6
 8007af6:	463b      	mov	r3, r7
 8007af8:	f7f8 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0c4      	beq.n	8007a8a <pow+0x92>
 8007b00:	4d11      	ldr	r5, [pc, #68]	; (8007b48 <pow+0x150>)
 8007b02:	e79e      	b.n	8007a42 <pow+0x4a>
 8007b04:	2200      	movs	r2, #0
 8007b06:	2300      	movs	r3, #0
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d096      	beq.n	8007a42 <pow+0x4a>
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f001 f8c7 	bl	8008caa <finite>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d090      	beq.n	8007a42 <pow+0x4a>
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f001 f8c1 	bl	8008caa <finite>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d08a      	beq.n	8007a42 <pow+0x4a>
 8007b2c:	f7fe fbe4 	bl	80062f8 <__errno>
 8007b30:	2322      	movs	r3, #34	; 0x22
 8007b32:	2400      	movs	r4, #0
 8007b34:	2500      	movs	r5, #0
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	e783      	b.n	8007a42 <pow+0x4a>
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	4d03      	ldr	r5, [pc, #12]	; (8007b4c <pow+0x154>)
 8007b3e:	e780      	b.n	8007a42 <pow+0x4a>
 8007b40:	2000009c 	.word	0x2000009c
 8007b44:	fff00000 	.word	0xfff00000
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	3ff00000 	.word	0x3ff00000

08007b50 <atan2f>:
 8007b50:	f000 be98 	b.w	8008884 <__ieee754_atan2f>
 8007b54:	0000      	movs	r0, r0
	...

08007b58 <__ieee754_atan2>:
 8007b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	4699      	mov	r9, r3
 8007b60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b64:	461f      	mov	r7, r3
 8007b66:	f1ca 0300 	rsb	r3, sl, #0
 8007b6a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8007cf8 <__ieee754_atan2+0x1a0>
 8007b6e:	ea43 030a 	orr.w	r3, r3, sl
 8007b72:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007b76:	4573      	cmp	r3, lr
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	d808      	bhi.n	8007b90 <__ieee754_atan2+0x38>
 8007b7e:	4246      	negs	r6, r0
 8007b80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b84:	4306      	orrs	r6, r0
 8007b86:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007b8a:	4576      	cmp	r6, lr
 8007b8c:	468c      	mov	ip, r1
 8007b8e:	d908      	bls.n	8007ba2 <__ieee754_atan2+0x4a>
 8007b90:	4652      	mov	r2, sl
 8007b92:	464b      	mov	r3, r9
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 fae8 	bl	800016c <__adddf3>
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	e019      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007ba2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007ba6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007baa:	ea56 060a 	orrs.w	r6, r6, sl
 8007bae:	d103      	bne.n	8007bb8 <__ieee754_atan2+0x60>
 8007bb0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	f000 beec 	b.w	8008990 <atan>
 8007bb8:	17be      	asrs	r6, r7, #30
 8007bba:	f006 0602 	and.w	r6, r6, #2
 8007bbe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007bc2:	ea53 0100 	orrs.w	r1, r3, r0
 8007bc6:	d10a      	bne.n	8007bde <__ieee754_atan2+0x86>
 8007bc8:	2e02      	cmp	r6, #2
 8007bca:	d067      	beq.n	8007c9c <__ieee754_atan2+0x144>
 8007bcc:	2e03      	cmp	r6, #3
 8007bce:	d102      	bne.n	8007bd6 <__ieee754_atan2+0x7e>
 8007bd0:	a53b      	add	r5, pc, #236	; (adr r5, 8007cc0 <__ieee754_atan2+0x168>)
 8007bd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	ea52 010a 	orrs.w	r1, r2, sl
 8007be2:	d106      	bne.n	8007bf2 <__ieee754_atan2+0x9a>
 8007be4:	f1bc 0f00 	cmp.w	ip, #0
 8007be8:	da63      	bge.n	8007cb2 <__ieee754_atan2+0x15a>
 8007bea:	a537      	add	r5, pc, #220	; (adr r5, 8007cc8 <__ieee754_atan2+0x170>)
 8007bec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bf0:	e7f1      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007bf2:	4572      	cmp	r2, lr
 8007bf4:	d10f      	bne.n	8007c16 <__ieee754_atan2+0xbe>
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	f106 36ff 	add.w	r6, r6, #4294967295
 8007bfc:	d107      	bne.n	8007c0e <__ieee754_atan2+0xb6>
 8007bfe:	2e02      	cmp	r6, #2
 8007c00:	d850      	bhi.n	8007ca4 <__ieee754_atan2+0x14c>
 8007c02:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <__ieee754_atan2+0x198>)
 8007c04:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007c08:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007c0c:	e7e3      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007c0e:	2e02      	cmp	r6, #2
 8007c10:	d84c      	bhi.n	8007cac <__ieee754_atan2+0x154>
 8007c12:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <__ieee754_atan2+0x19c>)
 8007c14:	e7f6      	b.n	8007c04 <__ieee754_atan2+0xac>
 8007c16:	4573      	cmp	r3, lr
 8007c18:	d0e4      	beq.n	8007be4 <__ieee754_atan2+0x8c>
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007c20:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c24:	da20      	bge.n	8007c68 <__ieee754_atan2+0x110>
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	da01      	bge.n	8007c2e <__ieee754_atan2+0xd6>
 8007c2a:	323c      	adds	r2, #60	; 0x3c
 8007c2c:	db20      	blt.n	8007c70 <__ieee754_atan2+0x118>
 8007c2e:	4652      	mov	r2, sl
 8007c30:	464b      	mov	r3, r9
 8007c32:	4620      	mov	r0, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 fd79 	bl	800072c <__aeabi_ddiv>
 8007c3a:	f001 f833 	bl	8008ca4 <fabs>
 8007c3e:	f000 fea7 	bl	8008990 <atan>
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
 8007c46:	2e01      	cmp	r6, #1
 8007c48:	d015      	beq.n	8007c76 <__ieee754_atan2+0x11e>
 8007c4a:	2e02      	cmp	r6, #2
 8007c4c:	d017      	beq.n	8007c7e <__ieee754_atan2+0x126>
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0c1      	beq.n	8007bd6 <__ieee754_atan2+0x7e>
 8007c52:	a31f      	add	r3, pc, #124	; (adr r3, 8007cd0 <__ieee754_atan2+0x178>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fa84 	bl	8000168 <__aeabi_dsub>
 8007c60:	a31d      	add	r3, pc, #116	; (adr r3, 8007cd8 <__ieee754_atan2+0x180>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	e016      	b.n	8007c96 <__ieee754_atan2+0x13e>
 8007c68:	a51d      	add	r5, pc, #116	; (adr r5, 8007ce0 <__ieee754_atan2+0x188>)
 8007c6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c6e:	e7ea      	b.n	8007c46 <__ieee754_atan2+0xee>
 8007c70:	2400      	movs	r4, #0
 8007c72:	2500      	movs	r5, #0
 8007c74:	e7e7      	b.n	8007c46 <__ieee754_atan2+0xee>
 8007c76:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007c7a:	461d      	mov	r5, r3
 8007c7c:	e7ab      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007c7e:	a314      	add	r3, pc, #80	; (adr r3, 8007cd0 <__ieee754_atan2+0x178>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 fa6e 	bl	8000168 <__aeabi_dsub>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	a111      	add	r1, pc, #68	; (adr r1, 8007cd8 <__ieee754_atan2+0x180>)
 8007c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c96:	f7f8 fa67 	bl	8000168 <__aeabi_dsub>
 8007c9a:	e77f      	b.n	8007b9c <__ieee754_atan2+0x44>
 8007c9c:	a50e      	add	r5, pc, #56	; (adr r5, 8007cd8 <__ieee754_atan2+0x180>)
 8007c9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ca2:	e798      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007ca4:	a510      	add	r5, pc, #64	; (adr r5, 8007ce8 <__ieee754_atan2+0x190>)
 8007ca6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007caa:	e794      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007cac:	2400      	movs	r4, #0
 8007cae:	2500      	movs	r5, #0
 8007cb0:	e791      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007cb2:	a50b      	add	r5, pc, #44	; (adr r5, 8007ce0 <__ieee754_atan2+0x188>)
 8007cb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007cb8:	e78d      	b.n	8007bd6 <__ieee754_atan2+0x7e>
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	54442d18 	.word	0x54442d18
 8007cc4:	c00921fb 	.word	0xc00921fb
 8007cc8:	54442d18 	.word	0x54442d18
 8007ccc:	bff921fb 	.word	0xbff921fb
 8007cd0:	33145c07 	.word	0x33145c07
 8007cd4:	3ca1a626 	.word	0x3ca1a626
 8007cd8:	54442d18 	.word	0x54442d18
 8007cdc:	400921fb 	.word	0x400921fb
 8007ce0:	54442d18 	.word	0x54442d18
 8007ce4:	3ff921fb 	.word	0x3ff921fb
 8007ce8:	54442d18 	.word	0x54442d18
 8007cec:	3fe921fb 	.word	0x3fe921fb
 8007cf0:	080094e8 	.word	0x080094e8
 8007cf4:	08009500 	.word	0x08009500
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	00000000 	.word	0x00000000

08007d00 <__ieee754_pow>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	b093      	sub	sp, #76	; 0x4c
 8007d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d0a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8007d0e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007d12:	ea55 0302 	orrs.w	r3, r5, r2
 8007d16:	4607      	mov	r7, r0
 8007d18:	4688      	mov	r8, r1
 8007d1a:	f000 84bf 	beq.w	800869c <__ieee754_pow+0x99c>
 8007d1e:	4b7e      	ldr	r3, [pc, #504]	; (8007f18 <__ieee754_pow+0x218>)
 8007d20:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007d24:	429c      	cmp	r4, r3
 8007d26:	4689      	mov	r9, r1
 8007d28:	4682      	mov	sl, r0
 8007d2a:	dc09      	bgt.n	8007d40 <__ieee754_pow+0x40>
 8007d2c:	d103      	bne.n	8007d36 <__ieee754_pow+0x36>
 8007d2e:	b978      	cbnz	r0, 8007d50 <__ieee754_pow+0x50>
 8007d30:	42a5      	cmp	r5, r4
 8007d32:	dd02      	ble.n	8007d3a <__ieee754_pow+0x3a>
 8007d34:	e00c      	b.n	8007d50 <__ieee754_pow+0x50>
 8007d36:	429d      	cmp	r5, r3
 8007d38:	dc02      	bgt.n	8007d40 <__ieee754_pow+0x40>
 8007d3a:	429d      	cmp	r5, r3
 8007d3c:	d10e      	bne.n	8007d5c <__ieee754_pow+0x5c>
 8007d3e:	b16a      	cbz	r2, 8007d5c <__ieee754_pow+0x5c>
 8007d40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d48:	ea54 030a 	orrs.w	r3, r4, sl
 8007d4c:	f000 84a6 	beq.w	800869c <__ieee754_pow+0x99c>
 8007d50:	4872      	ldr	r0, [pc, #456]	; (8007f1c <__ieee754_pow+0x21c>)
 8007d52:	b013      	add	sp, #76	; 0x4c
 8007d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	f000 bfae 	b.w	8008cb8 <nan>
 8007d5c:	f1b9 0f00 	cmp.w	r9, #0
 8007d60:	da39      	bge.n	8007dd6 <__ieee754_pow+0xd6>
 8007d62:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <__ieee754_pow+0x220>)
 8007d64:	429d      	cmp	r5, r3
 8007d66:	dc54      	bgt.n	8007e12 <__ieee754_pow+0x112>
 8007d68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d6c:	429d      	cmp	r5, r3
 8007d6e:	f340 84a6 	ble.w	80086be <__ieee754_pow+0x9be>
 8007d72:	152b      	asrs	r3, r5, #20
 8007d74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d78:	2b14      	cmp	r3, #20
 8007d7a:	dd0f      	ble.n	8007d9c <__ieee754_pow+0x9c>
 8007d7c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d80:	fa22 f103 	lsr.w	r1, r2, r3
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	f040 8498 	bne.w	80086be <__ieee754_pow+0x9be>
 8007d8e:	f001 0101 	and.w	r1, r1, #1
 8007d92:	f1c1 0302 	rsb	r3, r1, #2
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	b182      	cbz	r2, 8007dbc <__ieee754_pow+0xbc>
 8007d9a:	e05e      	b.n	8007e5a <__ieee754_pow+0x15a>
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d15a      	bne.n	8007e56 <__ieee754_pow+0x156>
 8007da0:	f1c3 0314 	rsb	r3, r3, #20
 8007da4:	fa45 f103 	asr.w	r1, r5, r3
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	f040 8483 	bne.w	80086b8 <__ieee754_pow+0x9b8>
 8007db2:	f001 0101 	and.w	r1, r1, #1
 8007db6:	f1c1 0302 	rsb	r3, r1, #2
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <__ieee754_pow+0x224>)
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	d130      	bne.n	8007e24 <__ieee754_pow+0x124>
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	f280 8474 	bge.w	80086b0 <__ieee754_pow+0x9b0>
 8007dc8:	463a      	mov	r2, r7
 8007dca:	4643      	mov	r3, r8
 8007dcc:	2000      	movs	r0, #0
 8007dce:	4955      	ldr	r1, [pc, #340]	; (8007f24 <__ieee754_pow+0x224>)
 8007dd0:	f7f8 fcac 	bl	800072c <__aeabi_ddiv>
 8007dd4:	e02f      	b.n	8007e36 <__ieee754_pow+0x136>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d13d      	bne.n	8007e5a <__ieee754_pow+0x15a>
 8007dde:	4b4e      	ldr	r3, [pc, #312]	; (8007f18 <__ieee754_pow+0x218>)
 8007de0:	429d      	cmp	r5, r3
 8007de2:	d1eb      	bne.n	8007dbc <__ieee754_pow+0xbc>
 8007de4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007de8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dec:	ea53 030a 	orrs.w	r3, r3, sl
 8007df0:	f000 8454 	beq.w	800869c <__ieee754_pow+0x99c>
 8007df4:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <__ieee754_pow+0x228>)
 8007df6:	429c      	cmp	r4, r3
 8007df8:	dd0d      	ble.n	8007e16 <__ieee754_pow+0x116>
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	f280 8454 	bge.w	80086a8 <__ieee754_pow+0x9a8>
 8007e00:	f04f 0b00 	mov.w	fp, #0
 8007e04:	f04f 0c00 	mov.w	ip, #0
 8007e08:	4658      	mov	r0, fp
 8007e0a:	4661      	mov	r1, ip
 8007e0c:	b013      	add	sp, #76	; 0x4c
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	2302      	movs	r3, #2
 8007e14:	e7e0      	b.n	8007dd8 <__ieee754_pow+0xd8>
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	daf2      	bge.n	8007e00 <__ieee754_pow+0x100>
 8007e1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007e1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007e22:	e7f1      	b.n	8007e08 <__ieee754_pow+0x108>
 8007e24:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007e28:	d108      	bne.n	8007e3c <__ieee754_pow+0x13c>
 8007e2a:	463a      	mov	r2, r7
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	4638      	mov	r0, r7
 8007e30:	4641      	mov	r1, r8
 8007e32:	f7f8 fb51 	bl	80004d8 <__aeabi_dmul>
 8007e36:	4683      	mov	fp, r0
 8007e38:	468c      	mov	ip, r1
 8007e3a:	e7e5      	b.n	8007e08 <__ieee754_pow+0x108>
 8007e3c:	4b3b      	ldr	r3, [pc, #236]	; (8007f2c <__ieee754_pow+0x22c>)
 8007e3e:	429e      	cmp	r6, r3
 8007e40:	d10b      	bne.n	8007e5a <__ieee754_pow+0x15a>
 8007e42:	f1b9 0f00 	cmp.w	r9, #0
 8007e46:	db08      	blt.n	8007e5a <__ieee754_pow+0x15a>
 8007e48:	4638      	mov	r0, r7
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	b013      	add	sp, #76	; 0x4c
 8007e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e52:	f000 bc6b 	b.w	800872c <__ieee754_sqrt>
 8007e56:	2300      	movs	r3, #0
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	f000 ff21 	bl	8008ca4 <fabs>
 8007e62:	4683      	mov	fp, r0
 8007e64:	468c      	mov	ip, r1
 8007e66:	f1ba 0f00 	cmp.w	sl, #0
 8007e6a:	d129      	bne.n	8007ec0 <__ieee754_pow+0x1c0>
 8007e6c:	b124      	cbz	r4, 8007e78 <__ieee754_pow+0x178>
 8007e6e:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <__ieee754_pow+0x224>)
 8007e70:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d123      	bne.n	8007ec0 <__ieee754_pow+0x1c0>
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	da07      	bge.n	8007e8c <__ieee754_pow+0x18c>
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	4663      	mov	r3, ip
 8007e80:	2000      	movs	r0, #0
 8007e82:	4928      	ldr	r1, [pc, #160]	; (8007f24 <__ieee754_pow+0x224>)
 8007e84:	f7f8 fc52 	bl	800072c <__aeabi_ddiv>
 8007e88:	4683      	mov	fp, r0
 8007e8a:	468c      	mov	ip, r1
 8007e8c:	f1b9 0f00 	cmp.w	r9, #0
 8007e90:	daba      	bge.n	8007e08 <__ieee754_pow+0x108>
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e9c:	4323      	orrs	r3, r4
 8007e9e:	d108      	bne.n	8007eb2 <__ieee754_pow+0x1b2>
 8007ea0:	465a      	mov	r2, fp
 8007ea2:	4663      	mov	r3, ip
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	4661      	mov	r1, ip
 8007ea8:	f7f8 f95e 	bl	8000168 <__aeabi_dsub>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	e78e      	b.n	8007dd0 <__ieee754_pow+0xd0>
 8007eb2:	9b00      	ldr	r3, [sp, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d1a7      	bne.n	8007e08 <__ieee754_pow+0x108>
 8007eb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007ebc:	469c      	mov	ip, r3
 8007ebe:	e7a3      	b.n	8007e08 <__ieee754_pow+0x108>
 8007ec0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eca:	9b00      	ldr	r3, [sp, #0]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	d104      	bne.n	8007eda <__ieee754_pow+0x1da>
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4643      	mov	r3, r8
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	e7e6      	b.n	8007ea8 <__ieee754_pow+0x1a8>
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <__ieee754_pow+0x230>)
 8007edc:	429d      	cmp	r5, r3
 8007ede:	f340 80f9 	ble.w	80080d4 <__ieee754_pow+0x3d4>
 8007ee2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <__ieee754_pow+0x228>)
 8007eea:	dd09      	ble.n	8007f00 <__ieee754_pow+0x200>
 8007eec:	429c      	cmp	r4, r3
 8007eee:	dc0c      	bgt.n	8007f0a <__ieee754_pow+0x20a>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	da85      	bge.n	8007e00 <__ieee754_pow+0x100>
 8007ef4:	a306      	add	r3, pc, #24	; (adr r3, 8007f10 <__ieee754_pow+0x210>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	4610      	mov	r0, r2
 8007efc:	4619      	mov	r1, r3
 8007efe:	e798      	b.n	8007e32 <__ieee754_pow+0x132>
 8007f00:	429c      	cmp	r4, r3
 8007f02:	dbf5      	blt.n	8007ef0 <__ieee754_pow+0x1f0>
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <__ieee754_pow+0x224>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	dd14      	ble.n	8007f34 <__ieee754_pow+0x234>
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	dcf2      	bgt.n	8007ef4 <__ieee754_pow+0x1f4>
 8007f0e:	e777      	b.n	8007e00 <__ieee754_pow+0x100>
 8007f10:	8800759c 	.word	0x8800759c
 8007f14:	7e37e43c 	.word	0x7e37e43c
 8007f18:	7ff00000 	.word	0x7ff00000
 8007f1c:	080092d3 	.word	0x080092d3
 8007f20:	433fffff 	.word	0x433fffff
 8007f24:	3ff00000 	.word	0x3ff00000
 8007f28:	3fefffff 	.word	0x3fefffff
 8007f2c:	3fe00000 	.word	0x3fe00000
 8007f30:	41e00000 	.word	0x41e00000
 8007f34:	4661      	mov	r1, ip
 8007f36:	2200      	movs	r2, #0
 8007f38:	4658      	mov	r0, fp
 8007f3a:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <__ieee754_pow+0x3c0>)
 8007f3c:	f7f8 f914 	bl	8000168 <__aeabi_dsub>
 8007f40:	a355      	add	r3, pc, #340	; (adr r3, 8008098 <__ieee754_pow+0x398>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	4604      	mov	r4, r0
 8007f48:	460d      	mov	r5, r1
 8007f4a:	f7f8 fac5 	bl	80004d8 <__aeabi_dmul>
 8007f4e:	a354      	add	r3, pc, #336	; (adr r3, 80080a0 <__ieee754_pow+0x3a0>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	4620      	mov	r0, r4
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7f8 fabc 	bl	80004d8 <__aeabi_dmul>
 8007f60:	2200      	movs	r2, #0
 8007f62:	4682      	mov	sl, r0
 8007f64:	468b      	mov	fp, r1
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4b56      	ldr	r3, [pc, #344]	; (80080c4 <__ieee754_pow+0x3c4>)
 8007f6c:	f7f8 fab4 	bl	80004d8 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	a14c      	add	r1, pc, #304	; (adr r1, 80080a8 <__ieee754_pow+0x3a8>)
 8007f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7a:	f7f8 f8f5 	bl	8000168 <__aeabi_dsub>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	f7f8 faa9 	bl	80004d8 <__aeabi_dmul>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	494e      	ldr	r1, [pc, #312]	; (80080c8 <__ieee754_pow+0x3c8>)
 8007f8e:	f7f8 f8eb 	bl	8000168 <__aeabi_dsub>
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	4680      	mov	r8, r0
 8007f98:	4689      	mov	r9, r1
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	f7f8 fa9b 	bl	80004d8 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4649      	mov	r1, r9
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	a340      	add	r3, pc, #256	; (adr r3, 80080b0 <__ieee754_pow+0x3b0>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 fa90 	bl	80004d8 <__aeabi_dmul>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	f7f8 f8d2 	bl	8000168 <__aeabi_dsub>
 8007fc4:	f04f 0a00 	mov.w	sl, #0
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460d      	mov	r5, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 f8ca 	bl	800016c <__adddf3>
 8007fd8:	4632      	mov	r2, r6
 8007fda:	463b      	mov	r3, r7
 8007fdc:	4650      	mov	r0, sl
 8007fde:	468b      	mov	fp, r1
 8007fe0:	f7f8 f8c2 	bl	8000168 <__aeabi_dsub>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f8bc 	bl	8000168 <__aeabi_dsub>
 8007ff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f04f 0600 	mov.w	r6, #0
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	bf0c      	ite	eq
 8008006:	4b31      	ldreq	r3, [pc, #196]	; (80080cc <__ieee754_pow+0x3cc>)
 8008008:	4b2d      	ldrne	r3, [pc, #180]	; (80080c0 <__ieee754_pow+0x3c0>)
 800800a:	4604      	mov	r4, r0
 800800c:	460d      	mov	r5, r1
 800800e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008012:	e9cd 2300 	strd	r2, r3, [sp]
 8008016:	4632      	mov	r2, r6
 8008018:	463b      	mov	r3, r7
 800801a:	f7f8 f8a5 	bl	8000168 <__aeabi_dsub>
 800801e:	4652      	mov	r2, sl
 8008020:	465b      	mov	r3, fp
 8008022:	f7f8 fa59 	bl	80004d8 <__aeabi_dmul>
 8008026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800802a:	4680      	mov	r8, r0
 800802c:	4689      	mov	r9, r1
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fa51 	bl	80004d8 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4640      	mov	r0, r8
 800803c:	4649      	mov	r1, r9
 800803e:	f7f8 f895 	bl	800016c <__adddf3>
 8008042:	4632      	mov	r2, r6
 8008044:	463b      	mov	r3, r7
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	4650      	mov	r0, sl
 800804c:	4659      	mov	r1, fp
 800804e:	f7f8 fa43 	bl	80004d8 <__aeabi_dmul>
 8008052:	4604      	mov	r4, r0
 8008054:	460d      	mov	r5, r1
 8008056:	460b      	mov	r3, r1
 8008058:	4602      	mov	r2, r0
 800805a:	4649      	mov	r1, r9
 800805c:	4640      	mov	r0, r8
 800805e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008062:	f7f8 f883 	bl	800016c <__adddf3>
 8008066:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <__ieee754_pow+0x3d0>)
 8008068:	4682      	mov	sl, r0
 800806a:	4299      	cmp	r1, r3
 800806c:	460f      	mov	r7, r1
 800806e:	460e      	mov	r6, r1
 8008070:	f340 82ed 	ble.w	800864e <__ieee754_pow+0x94e>
 8008074:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008078:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800807c:	4303      	orrs	r3, r0
 800807e:	f000 81e7 	beq.w	8008450 <__ieee754_pow+0x750>
 8008082:	a30d      	add	r3, pc, #52	; (adr r3, 80080b8 <__ieee754_pow+0x3b8>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800808c:	f7f8 fa24 	bl	80004d8 <__aeabi_dmul>
 8008090:	a309      	add	r3, pc, #36	; (adr r3, 80080b8 <__ieee754_pow+0x3b8>)
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	e6cc      	b.n	8007e32 <__ieee754_pow+0x132>
 8008098:	60000000 	.word	0x60000000
 800809c:	3ff71547 	.word	0x3ff71547
 80080a0:	f85ddf44 	.word	0xf85ddf44
 80080a4:	3e54ae0b 	.word	0x3e54ae0b
 80080a8:	55555555 	.word	0x55555555
 80080ac:	3fd55555 	.word	0x3fd55555
 80080b0:	652b82fe 	.word	0x652b82fe
 80080b4:	3ff71547 	.word	0x3ff71547
 80080b8:	8800759c 	.word	0x8800759c
 80080bc:	7e37e43c 	.word	0x7e37e43c
 80080c0:	3ff00000 	.word	0x3ff00000
 80080c4:	3fd00000 	.word	0x3fd00000
 80080c8:	3fe00000 	.word	0x3fe00000
 80080cc:	bff00000 	.word	0xbff00000
 80080d0:	408fffff 	.word	0x408fffff
 80080d4:	4bd4      	ldr	r3, [pc, #848]	; (8008428 <__ieee754_pow+0x728>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	ea09 0303 	and.w	r3, r9, r3
 80080dc:	b943      	cbnz	r3, 80080f0 <__ieee754_pow+0x3f0>
 80080de:	4658      	mov	r0, fp
 80080e0:	4661      	mov	r1, ip
 80080e2:	4bd2      	ldr	r3, [pc, #840]	; (800842c <__ieee754_pow+0x72c>)
 80080e4:	f7f8 f9f8 	bl	80004d8 <__aeabi_dmul>
 80080e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080ec:	4683      	mov	fp, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	1523      	asrs	r3, r4, #20
 80080f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080f6:	4413      	add	r3, r2
 80080f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080fa:	4bcd      	ldr	r3, [pc, #820]	; (8008430 <__ieee754_pow+0x730>)
 80080fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008100:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008104:	429c      	cmp	r4, r3
 8008106:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800810a:	dd08      	ble.n	800811e <__ieee754_pow+0x41e>
 800810c:	4bc9      	ldr	r3, [pc, #804]	; (8008434 <__ieee754_pow+0x734>)
 800810e:	429c      	cmp	r4, r3
 8008110:	f340 819c 	ble.w	800844c <__ieee754_pow+0x74c>
 8008114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008116:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800811a:	3301      	adds	r3, #1
 800811c:	930b      	str	r3, [sp, #44]	; 0x2c
 800811e:	2600      	movs	r6, #0
 8008120:	00f3      	lsls	r3, r6, #3
 8008122:	930d      	str	r3, [sp, #52]	; 0x34
 8008124:	4bc4      	ldr	r3, [pc, #784]	; (8008438 <__ieee754_pow+0x738>)
 8008126:	4658      	mov	r0, fp
 8008128:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800812c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008130:	4629      	mov	r1, r5
 8008132:	461a      	mov	r2, r3
 8008134:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008138:	4623      	mov	r3, r4
 800813a:	f7f8 f815 	bl	8000168 <__aeabi_dsub>
 800813e:	46da      	mov	sl, fp
 8008140:	462b      	mov	r3, r5
 8008142:	4652      	mov	r2, sl
 8008144:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008148:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800814c:	f7f8 f80e 	bl	800016c <__adddf3>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	2000      	movs	r0, #0
 8008156:	49b9      	ldr	r1, [pc, #740]	; (800843c <__ieee754_pow+0x73c>)
 8008158:	f7f8 fae8 	bl	800072c <__aeabi_ddiv>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008164:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008168:	f7f8 f9b6 	bl	80004d8 <__aeabi_dmul>
 800816c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008170:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008174:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008178:	2300      	movs	r3, #0
 800817a:	2200      	movs	r2, #0
 800817c:	46ab      	mov	fp, r5
 800817e:	106d      	asrs	r5, r5, #1
 8008180:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800818a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800818e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008192:	4640      	mov	r0, r8
 8008194:	4649      	mov	r1, r9
 8008196:	4614      	mov	r4, r2
 8008198:	461d      	mov	r5, r3
 800819a:	f7f8 f99d 	bl	80004d8 <__aeabi_dmul>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081a6:	f7f7 ffdf 	bl	8000168 <__aeabi_dsub>
 80081aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	4620      	mov	r0, r4
 80081b4:	4629      	mov	r1, r5
 80081b6:	f7f7 ffd7 	bl	8000168 <__aeabi_dsub>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4650      	mov	r0, sl
 80081c0:	4659      	mov	r1, fp
 80081c2:	f7f7 ffd1 	bl	8000168 <__aeabi_dsub>
 80081c6:	4642      	mov	r2, r8
 80081c8:	464b      	mov	r3, r9
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4630      	mov	r0, r6
 80081d4:	4639      	mov	r1, r7
 80081d6:	f7f7 ffc7 	bl	8000168 <__aeabi_dsub>
 80081da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081de:	f7f8 f97b 	bl	80004d8 <__aeabi_dmul>
 80081e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081ea:	4610      	mov	r0, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7f8 f973 	bl	80004d8 <__aeabi_dmul>
 80081f2:	a37b      	add	r3, pc, #492	; (adr r3, 80083e0 <__ieee754_pow+0x6e0>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	f7f8 f96c 	bl	80004d8 <__aeabi_dmul>
 8008200:	a379      	add	r3, pc, #484	; (adr r3, 80083e8 <__ieee754_pow+0x6e8>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f7 ffb1 	bl	800016c <__adddf3>
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	f7f8 f963 	bl	80004d8 <__aeabi_dmul>
 8008212:	a377      	add	r3, pc, #476	; (adr r3, 80083f0 <__ieee754_pow+0x6f0>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f7f7 ffa8 	bl	800016c <__adddf3>
 800821c:	4622      	mov	r2, r4
 800821e:	462b      	mov	r3, r5
 8008220:	f7f8 f95a 	bl	80004d8 <__aeabi_dmul>
 8008224:	a374      	add	r3, pc, #464	; (adr r3, 80083f8 <__ieee754_pow+0x6f8>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f7 ff9f 	bl	800016c <__adddf3>
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	a372      	add	r3, pc, #456	; (adr r3, 8008400 <__ieee754_pow+0x700>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f7 ff96 	bl	800016c <__adddf3>
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	f7f8 f948 	bl	80004d8 <__aeabi_dmul>
 8008248:	a36f      	add	r3, pc, #444	; (adr r3, 8008408 <__ieee754_pow+0x708>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f7 ff8d 	bl	800016c <__adddf3>
 8008252:	4622      	mov	r2, r4
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	462b      	mov	r3, r5
 800825a:	4620      	mov	r0, r4
 800825c:	4629      	mov	r1, r5
 800825e:	f7f8 f93b 	bl	80004d8 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	4604      	mov	r4, r0
 8008270:	460d      	mov	r5, r1
 8008272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	f7f7 ff77 	bl	800016c <__adddf3>
 800827e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008282:	f7f8 f929 	bl	80004d8 <__aeabi_dmul>
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	f7f7 ff6f 	bl	800016c <__adddf3>
 800828e:	4642      	mov	r2, r8
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	464b      	mov	r3, r9
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f7f8 f91d 	bl	80004d8 <__aeabi_dmul>
 800829e:	2200      	movs	r2, #0
 80082a0:	4b67      	ldr	r3, [pc, #412]	; (8008440 <__ieee754_pow+0x740>)
 80082a2:	4682      	mov	sl, r0
 80082a4:	468b      	mov	fp, r1
 80082a6:	f7f7 ff61 	bl	800016c <__adddf3>
 80082aa:	4632      	mov	r2, r6
 80082ac:	463b      	mov	r3, r7
 80082ae:	f7f7 ff5d 	bl	800016c <__adddf3>
 80082b2:	9c04      	ldr	r4, [sp, #16]
 80082b4:	460d      	mov	r5, r1
 80082b6:	4622      	mov	r2, r4
 80082b8:	460b      	mov	r3, r1
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	f7f8 f90b 	bl	80004d8 <__aeabi_dmul>
 80082c2:	2200      	movs	r2, #0
 80082c4:	4680      	mov	r8, r0
 80082c6:	4689      	mov	r9, r1
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	4b5c      	ldr	r3, [pc, #368]	; (8008440 <__ieee754_pow+0x740>)
 80082ce:	f7f7 ff4b 	bl	8000168 <__aeabi_dsub>
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	f7f7 ff47 	bl	8000168 <__aeabi_dsub>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 ff41 	bl	8000168 <__aeabi_dsub>
 80082e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ea:	f7f8 f8f5 	bl	80004d8 <__aeabi_dmul>
 80082ee:	4622      	mov	r2, r4
 80082f0:	4606      	mov	r6, r0
 80082f2:	460f      	mov	r7, r1
 80082f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082f8:	462b      	mov	r3, r5
 80082fa:	f7f8 f8ed 	bl	80004d8 <__aeabi_dmul>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f7 ff31 	bl	800016c <__adddf3>
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f7 ff29 	bl	800016c <__adddf3>
 800831a:	a33d      	add	r3, pc, #244	; (adr r3, 8008410 <__ieee754_pow+0x710>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	9c04      	ldr	r4, [sp, #16]
 8008322:	460d      	mov	r5, r1
 8008324:	4620      	mov	r0, r4
 8008326:	f7f8 f8d7 	bl	80004d8 <__aeabi_dmul>
 800832a:	4642      	mov	r2, r8
 800832c:	464b      	mov	r3, r9
 800832e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f7f7 ff17 	bl	8000168 <__aeabi_dsub>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4630      	mov	r0, r6
 8008340:	4639      	mov	r1, r7
 8008342:	f7f7 ff11 	bl	8000168 <__aeabi_dsub>
 8008346:	a334      	add	r3, pc, #208	; (adr r3, 8008418 <__ieee754_pow+0x718>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 f8c4 	bl	80004d8 <__aeabi_dmul>
 8008350:	a333      	add	r3, pc, #204	; (adr r3, 8008420 <__ieee754_pow+0x720>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	4606      	mov	r6, r0
 8008358:	460f      	mov	r7, r1
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f7f8 f8bb 	bl	80004d8 <__aeabi_dmul>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f7 feff 	bl	800016c <__adddf3>
 800836e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008370:	4b34      	ldr	r3, [pc, #208]	; (8008444 <__ieee754_pow+0x744>)
 8008372:	4413      	add	r3, r2
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 fef8 	bl	800016c <__adddf3>
 800837c:	4680      	mov	r8, r0
 800837e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008380:	4689      	mov	r9, r1
 8008382:	f7f8 f83f 	bl	8000404 <__aeabi_i2d>
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800838c:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <__ieee754_pow+0x748>)
 800838e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008392:	4413      	add	r3, r2
 8008394:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	f7f7 fee6 	bl	800016c <__adddf3>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	f7f7 fee2 	bl	800016c <__adddf3>
 80083a8:	4622      	mov	r2, r4
 80083aa:	462b      	mov	r3, r5
 80083ac:	f7f7 fede 	bl	800016c <__adddf3>
 80083b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80083b4:	4622      	mov	r2, r4
 80083b6:	462b      	mov	r3, r5
 80083b8:	4650      	mov	r0, sl
 80083ba:	468b      	mov	fp, r1
 80083bc:	f7f7 fed4 	bl	8000168 <__aeabi_dsub>
 80083c0:	4632      	mov	r2, r6
 80083c2:	463b      	mov	r3, r7
 80083c4:	f7f7 fed0 	bl	8000168 <__aeabi_dsub>
 80083c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083cc:	f7f7 fecc 	bl	8000168 <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	e608      	b.n	8007fec <__ieee754_pow+0x2ec>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	4a454eef 	.word	0x4a454eef
 80083e4:	3fca7e28 	.word	0x3fca7e28
 80083e8:	93c9db65 	.word	0x93c9db65
 80083ec:	3fcd864a 	.word	0x3fcd864a
 80083f0:	a91d4101 	.word	0xa91d4101
 80083f4:	3fd17460 	.word	0x3fd17460
 80083f8:	518f264d 	.word	0x518f264d
 80083fc:	3fd55555 	.word	0x3fd55555
 8008400:	db6fabff 	.word	0xdb6fabff
 8008404:	3fdb6db6 	.word	0x3fdb6db6
 8008408:	33333303 	.word	0x33333303
 800840c:	3fe33333 	.word	0x3fe33333
 8008410:	e0000000 	.word	0xe0000000
 8008414:	3feec709 	.word	0x3feec709
 8008418:	dc3a03fd 	.word	0xdc3a03fd
 800841c:	3feec709 	.word	0x3feec709
 8008420:	145b01f5 	.word	0x145b01f5
 8008424:	be3e2fe0 	.word	0xbe3e2fe0
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	43400000 	.word	0x43400000
 8008430:	0003988e 	.word	0x0003988e
 8008434:	000bb679 	.word	0x000bb679
 8008438:	08009518 	.word	0x08009518
 800843c:	3ff00000 	.word	0x3ff00000
 8008440:	40080000 	.word	0x40080000
 8008444:	08009538 	.word	0x08009538
 8008448:	08009528 	.word	0x08009528
 800844c:	2601      	movs	r6, #1
 800844e:	e667      	b.n	8008120 <__ieee754_pow+0x420>
 8008450:	a39d      	add	r3, pc, #628	; (adr r3, 80086c8 <__ieee754_pow+0x9c8>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f7 fe87 	bl	800016c <__adddf3>
 800845e:	4622      	mov	r2, r4
 8008460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008464:	462b      	mov	r3, r5
 8008466:	4650      	mov	r0, sl
 8008468:	4639      	mov	r1, r7
 800846a:	f7f7 fe7d 	bl	8000168 <__aeabi_dsub>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008476:	f7f8 fabf 	bl	80009f8 <__aeabi_dcmpgt>
 800847a:	2800      	cmp	r0, #0
 800847c:	f47f ae01 	bne.w	8008082 <__ieee754_pow+0x382>
 8008480:	4aa5      	ldr	r2, [pc, #660]	; (8008718 <__ieee754_pow+0xa18>)
 8008482:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008486:	4293      	cmp	r3, r2
 8008488:	f340 8103 	ble.w	8008692 <__ieee754_pow+0x992>
 800848c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008490:	2000      	movs	r0, #0
 8008492:	151b      	asrs	r3, r3, #20
 8008494:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008498:	fa4a f303 	asr.w	r3, sl, r3
 800849c:	4433      	add	r3, r6
 800849e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80084a2:	4f9e      	ldr	r7, [pc, #632]	; (800871c <__ieee754_pow+0xa1c>)
 80084a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80084a8:	4117      	asrs	r7, r2
 80084aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80084ae:	ea23 0107 	bic.w	r1, r3, r7
 80084b2:	f1c2 0214 	rsb	r2, r2, #20
 80084b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80084ba:	460b      	mov	r3, r1
 80084bc:	fa4a fa02 	asr.w	sl, sl, r2
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	4602      	mov	r2, r0
 80084c4:	4629      	mov	r1, r5
 80084c6:	4620      	mov	r0, r4
 80084c8:	bfb8      	it	lt
 80084ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80084ce:	f7f7 fe4b 	bl	8000168 <__aeabi_dsub>
 80084d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084da:	2400      	movs	r4, #0
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	f7f7 fe44 	bl	800016c <__adddf3>
 80084e4:	a37a      	add	r3, pc, #488	; (adr r3, 80086d0 <__ieee754_pow+0x9d0>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	4620      	mov	r0, r4
 80084ec:	460d      	mov	r5, r1
 80084ee:	f7f7 fff3 	bl	80004d8 <__aeabi_dmul>
 80084f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f6:	4606      	mov	r6, r0
 80084f8:	460f      	mov	r7, r1
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f7 fe33 	bl	8000168 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4640      	mov	r0, r8
 8008508:	4649      	mov	r1, r9
 800850a:	f7f7 fe2d 	bl	8000168 <__aeabi_dsub>
 800850e:	a372      	add	r3, pc, #456	; (adr r3, 80086d8 <__ieee754_pow+0x9d8>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 ffe0 	bl	80004d8 <__aeabi_dmul>
 8008518:	a371      	add	r3, pc, #452	; (adr r3, 80086e0 <__ieee754_pow+0x9e0>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	4680      	mov	r8, r0
 8008520:	4689      	mov	r9, r1
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	f7f7 ffd7 	bl	80004d8 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f7 fe1b 	bl	800016c <__adddf3>
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f7 fe13 	bl	800016c <__adddf3>
 8008546:	4632      	mov	r2, r6
 8008548:	463b      	mov	r3, r7
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	f7f7 fe0b 	bl	8000168 <__aeabi_dsub>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fe05 	bl	8000168 <__aeabi_dsub>
 800855e:	4642      	mov	r2, r8
 8008560:	4606      	mov	r6, r0
 8008562:	460f      	mov	r7, r1
 8008564:	464b      	mov	r3, r9
 8008566:	4640      	mov	r0, r8
 8008568:	4649      	mov	r1, r9
 800856a:	f7f7 ffb5 	bl	80004d8 <__aeabi_dmul>
 800856e:	a35e      	add	r3, pc, #376	; (adr r3, 80086e8 <__ieee754_pow+0x9e8>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	f7f7 ffae 	bl	80004d8 <__aeabi_dmul>
 800857c:	a35c      	add	r3, pc, #368	; (adr r3, 80086f0 <__ieee754_pow+0x9f0>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fdf1 	bl	8000168 <__aeabi_dsub>
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	f7f7 ffa5 	bl	80004d8 <__aeabi_dmul>
 800858e:	a35a      	add	r3, pc, #360	; (adr r3, 80086f8 <__ieee754_pow+0x9f8>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 fdea 	bl	800016c <__adddf3>
 8008598:	4622      	mov	r2, r4
 800859a:	462b      	mov	r3, r5
 800859c:	f7f7 ff9c 	bl	80004d8 <__aeabi_dmul>
 80085a0:	a357      	add	r3, pc, #348	; (adr r3, 8008700 <__ieee754_pow+0xa00>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 fddf 	bl	8000168 <__aeabi_dsub>
 80085aa:	4622      	mov	r2, r4
 80085ac:	462b      	mov	r3, r5
 80085ae:	f7f7 ff93 	bl	80004d8 <__aeabi_dmul>
 80085b2:	a355      	add	r3, pc, #340	; (adr r3, 8008708 <__ieee754_pow+0xa08>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 fdd8 	bl	800016c <__adddf3>
 80085bc:	4622      	mov	r2, r4
 80085be:	462b      	mov	r3, r5
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f7 fdcc 	bl	8000168 <__aeabi_dsub>
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f7 ff7c 	bl	80004d8 <__aeabi_dmul>
 80085e0:	2200      	movs	r2, #0
 80085e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f7 fdbb 	bl	8000168 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fa:	f7f8 f897 	bl	800072c <__aeabi_ddiv>
 80085fe:	4632      	mov	r2, r6
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	463b      	mov	r3, r7
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f7 ff65 	bl	80004d8 <__aeabi_dmul>
 800860e:	4632      	mov	r2, r6
 8008610:	463b      	mov	r3, r7
 8008612:	f7f7 fdab 	bl	800016c <__adddf3>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f7f7 fda3 	bl	8000168 <__aeabi_dsub>
 8008622:	4642      	mov	r2, r8
 8008624:	464b      	mov	r3, r9
 8008626:	f7f7 fd9f 	bl	8000168 <__aeabi_dsub>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	2000      	movs	r0, #0
 8008630:	493b      	ldr	r1, [pc, #236]	; (8008720 <__ieee754_pow+0xa20>)
 8008632:	f7f7 fd99 	bl	8000168 <__aeabi_dsub>
 8008636:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800863a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800863e:	da2b      	bge.n	8008698 <__ieee754_pow+0x998>
 8008640:	4652      	mov	r2, sl
 8008642:	f000 fbc9 	bl	8008dd8 <scalbn>
 8008646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800864a:	f7ff bbf2 	b.w	8007e32 <__ieee754_pow+0x132>
 800864e:	4b35      	ldr	r3, [pc, #212]	; (8008724 <__ieee754_pow+0xa24>)
 8008650:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008654:	429f      	cmp	r7, r3
 8008656:	f77f af13 	ble.w	8008480 <__ieee754_pow+0x780>
 800865a:	4b33      	ldr	r3, [pc, #204]	; (8008728 <__ieee754_pow+0xa28>)
 800865c:	440b      	add	r3, r1
 800865e:	4303      	orrs	r3, r0
 8008660:	d00b      	beq.n	800867a <__ieee754_pow+0x97a>
 8008662:	a32b      	add	r3, pc, #172	; (adr r3, 8008710 <__ieee754_pow+0xa10>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866c:	f7f7 ff34 	bl	80004d8 <__aeabi_dmul>
 8008670:	a327      	add	r3, pc, #156	; (adr r3, 8008710 <__ieee754_pow+0xa10>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7ff bbdc 	b.w	8007e32 <__ieee754_pow+0x132>
 800867a:	4622      	mov	r2, r4
 800867c:	462b      	mov	r3, r5
 800867e:	f7f7 fd73 	bl	8000168 <__aeabi_dsub>
 8008682:	4642      	mov	r2, r8
 8008684:	464b      	mov	r3, r9
 8008686:	f7f8 f9ad 	bl	80009e4 <__aeabi_dcmpge>
 800868a:	2800      	cmp	r0, #0
 800868c:	f43f aef8 	beq.w	8008480 <__ieee754_pow+0x780>
 8008690:	e7e7      	b.n	8008662 <__ieee754_pow+0x962>
 8008692:	f04f 0a00 	mov.w	sl, #0
 8008696:	e71e      	b.n	80084d6 <__ieee754_pow+0x7d6>
 8008698:	4621      	mov	r1, r4
 800869a:	e7d4      	b.n	8008646 <__ieee754_pow+0x946>
 800869c:	f04f 0b00 	mov.w	fp, #0
 80086a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008720 <__ieee754_pow+0xa20>
 80086a4:	f7ff bbb0 	b.w	8007e08 <__ieee754_pow+0x108>
 80086a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80086ac:	f7ff bbac 	b.w	8007e08 <__ieee754_pow+0x108>
 80086b0:	4638      	mov	r0, r7
 80086b2:	4641      	mov	r1, r8
 80086b4:	f7ff bbbf 	b.w	8007e36 <__ieee754_pow+0x136>
 80086b8:	9200      	str	r2, [sp, #0]
 80086ba:	f7ff bb7f 	b.w	8007dbc <__ieee754_pow+0xbc>
 80086be:	2300      	movs	r3, #0
 80086c0:	f7ff bb69 	b.w	8007d96 <__ieee754_pow+0x96>
 80086c4:	f3af 8000 	nop.w
 80086c8:	652b82fe 	.word	0x652b82fe
 80086cc:	3c971547 	.word	0x3c971547
 80086d0:	00000000 	.word	0x00000000
 80086d4:	3fe62e43 	.word	0x3fe62e43
 80086d8:	fefa39ef 	.word	0xfefa39ef
 80086dc:	3fe62e42 	.word	0x3fe62e42
 80086e0:	0ca86c39 	.word	0x0ca86c39
 80086e4:	be205c61 	.word	0xbe205c61
 80086e8:	72bea4d0 	.word	0x72bea4d0
 80086ec:	3e663769 	.word	0x3e663769
 80086f0:	c5d26bf1 	.word	0xc5d26bf1
 80086f4:	3ebbbd41 	.word	0x3ebbbd41
 80086f8:	af25de2c 	.word	0xaf25de2c
 80086fc:	3f11566a 	.word	0x3f11566a
 8008700:	16bebd93 	.word	0x16bebd93
 8008704:	3f66c16c 	.word	0x3f66c16c
 8008708:	5555553e 	.word	0x5555553e
 800870c:	3fc55555 	.word	0x3fc55555
 8008710:	c2f8f359 	.word	0xc2f8f359
 8008714:	01a56e1f 	.word	0x01a56e1f
 8008718:	3fe00000 	.word	0x3fe00000
 800871c:	000fffff 	.word	0x000fffff
 8008720:	3ff00000 	.word	0x3ff00000
 8008724:	4090cbff 	.word	0x4090cbff
 8008728:	3f6f3400 	.word	0x3f6f3400

0800872c <__ieee754_sqrt>:
 800872c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008880 <__ieee754_sqrt+0x154>
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	ea3c 0c01 	bics.w	ip, ip, r1
 8008738:	460b      	mov	r3, r1
 800873a:	4606      	mov	r6, r0
 800873c:	460d      	mov	r5, r1
 800873e:	460a      	mov	r2, r1
 8008740:	4607      	mov	r7, r0
 8008742:	4604      	mov	r4, r0
 8008744:	d10e      	bne.n	8008764 <__ieee754_sqrt+0x38>
 8008746:	4602      	mov	r2, r0
 8008748:	f7f7 fec6 	bl	80004d8 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4630      	mov	r0, r6
 8008752:	4629      	mov	r1, r5
 8008754:	f7f7 fd0a 	bl	800016c <__adddf3>
 8008758:	4606      	mov	r6, r0
 800875a:	460d      	mov	r5, r1
 800875c:	4630      	mov	r0, r6
 800875e:	4629      	mov	r1, r5
 8008760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008764:	2900      	cmp	r1, #0
 8008766:	dc0d      	bgt.n	8008784 <__ieee754_sqrt+0x58>
 8008768:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800876c:	ea5c 0707 	orrs.w	r7, ip, r7
 8008770:	d0f4      	beq.n	800875c <__ieee754_sqrt+0x30>
 8008772:	b139      	cbz	r1, 8008784 <__ieee754_sqrt+0x58>
 8008774:	4602      	mov	r2, r0
 8008776:	f7f7 fcf7 	bl	8000168 <__aeabi_dsub>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	f7f7 ffd5 	bl	800072c <__aeabi_ddiv>
 8008782:	e7e9      	b.n	8008758 <__ieee754_sqrt+0x2c>
 8008784:	1512      	asrs	r2, r2, #20
 8008786:	d074      	beq.n	8008872 <__ieee754_sqrt+0x146>
 8008788:	2000      	movs	r0, #0
 800878a:	07d5      	lsls	r5, r2, #31
 800878c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008790:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008794:	bf5e      	ittt	pl
 8008796:	0fe3      	lsrpl	r3, r4, #31
 8008798:	0064      	lslpl	r4, r4, #1
 800879a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800879e:	0fe3      	lsrs	r3, r4, #31
 80087a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80087a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80087a8:	2516      	movs	r5, #22
 80087aa:	4601      	mov	r1, r0
 80087ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087b0:	1076      	asrs	r6, r6, #1
 80087b2:	0064      	lsls	r4, r4, #1
 80087b4:	188f      	adds	r7, r1, r2
 80087b6:	429f      	cmp	r7, r3
 80087b8:	bfde      	ittt	le
 80087ba:	1bdb      	suble	r3, r3, r7
 80087bc:	18b9      	addle	r1, r7, r2
 80087be:	1880      	addle	r0, r0, r2
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	3d01      	subs	r5, #1
 80087c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80087c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80087cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80087d0:	d1f0      	bne.n	80087b4 <__ieee754_sqrt+0x88>
 80087d2:	462a      	mov	r2, r5
 80087d4:	f04f 0e20 	mov.w	lr, #32
 80087d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80087dc:	428b      	cmp	r3, r1
 80087de:	eb07 0c05 	add.w	ip, r7, r5
 80087e2:	dc02      	bgt.n	80087ea <__ieee754_sqrt+0xbe>
 80087e4:	d113      	bne.n	800880e <__ieee754_sqrt+0xe2>
 80087e6:	45a4      	cmp	ip, r4
 80087e8:	d811      	bhi.n	800880e <__ieee754_sqrt+0xe2>
 80087ea:	f1bc 0f00 	cmp.w	ip, #0
 80087ee:	eb0c 0507 	add.w	r5, ip, r7
 80087f2:	da43      	bge.n	800887c <__ieee754_sqrt+0x150>
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	db41      	blt.n	800887c <__ieee754_sqrt+0x150>
 80087f8:	f101 0801 	add.w	r8, r1, #1
 80087fc:	1a5b      	subs	r3, r3, r1
 80087fe:	4641      	mov	r1, r8
 8008800:	45a4      	cmp	ip, r4
 8008802:	bf88      	it	hi
 8008804:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008808:	eba4 040c 	sub.w	r4, r4, ip
 800880c:	443a      	add	r2, r7
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	f1be 0e01 	subs.w	lr, lr, #1
 8008814:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008818:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800881c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008820:	d1dc      	bne.n	80087dc <__ieee754_sqrt+0xb0>
 8008822:	4323      	orrs	r3, r4
 8008824:	d006      	beq.n	8008834 <__ieee754_sqrt+0x108>
 8008826:	1c54      	adds	r4, r2, #1
 8008828:	bf0b      	itete	eq
 800882a:	4672      	moveq	r2, lr
 800882c:	3201      	addne	r2, #1
 800882e:	3001      	addeq	r0, #1
 8008830:	f022 0201 	bicne.w	r2, r2, #1
 8008834:	1043      	asrs	r3, r0, #1
 8008836:	07c1      	lsls	r1, r0, #31
 8008838:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800883c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008840:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008844:	bf48      	it	mi
 8008846:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800884a:	4610      	mov	r0, r2
 800884c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008850:	e782      	b.n	8008758 <__ieee754_sqrt+0x2c>
 8008852:	0ae3      	lsrs	r3, r4, #11
 8008854:	3915      	subs	r1, #21
 8008856:	0564      	lsls	r4, r4, #21
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0fa      	beq.n	8008852 <__ieee754_sqrt+0x126>
 800885c:	02de      	lsls	r6, r3, #11
 800885e:	d50a      	bpl.n	8008876 <__ieee754_sqrt+0x14a>
 8008860:	f1c2 0020 	rsb	r0, r2, #32
 8008864:	fa24 f000 	lsr.w	r0, r4, r0
 8008868:	1e55      	subs	r5, r2, #1
 800886a:	4094      	lsls	r4, r2
 800886c:	4303      	orrs	r3, r0
 800886e:	1b4a      	subs	r2, r1, r5
 8008870:	e78a      	b.n	8008788 <__ieee754_sqrt+0x5c>
 8008872:	4611      	mov	r1, r2
 8008874:	e7f0      	b.n	8008858 <__ieee754_sqrt+0x12c>
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	3201      	adds	r2, #1
 800887a:	e7ef      	b.n	800885c <__ieee754_sqrt+0x130>
 800887c:	4688      	mov	r8, r1
 800887e:	e7bd      	b.n	80087fc <__ieee754_sqrt+0xd0>
 8008880:	7ff00000 	.word	0x7ff00000

08008884 <__ieee754_atan2f>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800888a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800888e:	4603      	mov	r3, r0
 8008890:	dc05      	bgt.n	800889e <__ieee754_atan2f+0x1a>
 8008892:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008896:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800889a:	4607      	mov	r7, r0
 800889c:	dd04      	ble.n	80088a8 <__ieee754_atan2f+0x24>
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f8 f968 	bl	8000b74 <__addsf3>
 80088a4:	4603      	mov	r3, r0
 80088a6:	e011      	b.n	80088cc <__ieee754_atan2f+0x48>
 80088a8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80088ac:	d103      	bne.n	80088b6 <__ieee754_atan2f+0x32>
 80088ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088b2:	f000 bb17 	b.w	8008ee4 <atanf>
 80088b6:	178c      	asrs	r4, r1, #30
 80088b8:	f004 0402 	and.w	r4, r4, #2
 80088bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80088c0:	b932      	cbnz	r2, 80088d0 <__ieee754_atan2f+0x4c>
 80088c2:	2c02      	cmp	r4, #2
 80088c4:	d04c      	beq.n	8008960 <__ieee754_atan2f+0xdc>
 80088c6:	2c03      	cmp	r4, #3
 80088c8:	d100      	bne.n	80088cc <__ieee754_atan2f+0x48>
 80088ca:	4b29      	ldr	r3, [pc, #164]	; (8008970 <__ieee754_atan2f+0xec>)
 80088cc:	4618      	mov	r0, r3
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d0:	b91e      	cbnz	r6, 80088da <__ieee754_atan2f+0x56>
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	da4a      	bge.n	800896c <__ieee754_atan2f+0xe8>
 80088d6:	4b27      	ldr	r3, [pc, #156]	; (8008974 <__ieee754_atan2f+0xf0>)
 80088d8:	e7f8      	b.n	80088cc <__ieee754_atan2f+0x48>
 80088da:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80088de:	d10e      	bne.n	80088fe <__ieee754_atan2f+0x7a>
 80088e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80088e4:	f104 34ff 	add.w	r4, r4, #4294967295
 80088e8:	d105      	bne.n	80088f6 <__ieee754_atan2f+0x72>
 80088ea:	2c02      	cmp	r4, #2
 80088ec:	d83a      	bhi.n	8008964 <__ieee754_atan2f+0xe0>
 80088ee:	4b22      	ldr	r3, [pc, #136]	; (8008978 <__ieee754_atan2f+0xf4>)
 80088f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088f4:	e7ea      	b.n	80088cc <__ieee754_atan2f+0x48>
 80088f6:	2c02      	cmp	r4, #2
 80088f8:	d836      	bhi.n	8008968 <__ieee754_atan2f+0xe4>
 80088fa:	4b20      	ldr	r3, [pc, #128]	; (800897c <__ieee754_atan2f+0xf8>)
 80088fc:	e7f8      	b.n	80088f0 <__ieee754_atan2f+0x6c>
 80088fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008902:	d0e6      	beq.n	80088d2 <__ieee754_atan2f+0x4e>
 8008904:	1b92      	subs	r2, r2, r6
 8008906:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800890a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800890e:	da17      	bge.n	8008940 <__ieee754_atan2f+0xbc>
 8008910:	2900      	cmp	r1, #0
 8008912:	da01      	bge.n	8008918 <__ieee754_atan2f+0x94>
 8008914:	303c      	adds	r0, #60	; 0x3c
 8008916:	db15      	blt.n	8008944 <__ieee754_atan2f+0xc0>
 8008918:	4618      	mov	r0, r3
 800891a:	f7f8 fae7 	bl	8000eec <__aeabi_fdiv>
 800891e:	f000 fbed 	bl	80090fc <fabsf>
 8008922:	f000 fadf 	bl	8008ee4 <atanf>
 8008926:	4603      	mov	r3, r0
 8008928:	2c01      	cmp	r4, #1
 800892a:	d00d      	beq.n	8008948 <__ieee754_atan2f+0xc4>
 800892c:	2c02      	cmp	r4, #2
 800892e:	d00e      	beq.n	800894e <__ieee754_atan2f+0xca>
 8008930:	2c00      	cmp	r4, #0
 8008932:	d0cb      	beq.n	80088cc <__ieee754_atan2f+0x48>
 8008934:	4912      	ldr	r1, [pc, #72]	; (8008980 <__ieee754_atan2f+0xfc>)
 8008936:	4618      	mov	r0, r3
 8008938:	f7f8 f91c 	bl	8000b74 <__addsf3>
 800893c:	4911      	ldr	r1, [pc, #68]	; (8008984 <__ieee754_atan2f+0x100>)
 800893e:	e00c      	b.n	800895a <__ieee754_atan2f+0xd6>
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <__ieee754_atan2f+0x104>)
 8008942:	e7f1      	b.n	8008928 <__ieee754_atan2f+0xa4>
 8008944:	2300      	movs	r3, #0
 8008946:	e7ef      	b.n	8008928 <__ieee754_atan2f+0xa4>
 8008948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800894c:	e7be      	b.n	80088cc <__ieee754_atan2f+0x48>
 800894e:	490c      	ldr	r1, [pc, #48]	; (8008980 <__ieee754_atan2f+0xfc>)
 8008950:	4618      	mov	r0, r3
 8008952:	f7f8 f90f 	bl	8000b74 <__addsf3>
 8008956:	4601      	mov	r1, r0
 8008958:	480a      	ldr	r0, [pc, #40]	; (8008984 <__ieee754_atan2f+0x100>)
 800895a:	f7f8 f909 	bl	8000b70 <__aeabi_fsub>
 800895e:	e7a1      	b.n	80088a4 <__ieee754_atan2f+0x20>
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <__ieee754_atan2f+0x100>)
 8008962:	e7b3      	b.n	80088cc <__ieee754_atan2f+0x48>
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <__ieee754_atan2f+0x108>)
 8008966:	e7b1      	b.n	80088cc <__ieee754_atan2f+0x48>
 8008968:	2300      	movs	r3, #0
 800896a:	e7af      	b.n	80088cc <__ieee754_atan2f+0x48>
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <__ieee754_atan2f+0x104>)
 800896e:	e7ad      	b.n	80088cc <__ieee754_atan2f+0x48>
 8008970:	c0490fdb 	.word	0xc0490fdb
 8008974:	bfc90fdb 	.word	0xbfc90fdb
 8008978:	08009548 	.word	0x08009548
 800897c:	08009554 	.word	0x08009554
 8008980:	33bbbd2e 	.word	0x33bbbd2e
 8008984:	40490fdb 	.word	0x40490fdb
 8008988:	3fc90fdb 	.word	0x3fc90fdb
 800898c:	3f490fdb 	.word	0x3f490fdb

08008990 <atan>:
 8008990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	4bb6      	ldr	r3, [pc, #728]	; (8008c70 <atan+0x2e0>)
 8008996:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800899a:	429e      	cmp	r6, r3
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	468b      	mov	fp, r1
 80089a2:	dd17      	ble.n	80089d4 <atan+0x44>
 80089a4:	4bb3      	ldr	r3, [pc, #716]	; (8008c74 <atan+0x2e4>)
 80089a6:	429e      	cmp	r6, r3
 80089a8:	dc01      	bgt.n	80089ae <atan+0x1e>
 80089aa:	d109      	bne.n	80089c0 <atan+0x30>
 80089ac:	b140      	cbz	r0, 80089c0 <atan+0x30>
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fbd9 	bl	800016c <__adddf3>
 80089ba:	4604      	mov	r4, r0
 80089bc:	460d      	mov	r5, r1
 80089be:	e005      	b.n	80089cc <atan+0x3c>
 80089c0:	f1bb 0f00 	cmp.w	fp, #0
 80089c4:	4cac      	ldr	r4, [pc, #688]	; (8008c78 <atan+0x2e8>)
 80089c6:	f300 8121 	bgt.w	8008c0c <atan+0x27c>
 80089ca:	4dac      	ldr	r5, [pc, #688]	; (8008c7c <atan+0x2ec>)
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	4baa      	ldr	r3, [pc, #680]	; (8008c80 <atan+0x2f0>)
 80089d6:	429e      	cmp	r6, r3
 80089d8:	dc11      	bgt.n	80089fe <atan+0x6e>
 80089da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80089de:	429e      	cmp	r6, r3
 80089e0:	dc0a      	bgt.n	80089f8 <atan+0x68>
 80089e2:	a38b      	add	r3, pc, #556	; (adr r3, 8008c10 <atan+0x280>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fbc0 	bl	800016c <__adddf3>
 80089ec:	2200      	movs	r2, #0
 80089ee:	4ba5      	ldr	r3, [pc, #660]	; (8008c84 <atan+0x2f4>)
 80089f0:	f7f8 f802 	bl	80009f8 <__aeabi_dcmpgt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d1e9      	bne.n	80089cc <atan+0x3c>
 80089f8:	f04f 3aff 	mov.w	sl, #4294967295
 80089fc:	e027      	b.n	8008a4e <atan+0xbe>
 80089fe:	f000 f951 	bl	8008ca4 <fabs>
 8008a02:	4ba1      	ldr	r3, [pc, #644]	; (8008c88 <atan+0x2f8>)
 8008a04:	4604      	mov	r4, r0
 8008a06:	429e      	cmp	r6, r3
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f300 80b8 	bgt.w	8008b7e <atan+0x1ee>
 8008a0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008a12:	429e      	cmp	r6, r3
 8008a14:	f300 809c 	bgt.w	8008b50 <atan+0x1c0>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	f7f7 fba6 	bl	800016c <__adddf3>
 8008a20:	2200      	movs	r2, #0
 8008a22:	4b98      	ldr	r3, [pc, #608]	; (8008c84 <atan+0x2f4>)
 8008a24:	f7f7 fba0 	bl	8000168 <__aeabi_dsub>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a32:	4620      	mov	r0, r4
 8008a34:	4629      	mov	r1, r5
 8008a36:	f7f7 fb99 	bl	800016c <__adddf3>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f7 fe73 	bl	800072c <__aeabi_ddiv>
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7f7 fd3f 	bl	80004d8 <__aeabi_dmul>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4680      	mov	r8, r0
 8008a60:	4689      	mov	r9, r1
 8008a62:	f7f7 fd39 	bl	80004d8 <__aeabi_dmul>
 8008a66:	a36c      	add	r3, pc, #432	; (adr r3, 8008c18 <atan+0x288>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	f7f7 fd32 	bl	80004d8 <__aeabi_dmul>
 8008a74:	a36a      	add	r3, pc, #424	; (adr r3, 8008c20 <atan+0x290>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fb77 	bl	800016c <__adddf3>
 8008a7e:	4632      	mov	r2, r6
 8008a80:	463b      	mov	r3, r7
 8008a82:	f7f7 fd29 	bl	80004d8 <__aeabi_dmul>
 8008a86:	a368      	add	r3, pc, #416	; (adr r3, 8008c28 <atan+0x298>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fb6e 	bl	800016c <__adddf3>
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	f7f7 fd20 	bl	80004d8 <__aeabi_dmul>
 8008a98:	a365      	add	r3, pc, #404	; (adr r3, 8008c30 <atan+0x2a0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fb65 	bl	800016c <__adddf3>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	f7f7 fd17 	bl	80004d8 <__aeabi_dmul>
 8008aaa:	a363      	add	r3, pc, #396	; (adr r3, 8008c38 <atan+0x2a8>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fb5c 	bl	800016c <__adddf3>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f7 fd0e 	bl	80004d8 <__aeabi_dmul>
 8008abc:	a360      	add	r3, pc, #384	; (adr r3, 8008c40 <atan+0x2b0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fb53 	bl	800016c <__adddf3>
 8008ac6:	4642      	mov	r2, r8
 8008ac8:	464b      	mov	r3, r9
 8008aca:	f7f7 fd05 	bl	80004d8 <__aeabi_dmul>
 8008ace:	a35e      	add	r3, pc, #376	; (adr r3, 8008c48 <atan+0x2b8>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fcfc 	bl	80004d8 <__aeabi_dmul>
 8008ae0:	a35b      	add	r3, pc, #364	; (adr r3, 8008c50 <atan+0x2c0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fb3f 	bl	8000168 <__aeabi_dsub>
 8008aea:	4632      	mov	r2, r6
 8008aec:	463b      	mov	r3, r7
 8008aee:	f7f7 fcf3 	bl	80004d8 <__aeabi_dmul>
 8008af2:	a359      	add	r3, pc, #356	; (adr r3, 8008c58 <atan+0x2c8>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fb36 	bl	8000168 <__aeabi_dsub>
 8008afc:	4632      	mov	r2, r6
 8008afe:	463b      	mov	r3, r7
 8008b00:	f7f7 fcea 	bl	80004d8 <__aeabi_dmul>
 8008b04:	a356      	add	r3, pc, #344	; (adr r3, 8008c60 <atan+0x2d0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fb2d 	bl	8000168 <__aeabi_dsub>
 8008b0e:	4632      	mov	r2, r6
 8008b10:	463b      	mov	r3, r7
 8008b12:	f7f7 fce1 	bl	80004d8 <__aeabi_dmul>
 8008b16:	a354      	add	r3, pc, #336	; (adr r3, 8008c68 <atan+0x2d8>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fb24 	bl	8000168 <__aeabi_dsub>
 8008b20:	4632      	mov	r2, r6
 8008b22:	463b      	mov	r3, r7
 8008b24:	f7f7 fcd8 	bl	80004d8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fb1c 	bl	800016c <__adddf3>
 8008b34:	4622      	mov	r2, r4
 8008b36:	462b      	mov	r3, r5
 8008b38:	f7f7 fcce 	bl	80004d8 <__aeabi_dmul>
 8008b3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	d144      	bne.n	8008bd0 <atan+0x240>
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fb0d 	bl	8000168 <__aeabi_dsub>
 8008b4e:	e734      	b.n	80089ba <atan+0x2a>
 8008b50:	2200      	movs	r2, #0
 8008b52:	4b4c      	ldr	r3, [pc, #304]	; (8008c84 <atan+0x2f4>)
 8008b54:	f7f7 fb08 	bl	8000168 <__aeabi_dsub>
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	4b48      	ldr	r3, [pc, #288]	; (8008c84 <atan+0x2f4>)
 8008b64:	f7f7 fb02 	bl	800016c <__adddf3>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 fddc 	bl	800072c <__aeabi_ddiv>
 8008b74:	f04f 0a01 	mov.w	sl, #1
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	e767      	b.n	8008a4e <atan+0xbe>
 8008b7e:	4b43      	ldr	r3, [pc, #268]	; (8008c8c <atan+0x2fc>)
 8008b80:	429e      	cmp	r6, r3
 8008b82:	da1a      	bge.n	8008bba <atan+0x22a>
 8008b84:	2200      	movs	r2, #0
 8008b86:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <atan+0x300>)
 8008b88:	f7f7 faee 	bl	8000168 <__aeabi_dsub>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	4620      	mov	r0, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <atan+0x300>)
 8008b98:	f7f7 fc9e 	bl	80004d8 <__aeabi_dmul>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4b39      	ldr	r3, [pc, #228]	; (8008c84 <atan+0x2f4>)
 8008ba0:	f7f7 fae4 	bl	800016c <__adddf3>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f7 fdbe 	bl	800072c <__aeabi_ddiv>
 8008bb0:	f04f 0a02 	mov.w	sl, #2
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	e749      	b.n	8008a4e <atan+0xbe>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4934      	ldr	r1, [pc, #208]	; (8008c94 <atan+0x304>)
 8008bc2:	f7f7 fdb3 	bl	800072c <__aeabi_ddiv>
 8008bc6:	f04f 0a03 	mov.w	sl, #3
 8008bca:	4604      	mov	r4, r0
 8008bcc:	460d      	mov	r5, r1
 8008bce:	e73e      	b.n	8008a4e <atan+0xbe>
 8008bd0:	4b31      	ldr	r3, [pc, #196]	; (8008c98 <atan+0x308>)
 8008bd2:	4e32      	ldr	r6, [pc, #200]	; (8008c9c <atan+0x30c>)
 8008bd4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008bd8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008bdc:	e9da 2300 	ldrd	r2, r3, [sl]
 8008be0:	f7f7 fac2 	bl	8000168 <__aeabi_dsub>
 8008be4:	4622      	mov	r2, r4
 8008be6:	462b      	mov	r3, r5
 8008be8:	f7f7 fabe 	bl	8000168 <__aeabi_dsub>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008bf4:	f7f7 fab8 	bl	8000168 <__aeabi_dsub>
 8008bf8:	f1bb 0f00 	cmp.w	fp, #0
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	f6bf aee4 	bge.w	80089cc <atan+0x3c>
 8008c04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c08:	461d      	mov	r5, r3
 8008c0a:	e6df      	b.n	80089cc <atan+0x3c>
 8008c0c:	4d24      	ldr	r5, [pc, #144]	; (8008ca0 <atan+0x310>)
 8008c0e:	e6dd      	b.n	80089cc <atan+0x3c>
 8008c10:	8800759c 	.word	0x8800759c
 8008c14:	7e37e43c 	.word	0x7e37e43c
 8008c18:	e322da11 	.word	0xe322da11
 8008c1c:	3f90ad3a 	.word	0x3f90ad3a
 8008c20:	24760deb 	.word	0x24760deb
 8008c24:	3fa97b4b 	.word	0x3fa97b4b
 8008c28:	a0d03d51 	.word	0xa0d03d51
 8008c2c:	3fb10d66 	.word	0x3fb10d66
 8008c30:	c54c206e 	.word	0xc54c206e
 8008c34:	3fb745cd 	.word	0x3fb745cd
 8008c38:	920083ff 	.word	0x920083ff
 8008c3c:	3fc24924 	.word	0x3fc24924
 8008c40:	5555550d 	.word	0x5555550d
 8008c44:	3fd55555 	.word	0x3fd55555
 8008c48:	2c6a6c2f 	.word	0x2c6a6c2f
 8008c4c:	bfa2b444 	.word	0xbfa2b444
 8008c50:	52defd9a 	.word	0x52defd9a
 8008c54:	3fadde2d 	.word	0x3fadde2d
 8008c58:	af749a6d 	.word	0xaf749a6d
 8008c5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008c60:	fe231671 	.word	0xfe231671
 8008c64:	3fbc71c6 	.word	0x3fbc71c6
 8008c68:	9998ebc4 	.word	0x9998ebc4
 8008c6c:	3fc99999 	.word	0x3fc99999
 8008c70:	440fffff 	.word	0x440fffff
 8008c74:	7ff00000 	.word	0x7ff00000
 8008c78:	54442d18 	.word	0x54442d18
 8008c7c:	bff921fb 	.word	0xbff921fb
 8008c80:	3fdbffff 	.word	0x3fdbffff
 8008c84:	3ff00000 	.word	0x3ff00000
 8008c88:	3ff2ffff 	.word	0x3ff2ffff
 8008c8c:	40038000 	.word	0x40038000
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	bff00000 	.word	0xbff00000
 8008c98:	08009580 	.word	0x08009580
 8008c9c:	08009560 	.word	0x08009560
 8008ca0:	3ff921fb 	.word	0x3ff921fb

08008ca4 <fabs>:
 8008ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ca8:	4770      	bx	lr

08008caa <finite>:
 8008caa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008cae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008cb2:	0fc0      	lsrs	r0, r0, #31
 8008cb4:	4770      	bx	lr
	...

08008cb8 <nan>:
 8008cb8:	2000      	movs	r0, #0
 8008cba:	4901      	ldr	r1, [pc, #4]	; (8008cc0 <nan+0x8>)
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	7ff80000 	.word	0x7ff80000

08008cc4 <rint>:
 8008cc4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8008cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cca:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8008cce:	2f13      	cmp	r7, #19
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8008cdc:	dc59      	bgt.n	8008d92 <rint+0xce>
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	da2a      	bge.n	8008d38 <rint+0x74>
 8008ce2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ce6:	4301      	orrs	r1, r0
 8008ce8:	d022      	beq.n	8008d30 <rint+0x6c>
 8008cea:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8008cee:	4301      	orrs	r1, r0
 8008cf0:	424d      	negs	r5, r1
 8008cf2:	430d      	orrs	r5, r1
 8008cf4:	4936      	ldr	r1, [pc, #216]	; (8008dd0 <rint+0x10c>)
 8008cf6:	0c5c      	lsrs	r4, r3, #17
 8008cf8:	0b2d      	lsrs	r5, r5, #12
 8008cfa:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8008cfe:	0464      	lsls	r4, r4, #17
 8008d00:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d04:	ea45 0304 	orr.w	r3, r5, r4
 8008d08:	e9d1 4500 	ldrd	r4, r5, [r1]
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 fa2c 	bl	800016c <__adddf3>
 8008d14:	e9cd 0100 	strd	r0, r1, [sp]
 8008d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	4622      	mov	r2, r4
 8008d20:	f7f7 fa22 	bl	8000168 <__aeabi_dsub>
 8008d24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d28:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4610      	mov	r0, r2
 8008d32:	4619      	mov	r1, r3
 8008d34:	b003      	add	sp, #12
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	4926      	ldr	r1, [pc, #152]	; (8008dd4 <rint+0x110>)
 8008d3a:	4139      	asrs	r1, r7
 8008d3c:	ea03 0001 	and.w	r0, r3, r1
 8008d40:	4310      	orrs	r0, r2
 8008d42:	d0f5      	beq.n	8008d30 <rint+0x6c>
 8008d44:	084b      	lsrs	r3, r1, #1
 8008d46:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8008d4a:	ea52 0501 	orrs.w	r5, r2, r1
 8008d4e:	d00c      	beq.n	8008d6a <rint+0xa6>
 8008d50:	ea24 0303 	bic.w	r3, r4, r3
 8008d54:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008d58:	2f13      	cmp	r7, #19
 8008d5a:	bf0c      	ite	eq
 8008d5c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8008d60:	2500      	movne	r5, #0
 8008d62:	fa44 f707 	asr.w	r7, r4, r7
 8008d66:	ea43 0407 	orr.w	r4, r3, r7
 8008d6a:	4919      	ldr	r1, [pc, #100]	; (8008dd0 <rint+0x10c>)
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8008d72:	462a      	mov	r2, r5
 8008d74:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 f9f6 	bl	800016c <__adddf3>
 8008d80:	e9cd 0100 	strd	r0, r1, [sp]
 8008d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	f7f7 f9ec 	bl	8000168 <__aeabi_dsub>
 8008d90:	e7cc      	b.n	8008d2c <rint+0x68>
 8008d92:	2f33      	cmp	r7, #51	; 0x33
 8008d94:	dd05      	ble.n	8008da2 <rint+0xde>
 8008d96:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8008d9a:	d1c9      	bne.n	8008d30 <rint+0x6c>
 8008d9c:	f7f7 f9e6 	bl	800016c <__adddf3>
 8008da0:	e7c4      	b.n	8008d2c <rint+0x68>
 8008da2:	f04f 31ff 	mov.w	r1, #4294967295
 8008da6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8008daa:	fa21 f10c 	lsr.w	r1, r1, ip
 8008dae:	4208      	tst	r0, r1
 8008db0:	d0be      	beq.n	8008d30 <rint+0x6c>
 8008db2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8008db6:	bf18      	it	ne
 8008db8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8008dbc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8008dc0:	bf1e      	ittt	ne
 8008dc2:	ea20 0303 	bicne.w	r3, r0, r3
 8008dc6:	fa45 fc0c 	asrne.w	ip, r5, ip
 8008dca:	ea43 050c 	orrne.w	r5, r3, ip
 8008dce:	e7cc      	b.n	8008d6a <rint+0xa6>
 8008dd0:	080095a0 	.word	0x080095a0
 8008dd4:	000fffff 	.word	0x000fffff

08008dd8 <scalbn>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008dde:	4604      	mov	r4, r0
 8008de0:	460d      	mov	r5, r1
 8008de2:	4617      	mov	r7, r2
 8008de4:	460b      	mov	r3, r1
 8008de6:	b996      	cbnz	r6, 8008e0e <scalbn+0x36>
 8008de8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dec:	4303      	orrs	r3, r0
 8008dee:	d039      	beq.n	8008e64 <scalbn+0x8c>
 8008df0:	4b35      	ldr	r3, [pc, #212]	; (8008ec8 <scalbn+0xf0>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	f7f7 fb70 	bl	80004d8 <__aeabi_dmul>
 8008df8:	4b34      	ldr	r3, [pc, #208]	; (8008ecc <scalbn+0xf4>)
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	429f      	cmp	r7, r3
 8008dfe:	460d      	mov	r5, r1
 8008e00:	da0f      	bge.n	8008e22 <scalbn+0x4a>
 8008e02:	a32d      	add	r3, pc, #180	; (adr r3, 8008eb8 <scalbn+0xe0>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fb66 	bl	80004d8 <__aeabi_dmul>
 8008e0c:	e006      	b.n	8008e1c <scalbn+0x44>
 8008e0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008e12:	4296      	cmp	r6, r2
 8008e14:	d10a      	bne.n	8008e2c <scalbn+0x54>
 8008e16:	4602      	mov	r2, r0
 8008e18:	f7f7 f9a8 	bl	800016c <__adddf3>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	e020      	b.n	8008e64 <scalbn+0x8c>
 8008e22:	460b      	mov	r3, r1
 8008e24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008e2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008e30:	19b9      	adds	r1, r7, r6
 8008e32:	4291      	cmp	r1, r2
 8008e34:	dd0e      	ble.n	8008e54 <scalbn+0x7c>
 8008e36:	a322      	add	r3, pc, #136	; (adr r3, 8008ec0 <scalbn+0xe8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008e40:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008e44:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008e48:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008e4c:	4820      	ldr	r0, [pc, #128]	; (8008ed0 <scalbn+0xf8>)
 8008e4e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008e52:	e7d9      	b.n	8008e08 <scalbn+0x30>
 8008e54:	2900      	cmp	r1, #0
 8008e56:	dd08      	ble.n	8008e6a <scalbn+0x92>
 8008e58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008e6e:	da16      	bge.n	8008e9e <scalbn+0xc6>
 8008e70:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e74:	429f      	cmp	r7, r3
 8008e76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008e7a:	dd08      	ble.n	8008e8e <scalbn+0xb6>
 8008e7c:	4c15      	ldr	r4, [pc, #84]	; (8008ed4 <scalbn+0xfc>)
 8008e7e:	4814      	ldr	r0, [pc, #80]	; (8008ed0 <scalbn+0xf8>)
 8008e80:	f363 74df 	bfi	r4, r3, #31, #1
 8008e84:	a30e      	add	r3, pc, #56	; (adr r3, 8008ec0 <scalbn+0xe8>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	e7bc      	b.n	8008e08 <scalbn+0x30>
 8008e8e:	4c12      	ldr	r4, [pc, #72]	; (8008ed8 <scalbn+0x100>)
 8008e90:	4812      	ldr	r0, [pc, #72]	; (8008edc <scalbn+0x104>)
 8008e92:	f363 74df 	bfi	r4, r3, #31, #1
 8008e96:	a308      	add	r3, pc, #32	; (adr r3, 8008eb8 <scalbn+0xe0>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	e7f5      	b.n	8008e8a <scalbn+0xb2>
 8008e9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ea2:	3136      	adds	r1, #54	; 0x36
 8008ea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ea8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008eac:	4620      	mov	r0, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <scalbn+0x108>)
 8008eb4:	e7a8      	b.n	8008e08 <scalbn+0x30>
 8008eb6:	bf00      	nop
 8008eb8:	c2f8f359 	.word	0xc2f8f359
 8008ebc:	01a56e1f 	.word	0x01a56e1f
 8008ec0:	8800759c 	.word	0x8800759c
 8008ec4:	7e37e43c 	.word	0x7e37e43c
 8008ec8:	43500000 	.word	0x43500000
 8008ecc:	ffff3cb0 	.word	0xffff3cb0
 8008ed0:	8800759c 	.word	0x8800759c
 8008ed4:	7e37e43c 	.word	0x7e37e43c
 8008ed8:	01a56e1f 	.word	0x01a56e1f
 8008edc:	c2f8f359 	.word	0xc2f8f359
 8008ee0:	3c900000 	.word	0x3c900000

08008ee4 <atanf>:
 8008ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008eec:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	db0e      	blt.n	8008f14 <atanf+0x30>
 8008ef6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008efa:	dd04      	ble.n	8008f06 <atanf+0x22>
 8008efc:	4601      	mov	r1, r0
 8008efe:	f7f7 fe39 	bl	8000b74 <__addsf3>
 8008f02:	4604      	mov	r4, r0
 8008f04:	e003      	b.n	8008f0e <atanf+0x2a>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f300 80ce 	bgt.w	80090a8 <atanf+0x1c4>
 8008f0c:	4c67      	ldr	r4, [pc, #412]	; (80090ac <atanf+0x1c8>)
 8008f0e:	4620      	mov	r0, r4
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	4b66      	ldr	r3, [pc, #408]	; (80090b0 <atanf+0x1cc>)
 8008f16:	429d      	cmp	r5, r3
 8008f18:	dc0e      	bgt.n	8008f38 <atanf+0x54>
 8008f1a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008f1e:	da08      	bge.n	8008f32 <atanf+0x4e>
 8008f20:	4964      	ldr	r1, [pc, #400]	; (80090b4 <atanf+0x1d0>)
 8008f22:	f7f7 fe27 	bl	8000b74 <__addsf3>
 8008f26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f2a:	f7f8 f8e7 	bl	80010fc <__aeabi_fcmpgt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d1ed      	bne.n	8008f0e <atanf+0x2a>
 8008f32:	f04f 36ff 	mov.w	r6, #4294967295
 8008f36:	e01c      	b.n	8008f72 <atanf+0x8e>
 8008f38:	f000 f8e0 	bl	80090fc <fabsf>
 8008f3c:	4b5e      	ldr	r3, [pc, #376]	; (80090b8 <atanf+0x1d4>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	429d      	cmp	r5, r3
 8008f42:	dc7c      	bgt.n	800903e <atanf+0x15a>
 8008f44:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008f48:	429d      	cmp	r5, r3
 8008f4a:	dc67      	bgt.n	800901c <atanf+0x138>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	f7f7 fe11 	bl	8000b74 <__addsf3>
 8008f52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008f56:	f7f7 fe0b 	bl	8000b70 <__aeabi_fsub>
 8008f5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7f7 fe07 	bl	8000b74 <__addsf3>
 8008f66:	4601      	mov	r1, r0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f7f7 ffbf 	bl	8000eec <__aeabi_fdiv>
 8008f6e:	2600      	movs	r6, #0
 8008f70:	4604      	mov	r4, r0
 8008f72:	4621      	mov	r1, r4
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7f7 ff05 	bl	8000d84 <__aeabi_fmul>
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	f7f7 ff01 	bl	8000d84 <__aeabi_fmul>
 8008f82:	4605      	mov	r5, r0
 8008f84:	494d      	ldr	r1, [pc, #308]	; (80090bc <atanf+0x1d8>)
 8008f86:	f7f7 fefd 	bl	8000d84 <__aeabi_fmul>
 8008f8a:	494d      	ldr	r1, [pc, #308]	; (80090c0 <atanf+0x1dc>)
 8008f8c:	f7f7 fdf2 	bl	8000b74 <__addsf3>
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fef7 	bl	8000d84 <__aeabi_fmul>
 8008f96:	494b      	ldr	r1, [pc, #300]	; (80090c4 <atanf+0x1e0>)
 8008f98:	f7f7 fdec 	bl	8000b74 <__addsf3>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 fef1 	bl	8000d84 <__aeabi_fmul>
 8008fa2:	4949      	ldr	r1, [pc, #292]	; (80090c8 <atanf+0x1e4>)
 8008fa4:	f7f7 fde6 	bl	8000b74 <__addsf3>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7f7 feeb 	bl	8000d84 <__aeabi_fmul>
 8008fae:	4947      	ldr	r1, [pc, #284]	; (80090cc <atanf+0x1e8>)
 8008fb0:	f7f7 fde0 	bl	8000b74 <__addsf3>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	f7f7 fee5 	bl	8000d84 <__aeabi_fmul>
 8008fba:	4945      	ldr	r1, [pc, #276]	; (80090d0 <atanf+0x1ec>)
 8008fbc:	f7f7 fdda 	bl	8000b74 <__addsf3>
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fedf 	bl	8000d84 <__aeabi_fmul>
 8008fc6:	4943      	ldr	r1, [pc, #268]	; (80090d4 <atanf+0x1f0>)
 8008fc8:	4607      	mov	r7, r0
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f7f7 feda 	bl	8000d84 <__aeabi_fmul>
 8008fd0:	4941      	ldr	r1, [pc, #260]	; (80090d8 <atanf+0x1f4>)
 8008fd2:	f7f7 fdcd 	bl	8000b70 <__aeabi_fsub>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 fed4 	bl	8000d84 <__aeabi_fmul>
 8008fdc:	493f      	ldr	r1, [pc, #252]	; (80090dc <atanf+0x1f8>)
 8008fde:	f7f7 fdc7 	bl	8000b70 <__aeabi_fsub>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	f7f7 fece 	bl	8000d84 <__aeabi_fmul>
 8008fe8:	493d      	ldr	r1, [pc, #244]	; (80090e0 <atanf+0x1fc>)
 8008fea:	f7f7 fdc1 	bl	8000b70 <__aeabi_fsub>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 fec8 	bl	8000d84 <__aeabi_fmul>
 8008ff4:	493b      	ldr	r1, [pc, #236]	; (80090e4 <atanf+0x200>)
 8008ff6:	f7f7 fdbb 	bl	8000b70 <__aeabi_fsub>
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fec2 	bl	8000d84 <__aeabi_fmul>
 8009000:	4601      	mov	r1, r0
 8009002:	4638      	mov	r0, r7
 8009004:	f7f7 fdb6 	bl	8000b74 <__addsf3>
 8009008:	4621      	mov	r1, r4
 800900a:	f7f7 febb 	bl	8000d84 <__aeabi_fmul>
 800900e:	1c73      	adds	r3, r6, #1
 8009010:	4601      	mov	r1, r0
 8009012:	d133      	bne.n	800907c <atanf+0x198>
 8009014:	4620      	mov	r0, r4
 8009016:	f7f7 fdab 	bl	8000b70 <__aeabi_fsub>
 800901a:	e772      	b.n	8008f02 <atanf+0x1e>
 800901c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009020:	f7f7 fda6 	bl	8000b70 <__aeabi_fsub>
 8009024:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009028:	4605      	mov	r5, r0
 800902a:	4620      	mov	r0, r4
 800902c:	f7f7 fda2 	bl	8000b74 <__addsf3>
 8009030:	4601      	mov	r1, r0
 8009032:	4628      	mov	r0, r5
 8009034:	f7f7 ff5a 	bl	8000eec <__aeabi_fdiv>
 8009038:	2601      	movs	r6, #1
 800903a:	4604      	mov	r4, r0
 800903c:	e799      	b.n	8008f72 <atanf+0x8e>
 800903e:	4b2a      	ldr	r3, [pc, #168]	; (80090e8 <atanf+0x204>)
 8009040:	429d      	cmp	r5, r3
 8009042:	dc14      	bgt.n	800906e <atanf+0x18a>
 8009044:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009048:	f7f7 fd92 	bl	8000b70 <__aeabi_fsub>
 800904c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8009050:	4605      	mov	r5, r0
 8009052:	4620      	mov	r0, r4
 8009054:	f7f7 fe96 	bl	8000d84 <__aeabi_fmul>
 8009058:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800905c:	f7f7 fd8a 	bl	8000b74 <__addsf3>
 8009060:	4601      	mov	r1, r0
 8009062:	4628      	mov	r0, r5
 8009064:	f7f7 ff42 	bl	8000eec <__aeabi_fdiv>
 8009068:	2602      	movs	r6, #2
 800906a:	4604      	mov	r4, r0
 800906c:	e781      	b.n	8008f72 <atanf+0x8e>
 800906e:	4601      	mov	r1, r0
 8009070:	481e      	ldr	r0, [pc, #120]	; (80090ec <atanf+0x208>)
 8009072:	f7f7 ff3b 	bl	8000eec <__aeabi_fdiv>
 8009076:	2603      	movs	r6, #3
 8009078:	4604      	mov	r4, r0
 800907a:	e77a      	b.n	8008f72 <atanf+0x8e>
 800907c:	4b1c      	ldr	r3, [pc, #112]	; (80090f0 <atanf+0x20c>)
 800907e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009082:	f7f7 fd75 	bl	8000b70 <__aeabi_fsub>
 8009086:	4621      	mov	r1, r4
 8009088:	f7f7 fd72 	bl	8000b70 <__aeabi_fsub>
 800908c:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <atanf+0x210>)
 800908e:	4601      	mov	r1, r0
 8009090:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009094:	f7f7 fd6c 	bl	8000b70 <__aeabi_fsub>
 8009098:	f1b8 0f00 	cmp.w	r8, #0
 800909c:	4604      	mov	r4, r0
 800909e:	f6bf af36 	bge.w	8008f0e <atanf+0x2a>
 80090a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80090a6:	e72c      	b.n	8008f02 <atanf+0x1e>
 80090a8:	4c13      	ldr	r4, [pc, #76]	; (80090f8 <atanf+0x214>)
 80090aa:	e730      	b.n	8008f0e <atanf+0x2a>
 80090ac:	bfc90fdb 	.word	0xbfc90fdb
 80090b0:	3edfffff 	.word	0x3edfffff
 80090b4:	7149f2ca 	.word	0x7149f2ca
 80090b8:	3f97ffff 	.word	0x3f97ffff
 80090bc:	3c8569d7 	.word	0x3c8569d7
 80090c0:	3d4bda59 	.word	0x3d4bda59
 80090c4:	3d886b35 	.word	0x3d886b35
 80090c8:	3dba2e6e 	.word	0x3dba2e6e
 80090cc:	3e124925 	.word	0x3e124925
 80090d0:	3eaaaaab 	.word	0x3eaaaaab
 80090d4:	bd15a221 	.word	0xbd15a221
 80090d8:	3d6ef16b 	.word	0x3d6ef16b
 80090dc:	3d9d8795 	.word	0x3d9d8795
 80090e0:	3de38e38 	.word	0x3de38e38
 80090e4:	3e4ccccd 	.word	0x3e4ccccd
 80090e8:	401bffff 	.word	0x401bffff
 80090ec:	bf800000 	.word	0xbf800000
 80090f0:	080095c0 	.word	0x080095c0
 80090f4:	080095b0 	.word	0x080095b0
 80090f8:	3fc90fdb 	.word	0x3fc90fdb

080090fc <fabsf>:
 80090fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009100:	4770      	bx	lr
	...

08009104 <_init>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	bf00      	nop
 8009108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910a:	bc08      	pop	{r3}
 800910c:	469e      	mov	lr, r3
 800910e:	4770      	bx	lr

08009110 <_fini>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr
